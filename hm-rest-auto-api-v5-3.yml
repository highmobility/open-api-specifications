info:
    title: 'REST API'
    version: 5.3.0
    description: >-
      The REST API allows you to retrieve vehicle data through a RESTful interface. All data responses are formatted according to the Auto API protocol and each response includes both the `VIN` and `brand`. Apart from the individual endpoints, the `/vehicle_status` endpoint returns data for all capabilities.

    
      Sandbox server: `https://sandbox.rest-api.high-mobility.com/v5`


      Production server: `https://rest-api.high-mobility.com/v5`
      
swagger: '2.0'
host: sandbox.rest-api.high-mobility.com
basePath: /v5
parameters:
    authorizationParam:
        name: Authorization
        in: header
        required: true
        type: string
definitions:
    adas.alertnessSystemStatus:
        description: 'Indicates if the driver alertness warning is active or inactive.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - active
            - inactive
    adas.alertnessSystemStatus.availability:
        description: 'Indicates if the driver alertness warning is active or inactive.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    adas.automatedParkingBrake:
        description: 'Automatic brake state'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - active
            - inactive
    adas.automatedParkingBrake.availability:
        description: 'Automatic brake state'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    adas.blindSpotWarningState:
        description: 'Indicates whether the blind spot warning system is active or not.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - active
            - inactive
    adas.blindSpotWarningState.availability:
        description: 'Indicates whether the blind spot warning system is active or not.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    adas.blindSpotWarningSystem:
        description: 'Indicates whether the blind spot warning system is turned on or not.'
        example:
            data: {value: on}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - off
            - on
    adas.blindSpotWarningSystem.availability:
        description: 'Indicates whether the blind spot warning system is turned on or not.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - off
            - on
    adas.blindSpotWarningSystemCoverage:
        description: 'Blind spot warning system coverage.'
        example:
            data: {value: regular}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - regular
            - trailer
    adas.blindSpotWarningSystemCoverage.availability:
        description: 'Blind spot warning system coverage.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - regular
            - trailer
    adas.forwardCollisionWarningSystem:
        description: 'Indicates whether the forward collision warning system is active or inactive.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - active
            - inactive
    adas.forwardCollisionWarningSystem.availability:
        description: 'Indicates whether the forward collision warning system is active or inactive.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    adas.laneKeepAssistsStates:
        description: 'Lane keeping assist state indicating the vehicle is actively controlling the wheels.'
        example:
            - {data: {location: {value: left}, state: {value: inactive}}, timestamp: '2024-07-15T12:28:16.710Z'}
            - {data: {location: {value: right}, state: {value: active}}, timestamp: '2024-07-15T12:28:16.710Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [left, right]}, state: {type: string, enum: [active, inactive]}}
    adas.laneKeepAssistsStates.availability:
        description: 'Lane keeping assist state indicating the vehicle is actively controlling the wheels.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [left, right]}, state: {type: string, enum: [active, inactive]}}
    adas.laneKeepAssistSystem:
        description: 'Indicates if the lane keep assist system is turned on or not.'
        example:
            data: {value: on}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - off
            - on
    adas.laneKeepAssistSystem.availability:
        description: 'Indicates if the lane keep assist system is turned on or not.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - off
            - on
    adas.launchControl:
        description: 'State of launch control activation.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - active
            - inactive
    adas.launchControl.availability:
        description: 'State of launch control activation.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    adas.parkAssists:
        description: 'If the alarm is active and the driver has muted or not park assists.'
        example:
            - {data: {location: {value: front}, alarm: {value: inactive}, muted: {value: not_muted}}, timestamp: '2024-07-15T12:28:16.710Z'}
            - {data: {location: {value: rear}, alarm: {value: active}, muted: {value: not_muted}}, timestamp: '2024-07-15T12:28:16.710Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, alarm: {type: string, enum: [active, inactive]}, muted: {type: string, enum: [muted, not_muted]}}
    adas.parkAssists.availability:
        description: 'If the alarm is active and the driver has muted or not park assists.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, alarm: {type: string, enum: [active, inactive]}, muted: {type: string, enum: [muted, not_muted]}}
    adas.rearCrossWarningSystem:
        description: 'Indicates whether the rear cross warning system is active or not.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - active
            - inactive
    adas.rearCrossWarningSystem.availability:
        description: 'Indicates whether the rear cross warning system is active or not.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    adas.status:
        description: 'Indicates whether the driver assistance system is active or not.'
        example:
            data: {value: on}
            timestamp: '2024-07-15T12:28:16.710Z'
        type: string
        enum:
            - off
            - on
    adas.status.availability:
        description: 'Indicates whether the driver assistance system is active or not.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - off
            - on
    adas:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            alertnessSystemStatus: {$ref: '#/definitions/adas.alertnessSystemStatus'}
            automatedParkingBrake: {$ref: '#/definitions/adas.automatedParkingBrake'}
            blindSpotWarningState: {$ref: '#/definitions/adas.blindSpotWarningState'}
            blindSpotWarningSystem: {$ref: '#/definitions/adas.blindSpotWarningSystem'}
            blindSpotWarningSystemCoverage: {$ref: '#/definitions/adas.blindSpotWarningSystemCoverage'}
            forwardCollisionWarningSystem: {$ref: '#/definitions/adas.forwardCollisionWarningSystem'}
            laneKeepAssistsStates: {$ref: '#/definitions/adas.laneKeepAssistsStates'}
            laneKeepAssistSystem: {$ref: '#/definitions/adas.laneKeepAssistSystem'}
            launchControl: {$ref: '#/definitions/adas.launchControl'}
            parkAssists: {$ref: '#/definitions/adas.parkAssists'}
            rearCrossWarningSystem: {$ref: '#/definitions/adas.rearCrossWarningSystem'}
            status: {$ref: '#/definitions/adas.status'}
    adas.availability:
        type: object
        properties:
            alertnessSystemStatus: {$ref: '#/definitions/adas.alertnessSystemStatus.availability'}
            automatedParkingBrake: {$ref: '#/definitions/adas.automatedParkingBrake.availability'}
            blindSpotWarningState: {$ref: '#/definitions/adas.blindSpotWarningState.availability'}
            blindSpotWarningSystem: {$ref: '#/definitions/adas.blindSpotWarningSystem.availability'}
            blindSpotWarningSystemCoverage: {$ref: '#/definitions/adas.blindSpotWarningSystemCoverage.availability'}
            forwardCollisionWarningSystem: {$ref: '#/definitions/adas.forwardCollisionWarningSystem.availability'}
            laneKeepAssistsStates: {$ref: '#/definitions/adas.laneKeepAssistsStates.availability'}
            laneKeepAssistSystem: {$ref: '#/definitions/adas.laneKeepAssistSystem.availability'}
            launchControl: {$ref: '#/definitions/adas.launchControl.availability'}
            parkAssists: {$ref: '#/definitions/adas.parkAssists.availability'}
            rearCrossWarningSystem: {$ref: '#/definitions/adas.rearCrossWarningSystem.availability'}
            status: {$ref: '#/definitions/adas.status.availability'}
    browser.url:
        description: 'The URL'
        example:
            data: {value: 'https://about.high-mobility.com'}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
    browser.url.availability:
        description: 'The URL'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    capabilities.capabilities:
        example:
            - {data: {capability: doors, supportedProperties: [insideLocks, insideLocksState, locks, locksState, positions]}}
            - {data: {capability: charging, supportedProperties: [chargeLimit, departureTimes, estimatedRange]}}
        type: array
        items:
            type: object
            properties: {capabilityID: {description: 'The identifier of the supported capability', type: number, format: integer}, supportedPropertyIDs: {description: 'Array of supported property identifiers', type: array, items: {type: number, format: integer}}}
    capabilities.webhooks:
        example:
            - {data: {available: {value: available}, event: {value: trip_started}}, timestamp: '2024-07-15T12:28:16.711Z'}
            - {data: {available: {value: available}, event: {value: trip_ended}}, timestamp: '2024-07-15T12:28:16.711Z'}
        type: array
        items:
            type: object
            properties: {available: {description: 'If the specified webhook is available.', type: string, enum: [available, unavailable]}, event: {description: 'Triggered event', type: string, enum: [accident_reported, authorization_changed, battery_guard_warning, breakdown_reported, dashboard_lights_changed, emergency_reported, engine_changed, fleet_clearance_changed, ignition_changed, maintenance_changed, ping, seat_belt_triggered, tire_pressure_changed, trip_ended, trip_started, vehicle_location_changed]}}
    capabilities:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            capabilities: {$ref: '#/definitions/capabilities.capabilities'}
            webhooks: {$ref: '#/definitions/capabilities.webhooks'}
    capabilities.availability:
        type: object
        properties:
            capabilities: {$ref: '#/definitions/capabilities.capabilities.availability'}
            webhooks: {$ref: '#/definitions/capabilities.webhooks.availability'}
    charging.acousticLimit:
        description: 'Acoustic limitation of charging process.'
        example:
            data: {value: automatic}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - automatic
            - limited
            - no_action
            - unlimited
    charging.acousticLimit.availability:
        description: 'Acoustic limitation of charging process.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - automatic
            - limited
            - no_action
            - unlimited
    charging.auxiliaryPower:
        description: 'Auxiliary power used for predictions.'
        example:
            data: {value: 120, unit: kilowatts}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.auxiliaryPower.availability:
        description: 'Auxiliary power used for predictions.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryCapacity:
        description: 'Indicates the battery capacity'
        example:
            data: {value: 70, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryCapacity.availability:
        description: 'Indicates the battery capacity'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryChargeTransferEvent:
        description: 'Indicates that the high-voltage battery lost state of charge due to an energy transfer to the 12V battery.'
        example:
            data: {value: low_voltage_battery_service_required}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - low_voltage_battery_high_usage
            - low_voltage_battery_service_required
            - vehicle_service_required
    charging.batteryChargeTransferEvent.availability:
        description: 'Indicates that the high-voltage battery lost state of charge due to an energy transfer to the 12V battery.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - low_voltage_battery_high_usage
            - low_voltage_battery_service_required
            - vehicle_service_required
    charging.batteryChargeType:
        description: 'Battery charge type.'
        example:
            data: {value: quick}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - accelerated
            - fast
            - no_charge
            - normal
            - not_used
            - quick
            - ultra_fast
            - vehicle_to_grid
            - vehicle_to_home
    charging.batteryChargeType.availability:
        description: 'Battery charge type.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - accelerated
            - fast
            - no_charge
            - normal
            - not_used
            - quick
            - ultra_fast
            - vehicle_to_grid
            - vehicle_to_home
    charging.batteryCoolingTemperature:
        description: 'Battery cooling temperature.'
        example:
            data: {value: 63.4, unit: celsius}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryCoolingTemperature.availability:
        description: 'Battery cooling temperature.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryCurrent:
        description: 'Battery current - charging if posititive and discharning when negative.'
        example:
            data: {value: -0.6, unit: amperes}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryCurrent.availability:
        description: 'Battery current - charging if posititive and discharning when negative.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryEnergy:
        description: 'Energy content of the high-voltage battery.'
        example:
            data: {value: 119.5, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryEnergy.availability:
        description: 'Energy content of the high-voltage battery.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryEnergyChargable:
        description: 'Energy required until high-voltage battery is fully charged.'
        example:
            data: {value: 30.75, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryEnergyChargable.availability:
        description: 'Energy required until high-voltage battery is fully charged.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryLed:
        description: 'State of LED for the battery.'
        example:
            data: {value: no_colour}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - blue
            - error
            - green
            - green_flashing
            - green_pulsing
            - green_red_pulsing
            - initialising
            - no_colour
            - red
            - red_pulsing
            - white
            - yellow
            - yellow_pulsing
    charging.batteryLed.availability:
        description: 'State of LED for the battery.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - blue
            - error
            - green
            - green_flashing
            - green_pulsing
            - green_red_pulsing
            - initialising
            - no_colour
            - red
            - red_pulsing
            - white
            - yellow
            - yellow_pulsing
    charging.batteryLevel:
        description: 'Battery level percentage between 0.0-1.0'
        example:
            data: {value: 0.5}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: number
        format: double
    charging.batteryLevel.availability:
        description: 'Battery level percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    charging.batteryLevelAtDeparture:
        description: 'Battery charge level expected at time of departure'
        example:
            data: {value: 0.9}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: number
        format: double
    charging.batteryLevelAtDeparture.availability:
        description: 'Battery charge level expected at time of departure'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    charging.batteryMaxAvailable:
        description: 'Maximum available energy content of the high-voltage battery.'
        example:
            data: {value: 99, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryMaxAvailable.availability:
        description: 'Maximum available energy content of the high-voltage battery.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryPerformanceStatus:
        description: 'Performance status of the xEV battery.'
        example:
            data: {value: normal}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - caution
            - normal
            - reduced
            - severly_reduced
    charging.batteryPerformanceStatus.availability:
        description: 'Performance status of the xEV battery.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - caution
            - normal
            - reduced
            - severly_reduced
    charging.batteryStatus:
        description: 'Battery state.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - active
            - balancing
            - conditioning
            - error
            - external_load
            - inactive
            - initialising
            - load
    charging.batteryStatus.availability:
        description: 'Battery state.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - balancing
            - conditioning
            - error
            - external_load
            - inactive
            - initialising
            - load
    charging.batteryTemperature:
        description: 'Battery temperature'
        example:
            data: {value: 38.4, unit: celsius}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryTemperature.availability:
        description: 'Battery temperature'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.batteryTemperatureControlDemand:
        description: 'Current demand of HV battery temperature control system.'
        example:
            data: {value: high_cooling}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - circulation_requirement
            - high_cooling
            - high_heating
            - low_cooling
            - low_heating
            - medium_cooling
            - medium_heating
            - no_temperature_requirement
    charging.batteryTemperatureControlDemand.availability:
        description: 'Current demand of HV battery temperature control system.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - circulation_requirement
            - high_cooling
            - high_heating
            - low_cooling
            - low_heating
            - medium_cooling
            - medium_heating
            - no_temperature_requirement
    charging.batteryTemperatureExtremes:
        description: 'Current highest-lowest temperature inside the battery.'
        example:
            data: {extreme: {value: highest}, temperature: {value: 85, unit: celsius}}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: object
        properties:
            extreme: {type: string, enum: [highest, lowest]}
            temperature: {}
    charging.batteryTemperatureExtremes.availability:
        description: 'Current highest-lowest temperature inside the battery.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            extreme: {type: string, enum: [highest, lowest]}
            temperature: {}
    charging.batteryVoltage:
        description: 'High-voltage battery electric potential difference (aka voltage).'
        example:
            data: {value: 120, unit: volts}
            timestamp: '2024-07-15T12:28:16.711Z'
    charging.batteryVoltage.availability:
        description: 'High-voltage battery electric potential difference (aka voltage).'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.chargeLimit:
        description: 'Charge limit percentage between 0.0-1.0'
        example:
            data: {value: 0.9}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: number
        format: double
    charging.chargeLimit.availability:
        description: 'Charge limit percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    charging.chargeMode:
        example:
            data: {value: timer_based}
            timestamp: '2024-07-15T12:28:16.711Z'
        type: string
        enum:
            - conductive
            - immediate
            - inductive
            - push_button
            - timer_based
    charging.chargeMode.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - conductive
            - immediate
            - inductive
            - push_button
            - timer_based
    charging.chargePortState:
        example:
            data: {value: open}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - closed
            - open
    charging.chargePortState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - open
    charging.chargerPower:
        description: 'Power of the charger.'
        example:
            data: {value: 120, unit: kilowatts}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.chargerPower.availability:
        description: 'Power of the charger.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.chargerVoltage:
        description: 'Charger voltage'
        example:
            data: {value: 400, unit: volts}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.chargerVoltage.availability:
        description: 'Charger voltage'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.chargingCompleteLock:
        description: 'Locking status of the charging plug after charging complete.'
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - active
            - inactive
    charging.chargingCompleteLock.availability:
        description: 'Locking status of the charging plug after charging complete.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    charging.chargingCurrent:
        description: 'Charging electric current.'
        example:
            data: {value: 3.14, unit: amperes}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.chargingCurrent.availability:
        description: 'Charging electric current.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.chargingEndReason:
        description: 'Reason for ending a charging process.'
        example:
            data: {value: goal_reached}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - charging_station_failure
            - connector_removed
            - goal_reached
            - hv_system_failure
            - no_parking_lock
            - parking_lock_failed
            - powergrid_failed
            - requested_by_driver
            - signal_invalid
            - unknown
    charging.chargingEndReason.availability:
        description: 'Reason for ending a charging process.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - charging_station_failure
            - connector_removed
            - goal_reached
            - hv_system_failure
            - no_parking_lock
            - parking_lock_failed
            - powergrid_failed
            - requested_by_driver
            - signal_invalid
            - unknown
    charging.chargingPhases:
        description: 'Charging process count of the high-voltage battery (phases).'
        example:
            data: {value: one}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - no_charging
            - one
            - three
            - two
    charging.chargingPhases.availability:
        description: 'Charging process count of the high-voltage battery (phases).'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - no_charging
            - one
            - three
            - two
    charging.chargingRate:
        description: 'Charge rate when charging'
        example:
            data: {value: 150, unit: kilowatts}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.chargingRate.availability:
        description: 'Charge rate when charging'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.chargingRateDistance:
        description: 'Range increase per time unit during ongoing charging process based on the average energy comsumption for driving.'
        example:
            data: {distance: {value: 150, unit: kilometers}, time: {value: 1, unit: hours}}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: object
        properties:
            distance: {description: 'Distance driven'}
            time: {description: 'Duration of time for the given distance'}
    charging.chargingRateDistance.availability:
        description: 'Range increase per time unit during ongoing charging process based on the average energy comsumption for driving.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            distance: {description: 'Distance driven'}
            time: {description: 'Duration of time for the given distance'}
    charging.chargingScenario:
        description: 'Charging scenario.'
        example:
            data: {value: charging_to_departure_time_finished}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - charging_interrupt_by_user
            - charging_to_departure_time_active
            - charging_to_departure_time_finished
            - charging_to_departure_time_waiting
            - emergency_charging
            - error_charging_system
            - error_lock
            - immediately_charging_active
            - immediately_charging_finished
            - immediately_optimised_charging_active
            - immediately_optimised_charging_finished
            - initialization_charging_communication
            - no_grid_voltage
            - off
            - optimised_charging_active
            - optimised_charging_finished
            - optimised_charging_waiting
            - plug_releasable
    charging.chargingScenario.availability:
        description: 'Charging scenario.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - charging_interrupt_by_user
            - charging_to_departure_time_active
            - charging_to_departure_time_finished
            - charging_to_departure_time_waiting
            - emergency_charging
            - error_charging_system
            - error_lock
            - immediately_charging_active
            - immediately_charging_finished
            - immediately_optimised_charging_active
            - immediately_optimised_charging_finished
            - initialization_charging_communication
            - no_grid_voltage
            - off
            - optimised_charging_active
            - optimised_charging_finished
            - optimised_charging_waiting
            - plug_releasable
    charging.chargingSingleImmediate:
        description: 'Single instant charging function status.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - active
            - inactive
    charging.chargingSingleImmediate.availability:
        description: 'Single instant charging function status.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    charging.chargingTimeDisplay:
        description: 'Charging time displayed in the vehicle.'
        example:
            data: {value: display_duration}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - display_duration
            - no_display
            - no_display_duration
    charging.chargingTimeDisplay.availability:
        description: 'Charging time displayed in the vehicle.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - display_duration
            - no_display
            - no_display_duration
    charging.chargingWindowChosen:
        example:
            data: {value: not_chosen}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - chosen
            - not_chosen
    charging.chargingWindowChosen.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - chosen
            - not_chosen
    charging.conservingCharge:
        description: 'Indicates if the vehicle is conserving charge.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - active
            - inactive
    charging.conservingCharge.availability:
        description: 'Indicates if the vehicle is conserving charge.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    charging.currentLimit:
        description: 'Limit for the charging current.'
        example:
            data: {value: 100, unit: amperes}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.currentLimit.availability:
        description: 'Limit for the charging current.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.currentType:
        description: 'Type of current in use'
        example:
            data: {value: alternating_current}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - alternating_current
            - direct_current
    charging.currentType.availability:
        description: 'Type of current in use'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - alternating_current
            - direct_current
    charging.departureTimeDisplay:
        description: 'Departure time displayed in the vehicle.'
        example:
            data: {value: reachable}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - no_display
            - not_reachable
            - reachable
    charging.departureTimeDisplay.availability:
        description: 'Departure time displayed in the vehicle.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - no_display
            - not_reachable
            - reachable
    charging.departureTimes:
        example:
            - {data: {state: {value: active}, time: {hour: {value: 16}, minute: {value: 32}}}, timestamp: '2024-07-15T12:28:16.712Z'}
            - {data: {state: {value: inactive}, time: {hour: {value: 11}, minute: {value: 51}}}, timestamp: '2024-07-15T12:28:16.712Z'}
        type: array
        items:
            type: object
            properties: {state: {type: string, enum: [active, inactive]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.departureTimes.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {state: {type: string, enum: [active, inactive]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.distanceToCompleteCharge:
        description: 'Distance until charging completed'
        example:
            data: {value: 120.5, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.distanceToCompleteCharge.availability:
        description: 'Distance until charging completed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.drivingModePHEV:
        description: 'Indicates the current driving mode for Plug-In Hybrid Vehicle.'
        example:
            data: {value: hybrid_parallel}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - full_electric
            - hybrid_parallel
            - hybrid_serial
            - in_charge
            - not_in_traction
            - thermic
    charging.drivingModePHEV.availability:
        description: 'Indicates the current driving mode for Plug-In Hybrid Vehicle.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - full_electric
            - hybrid_parallel
            - hybrid_serial
            - in_charge
            - not_in_traction
            - thermic
    charging.estimatedRange:
        description: 'Estimated range'
        example:
            data: {value: 432.1, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.estimatedRange.availability:
        description: 'Estimated range'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.estimatedRangeTarget:
        description: 'Remaining electric range depending on target charging status.'
        example:
            data: {value: 300, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.estimatedRangeTarget.availability:
        description: 'Remaining electric range depending on target charging status.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.flapLockStatus:
        description: 'Locking status of charging flap.'
        example:
            data: {value: locked}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - locked
            - unlocked
    charging.flapLockStatus.availability:
        description: 'Locking status of charging flap.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    charging.fullyChargedEndTimes:
        description: 'Time and weekday when the vehicle will be fully charged.'
        example:
            data: {weekday: {value: monday}, time: {hour: {value: 5}, minute: {value: 30}}}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: object
        properties:
            weekday: {type: string, enum: [automatic, friday, monday, saturday, sunday, thursday, tuesday, wednesday]}
            time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}
    charging.fullyChargedEndTimes.availability:
        description: 'Time and weekday when the vehicle will be fully charged.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            weekday: {type: string, enum: [automatic, friday, monday, saturday, sunday, thursday, tuesday, wednesday]}
            time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}
    charging.hybridOperatingMode:
        description: 'Operating mode of the hybrid vehicle.'
        example:
            data: {value: auto_charge_sustain}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - auto_charge_deplete
            - auto_charge_sustain
            - forced_charge_sustain
            - forced_electric
            - forced_non_electric
            - prioritize_charge_generation
            - temporary_charge_sustain
    charging.hybridOperatingMode.availability:
        description: 'Operating mode of the hybrid vehicle.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - auto_charge_deplete
            - auto_charge_sustain
            - forced_charge_sustain
            - forced_electric
            - forced_non_electric
            - prioritize_charge_generation
            - temporary_charge_sustain
    charging.limitStatus:
        description: 'Indicates whether charging limit is active.'
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - active
            - inactive
    charging.limitStatus.availability:
        description: 'Indicates whether charging limit is active.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    charging.maxChargingCurrent:
        description: 'Maximum charging current'
        example:
            data: {value: 25, unit: amperes}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.maxChargingCurrent.availability:
        description: 'Maximum charging current'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.maxRange:
        description: 'Maximum electric range with 100% of battery'
        example:
            data: {value: 555, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.maxRange.availability:
        description: 'Maximum electric range with 100% of battery'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.minChargingCurrent:
        description: 'Minimum charging current.'
        example:
            data: {value: 5, unit: amperes}
            timestamp: '2024-07-15T12:28:16.712Z'
    charging.minChargingCurrent.availability:
        description: 'Minimum charging current.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.pluggedIn:
        example:
            data: {value: plugged_in}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - disconnected
            - plugged_in
            - plugged_in_both_sides
    charging.pluggedIn.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disconnected
            - plugged_in
            - plugged_in_both_sides
    charging.plugLockStatus:
        description: 'Locking status of charging plug.'
        example:
            data: {value: unlocked}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - locked
            - unlocked
    charging.plugLockStatus.availability:
        description: 'Locking status of charging plug.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    charging.plugType:
        example:
            data: {value: type_2}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - ccs
            - chademo
            - type_1
            - type_2
    charging.plugType.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - ccs
            - chademo
            - type_1
            - type_2
    charging.preconditioningDepartureEnabled:
        description: 'Preconditioning activation status at departure'
        example:
            data: {value: enabled}
            timestamp: '2024-07-15T12:28:16.712Z'
        type: string
        enum:
            - disabled
            - enabled
    charging.preconditioningDepartureEnabled.availability:
        description: 'Preconditioning activation status at departure'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disabled
            - enabled
    charging.preconditioningDepartureStatus:
        description: 'Status of preconditioning at departure time'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - active
            - inactive
    charging.preconditioningDepartureStatus.availability:
        description: 'Status of preconditioning at departure time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    charging.preconditioningError:
        description: 'Preconditioning error if one is encountered'
        example:
            data: {value: not_possible_low}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - available_after_engine_restart
            - general_error
            - no_change
            - not_possible_finished
            - not_possible_low
    charging.preconditioningError.availability:
        description: 'Preconditioning error if one is encountered'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - available_after_engine_restart
            - general_error
            - no_change
            - not_possible_finished
            - not_possible_low
    charging.preconditioningImmediateStatus:
        description: 'Status of immediate preconditioning'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - active
            - inactive
    charging.preconditioningImmediateStatus.availability:
        description: 'Status of immediate preconditioning'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    charging.preconditioningRemainingTime:
        description: 'Time until preconditioning is complete.'
        example:
            data: {value: 110, unit: minutes}
            timestamp: '2024-07-15T12:28:16.713Z'
    charging.preconditioningRemainingTime.availability:
        description: 'Time until preconditioning is complete.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging.preconditioningScheduledTime:
        description: 'Preconditioning scheduled departure time.'
        example:
            data: {hour: {value: 5}, minute: {value: 30}}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    charging.preconditioningScheduledTime.availability:
        description: 'Preconditioning scheduled departure time.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    charging.reductionTimes:
        example:
            - {data: {startStop: {value: start}, time: {hour: {value: 17}, minute: {value: 33}}}, timestamp: '2024-07-15T12:28:16.713Z'}
            - {data: {startStop: {value: stop}, time: {hour: {value: 12}, minute: {value: 52}}}, timestamp: '2024-07-15T12:28:16.713Z'}
        type: array
        items:
            type: object
            properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.reductionTimes.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.restriction:
        description: 'Charging limit and state'
        example:
            data: {active: {value: active}, limit: {value: max}}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: object
        properties:
            active: {description: 'Indicates whether the charging current used to charge the vehicle is limited.', type: string, enum: [active, inactive]}
            limit: {type: string, enum: [max, min, reduced]}
    charging.restriction.availability:
        description: 'Charging limit and state'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            active: {description: 'Indicates whether the charging current used to charge the vehicle is limited.', type: string, enum: [active, inactive]}
            limit: {type: string, enum: [max, min, reduced]}
    charging.smartChargingOption:
        description: 'Smart charging option being used to charge with.'
        example:
            data: {value: renewable_energy}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - co2_optimized
            - price_optimized
            - renewable_energy
    charging.smartChargingOption.availability:
        description: 'Smart charging option being used to charge with.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - co2_optimized
            - price_optimized
            - renewable_energy
    charging.smartChargingStatus:
        description: 'Status of optimized/intelligent charging'
        example:
            data: {value: scc_is_active}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - peak_setting_active
            - scc_is_active
            - wallbox_is_active
    charging.smartChargingStatus.availability:
        description: 'Status of optimized/intelligent charging'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - peak_setting_active
            - scc_is_active
            - wallbox_is_active
    charging.starterBatteryState:
        description: 'State of the starter battery'
        example:
            data: {value: green}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - green
            - green_yellow
            - orange
            - red
            - yellow
    charging.starterBatteryState.availability:
        description: 'State of the starter battery'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - green
            - green_yellow
            - orange
            - red
            - yellow
    charging.stationDisplayedStatus:
        description: 'Status shown on the display of the charging station.'
        example:
            data: {value: in_progress}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - completed
            - discharging
            - fault
            - in_progress
            - not_plugged_in
            - not_ready
            - paused
            - scheduled
            - station_not_compatible
            - station_not_detected
            - stopped
    charging.stationDisplayedStatus.availability:
        description: 'Status shown on the display of the charging station.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - completed
            - discharging
            - fault
            - in_progress
            - not_plugged_in
            - not_ready
            - paused
            - scheduled
            - station_not_compatible
            - station_not_detected
            - stopped
    charging.stationPowerType:
        description: 'The power type of the connected charging station.'
        example:
            data: {value: ac_smart}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - ac_basic
            - ac_smart
            - dc_fast
            - wireless
    charging.stationPowerType.availability:
        description: 'The power type of the connected charging station.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - ac_basic
            - ac_smart
            - dc_fast
            - wireless
    charging.stationStatus:
        description: 'Status of the charging station.'
        example:
            data: {value: station_ready}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - active
            - digital_communication_ended
            - digital_communication_established
            - not_compatible
            - not_detected
            - station_ready
    charging.stationStatus.availability:
        description: 'Status of the charging station.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - digital_communication_ended
            - digital_communication_established
            - not_compatible
            - not_detected
            - station_ready
    charging.status:
        example:
            data: {value: charging}
            timestamp: '2024-07-15T12:28:16.713Z'
        type: string
        enum:
            - cable_unplugged
            - charging
            - charging_complete
            - charging_error
            - charging_paused
            - conditioning
            - discharging
            - fast_charging
            - flap_open
            - foreign_object_detected
            - initialising
            - not_charging
            - ready_for_charging
            - slow_charging
    charging.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - cable_unplugged
            - charging
            - charging_complete
            - charging_error
            - charging_paused
            - conditioning
            - discharging
            - fast_charging
            - flap_open
            - foreign_object_detected
            - initialising
            - not_charging
            - ready_for_charging
            - slow_charging
    charging.timers:
        example:
            - {data: {timerType: {value: preferred_start_time}, date: {value: '2017-01-10T16:32:05.000Z'}}, timestamp: '2024-07-15T12:28:16.713Z'}
            - {data: {timerType: {value: preferred_end_time}, date: {value: '2017-01-10T16:36:05.000Z'}}, timestamp: '2024-07-15T12:28:16.713Z'}
            - {data: {timerType: {value: departure_date}, date: {value: '2017-01-10T16:36:05.000Z'}}, timestamp: '2024-07-15T12:28:16.713Z'}
        type: array
        items:
            type: object
            properties: {timerType: {type: string, enum: [departure_date, preferred_end_time, preferred_start_time]}, date: {description: 'Timer date', type: string, format: date-time}}
    charging.timers.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {timerType: {type: string, enum: [departure_date, preferred_end_time, preferred_start_time]}, date: {description: 'Timer date', type: string, format: date-time}}
    charging.timeToCompleteCharge:
        description: 'Time until charging completed'
        example:
            data: {value: 60, unit: minutes}
            timestamp: '2024-07-15T12:28:16.714Z'
    charging.timeToCompleteCharge.availability:
        description: 'Time until charging completed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    charging:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            acousticLimit: {$ref: '#/definitions/charging.acousticLimit'}
            auxiliaryPower: {$ref: '#/definitions/charging.auxiliaryPower'}
            batteryCapacity: {$ref: '#/definitions/charging.batteryCapacity'}
            batteryChargeTransferEvent: {$ref: '#/definitions/charging.batteryChargeTransferEvent'}
            batteryChargeType: {$ref: '#/definitions/charging.batteryChargeType'}
            batteryCoolingTemperature: {$ref: '#/definitions/charging.batteryCoolingTemperature'}
            batteryCurrent: {$ref: '#/definitions/charging.batteryCurrent'}
            batteryEnergy: {$ref: '#/definitions/charging.batteryEnergy'}
            batteryEnergyChargable: {$ref: '#/definitions/charging.batteryEnergyChargable'}
            batteryLed: {$ref: '#/definitions/charging.batteryLed'}
            batteryLevel: {$ref: '#/definitions/charging.batteryLevel'}
            batteryLevelAtDeparture: {$ref: '#/definitions/charging.batteryLevelAtDeparture'}
            batteryMaxAvailable: {$ref: '#/definitions/charging.batteryMaxAvailable'}
            batteryPerformanceStatus: {$ref: '#/definitions/charging.batteryPerformanceStatus'}
            batteryStatus: {$ref: '#/definitions/charging.batteryStatus'}
            batteryTemperature: {$ref: '#/definitions/charging.batteryTemperature'}
            batteryTemperatureControlDemand: {$ref: '#/definitions/charging.batteryTemperatureControlDemand'}
            batteryTemperatureExtremes: {$ref: '#/definitions/charging.batteryTemperatureExtremes'}
            batteryVoltage: {$ref: '#/definitions/charging.batteryVoltage'}
            chargeLimit: {$ref: '#/definitions/charging.chargeLimit'}
            chargeMode: {$ref: '#/definitions/charging.chargeMode'}
            chargePortState: {$ref: '#/definitions/charging.chargePortState'}
            chargerPower: {$ref: '#/definitions/charging.chargerPower'}
            chargerVoltage: {$ref: '#/definitions/charging.chargerVoltage'}
            chargingCompleteLock: {$ref: '#/definitions/charging.chargingCompleteLock'}
            chargingCurrent: {$ref: '#/definitions/charging.chargingCurrent'}
            chargingEndReason: {$ref: '#/definitions/charging.chargingEndReason'}
            chargingPhases: {$ref: '#/definitions/charging.chargingPhases'}
            chargingRate: {$ref: '#/definitions/charging.chargingRate'}
            chargingRateDistance: {$ref: '#/definitions/charging.chargingRateDistance'}
            chargingScenario: {$ref: '#/definitions/charging.chargingScenario'}
            chargingSingleImmediate: {$ref: '#/definitions/charging.chargingSingleImmediate'}
            chargingTimeDisplay: {$ref: '#/definitions/charging.chargingTimeDisplay'}
            chargingWindowChosen: {$ref: '#/definitions/charging.chargingWindowChosen'}
            conservingCharge: {$ref: '#/definitions/charging.conservingCharge'}
            currentLimit: {$ref: '#/definitions/charging.currentLimit'}
            currentType: {$ref: '#/definitions/charging.currentType'}
            departureTimeDisplay: {$ref: '#/definitions/charging.departureTimeDisplay'}
            departureTimes: {$ref: '#/definitions/charging.departureTimes'}
            distanceToCompleteCharge: {$ref: '#/definitions/charging.distanceToCompleteCharge'}
            drivingModePHEV: {$ref: '#/definitions/charging.drivingModePHEV'}
            estimatedRange: {$ref: '#/definitions/charging.estimatedRange'}
            estimatedRangeTarget: {$ref: '#/definitions/charging.estimatedRangeTarget'}
            flapLockStatus: {$ref: '#/definitions/charging.flapLockStatus'}
            fullyChargedEndTimes: {$ref: '#/definitions/charging.fullyChargedEndTimes'}
            hybridOperatingMode: {$ref: '#/definitions/charging.hybridOperatingMode'}
            limitStatus: {$ref: '#/definitions/charging.limitStatus'}
            maxChargingCurrent: {$ref: '#/definitions/charging.maxChargingCurrent'}
            maxRange: {$ref: '#/definitions/charging.maxRange'}
            minChargingCurrent: {$ref: '#/definitions/charging.minChargingCurrent'}
            pluggedIn: {$ref: '#/definitions/charging.pluggedIn'}
            plugLockStatus: {$ref: '#/definitions/charging.plugLockStatus'}
            plugType: {$ref: '#/definitions/charging.plugType'}
            preconditioningDepartureEnabled: {$ref: '#/definitions/charging.preconditioningDepartureEnabled'}
            preconditioningDepartureStatus: {$ref: '#/definitions/charging.preconditioningDepartureStatus'}
            preconditioningError: {$ref: '#/definitions/charging.preconditioningError'}
            preconditioningImmediateStatus: {$ref: '#/definitions/charging.preconditioningImmediateStatus'}
            preconditioningRemainingTime: {$ref: '#/definitions/charging.preconditioningRemainingTime'}
            preconditioningScheduledTime: {$ref: '#/definitions/charging.preconditioningScheduledTime'}
            reductionTimes: {$ref: '#/definitions/charging.reductionTimes'}
            restriction: {$ref: '#/definitions/charging.restriction'}
            smartChargingOption: {$ref: '#/definitions/charging.smartChargingOption'}
            smartChargingStatus: {$ref: '#/definitions/charging.smartChargingStatus'}
            starterBatteryState: {$ref: '#/definitions/charging.starterBatteryState'}
            stationDisplayedStatus: {$ref: '#/definitions/charging.stationDisplayedStatus'}
            stationPowerType: {$ref: '#/definitions/charging.stationPowerType'}
            stationStatus: {$ref: '#/definitions/charging.stationStatus'}
            status: {$ref: '#/definitions/charging.status'}
            timers: {$ref: '#/definitions/charging.timers'}
            timeToCompleteCharge: {$ref: '#/definitions/charging.timeToCompleteCharge'}
    charging.availability:
        type: object
        properties:
            acousticLimit: {$ref: '#/definitions/charging.acousticLimit.availability'}
            auxiliaryPower: {$ref: '#/definitions/charging.auxiliaryPower.availability'}
            batteryCapacity: {$ref: '#/definitions/charging.batteryCapacity.availability'}
            batteryChargeTransferEvent: {$ref: '#/definitions/charging.batteryChargeTransferEvent.availability'}
            batteryChargeType: {$ref: '#/definitions/charging.batteryChargeType.availability'}
            batteryCoolingTemperature: {$ref: '#/definitions/charging.batteryCoolingTemperature.availability'}
            batteryCurrent: {$ref: '#/definitions/charging.batteryCurrent.availability'}
            batteryEnergy: {$ref: '#/definitions/charging.batteryEnergy.availability'}
            batteryEnergyChargable: {$ref: '#/definitions/charging.batteryEnergyChargable.availability'}
            batteryLed: {$ref: '#/definitions/charging.batteryLed.availability'}
            batteryLevel: {$ref: '#/definitions/charging.batteryLevel.availability'}
            batteryLevelAtDeparture: {$ref: '#/definitions/charging.batteryLevelAtDeparture.availability'}
            batteryMaxAvailable: {$ref: '#/definitions/charging.batteryMaxAvailable.availability'}
            batteryPerformanceStatus: {$ref: '#/definitions/charging.batteryPerformanceStatus.availability'}
            batteryStatus: {$ref: '#/definitions/charging.batteryStatus.availability'}
            batteryTemperature: {$ref: '#/definitions/charging.batteryTemperature.availability'}
            batteryTemperatureControlDemand: {$ref: '#/definitions/charging.batteryTemperatureControlDemand.availability'}
            batteryTemperatureExtremes: {$ref: '#/definitions/charging.batteryTemperatureExtremes.availability'}
            batteryVoltage: {$ref: '#/definitions/charging.batteryVoltage.availability'}
            chargeLimit: {$ref: '#/definitions/charging.chargeLimit.availability'}
            chargeMode: {$ref: '#/definitions/charging.chargeMode.availability'}
            chargePortState: {$ref: '#/definitions/charging.chargePortState.availability'}
            chargerPower: {$ref: '#/definitions/charging.chargerPower.availability'}
            chargerVoltage: {$ref: '#/definitions/charging.chargerVoltage.availability'}
            chargingCompleteLock: {$ref: '#/definitions/charging.chargingCompleteLock.availability'}
            chargingCurrent: {$ref: '#/definitions/charging.chargingCurrent.availability'}
            chargingEndReason: {$ref: '#/definitions/charging.chargingEndReason.availability'}
            chargingPhases: {$ref: '#/definitions/charging.chargingPhases.availability'}
            chargingRate: {$ref: '#/definitions/charging.chargingRate.availability'}
            chargingRateDistance: {$ref: '#/definitions/charging.chargingRateDistance.availability'}
            chargingScenario: {$ref: '#/definitions/charging.chargingScenario.availability'}
            chargingSingleImmediate: {$ref: '#/definitions/charging.chargingSingleImmediate.availability'}
            chargingTimeDisplay: {$ref: '#/definitions/charging.chargingTimeDisplay.availability'}
            chargingWindowChosen: {$ref: '#/definitions/charging.chargingWindowChosen.availability'}
            conservingCharge: {$ref: '#/definitions/charging.conservingCharge.availability'}
            currentLimit: {$ref: '#/definitions/charging.currentLimit.availability'}
            currentType: {$ref: '#/definitions/charging.currentType.availability'}
            departureTimeDisplay: {$ref: '#/definitions/charging.departureTimeDisplay.availability'}
            departureTimes: {$ref: '#/definitions/charging.departureTimes.availability'}
            distanceToCompleteCharge: {$ref: '#/definitions/charging.distanceToCompleteCharge.availability'}
            drivingModePHEV: {$ref: '#/definitions/charging.drivingModePHEV.availability'}
            estimatedRange: {$ref: '#/definitions/charging.estimatedRange.availability'}
            estimatedRangeTarget: {$ref: '#/definitions/charging.estimatedRangeTarget.availability'}
            flapLockStatus: {$ref: '#/definitions/charging.flapLockStatus.availability'}
            fullyChargedEndTimes: {$ref: '#/definitions/charging.fullyChargedEndTimes.availability'}
            hybridOperatingMode: {$ref: '#/definitions/charging.hybridOperatingMode.availability'}
            limitStatus: {$ref: '#/definitions/charging.limitStatus.availability'}
            maxChargingCurrent: {$ref: '#/definitions/charging.maxChargingCurrent.availability'}
            maxRange: {$ref: '#/definitions/charging.maxRange.availability'}
            minChargingCurrent: {$ref: '#/definitions/charging.minChargingCurrent.availability'}
            pluggedIn: {$ref: '#/definitions/charging.pluggedIn.availability'}
            plugLockStatus: {$ref: '#/definitions/charging.plugLockStatus.availability'}
            plugType: {$ref: '#/definitions/charging.plugType.availability'}
            preconditioningDepartureEnabled: {$ref: '#/definitions/charging.preconditioningDepartureEnabled.availability'}
            preconditioningDepartureStatus: {$ref: '#/definitions/charging.preconditioningDepartureStatus.availability'}
            preconditioningError: {$ref: '#/definitions/charging.preconditioningError.availability'}
            preconditioningImmediateStatus: {$ref: '#/definitions/charging.preconditioningImmediateStatus.availability'}
            preconditioningRemainingTime: {$ref: '#/definitions/charging.preconditioningRemainingTime.availability'}
            preconditioningScheduledTime: {$ref: '#/definitions/charging.preconditioningScheduledTime.availability'}
            reductionTimes: {$ref: '#/definitions/charging.reductionTimes.availability'}
            restriction: {$ref: '#/definitions/charging.restriction.availability'}
            smartChargingOption: {$ref: '#/definitions/charging.smartChargingOption.availability'}
            smartChargingStatus: {$ref: '#/definitions/charging.smartChargingStatus.availability'}
            starterBatteryState: {$ref: '#/definitions/charging.starterBatteryState.availability'}
            stationDisplayedStatus: {$ref: '#/definitions/charging.stationDisplayedStatus.availability'}
            stationPowerType: {$ref: '#/definitions/charging.stationPowerType.availability'}
            stationStatus: {$ref: '#/definitions/charging.stationStatus.availability'}
            status: {$ref: '#/definitions/charging.status.availability'}
            timers: {$ref: '#/definitions/charging.timers.availability'}
            timeToCompleteCharge: {$ref: '#/definitions/charging.timeToCompleteCharge.availability'}
    chargingSession.businessErrors:
        example:
            - {data: {value: 'Please check the charging station'}, timestamp: '2024-07-15T12:28:16.714Z'}
            - {data: {value: 'Repeat the plug-in'}, timestamp: '2024-07-15T12:28:16.714Z'}
        type: array
        items:
            type: string
    chargingSession.businessErrors.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: string
    chargingSession.calculatedEnergyCharged:
        description: 'Calculated amount of energy charged during the session'
        example:
            data: {value: 3.567, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.714Z'
    chargingSession.calculatedEnergyCharged.availability:
        description: 'Calculated amount of energy charged during the session'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chargingSession.chargingCost:
        description: 'Charging cost information'
        example:
            data: {currency: {value: EUR}, calculatedChargingCost: {value: 2.2758383109}, calculatedSavings: {value: 0.5672}, simulatedImmediateChargingCost: {value: 2.2758383109}}
            timestamp: '2024-07-15T12:28:16.714Z'
        type: object
        properties:
            currency: {description: 'Currency ISO code', type: string}
            calculatedChargingCost: {description: 'Calculated charging cost', type: number, format: double}
            calculatedSavings: {description: 'Calculated savings from charging', type: number, format: double}
            simulatedImmediateChargingCost: {description: 'Simulated charging costs', type: number, format: double}
    chargingSession.chargingCost.availability:
        description: 'Charging cost information'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            currency: {description: 'Currency ISO code', type: string}
            calculatedChargingCost: {description: 'Calculated charging cost', type: number, format: double}
            calculatedSavings: {description: 'Calculated savings from charging', type: number, format: double}
            simulatedImmediateChargingCost: {description: 'Simulated charging costs', type: number, format: double}
    chargingSession.displayedStartStateOfCharge:
        description: 'Displayed state of charge at start to the driver'
        example:
            data: {value: 0.12}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: number
        format: double
    chargingSession.displayedStartStateOfCharge.availability:
        description: 'Displayed state of charge at start to the driver'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    chargingSession.displayedStateOfCharge:
        description: 'Displayed state of charge to the driver'
        example:
            data: {value: 0.29}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: number
        format: double
    chargingSession.displayedStateOfCharge.availability:
        description: 'Displayed state of charge to the driver'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    chargingSession.endTime:
        description: 'End time of the charging session'
        example:
            data: {value: '2021-03-10T10:58:45.694Z'}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        format: date-time
    chargingSession.endTime.availability:
        description: 'End time of the charging session'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    chargingSession.energyCharged:
        description: 'Energy charged during the session'
        example:
            data: {value: 2.345, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.715Z'
    chargingSession.energyCharged.availability:
        description: 'Energy charged during the session'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chargingSession.location:
        description: 'Charging location address'
        example:
            data: {municipality: {value: Berlin}, formattedAddress: {value: 'Skalitzer Straße 68, 10997 Berlin, Germany'}, streetAddress: {value: 'Skalitzer Straße 68'}}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: object
        properties:
            municipality: {description: 'Municipality component of the address', type: string}
            formattedAddress: {description: 'Full formatted address', type: string}
            streetAddress: {description: 'Street address component', type: string}
    chargingSession.location.availability:
        description: 'Charging location address'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            municipality: {description: 'Municipality component of the address', type: string}
            formattedAddress: {description: 'Full formatted address', type: string}
            streetAddress: {description: 'Street address component', type: string}
    chargingSession.odometer:
        description: 'The vehicle odometer value in a given units'
        example:
            data: {value: 2050, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.715Z'
    chargingSession.odometer.availability:
        description: 'The vehicle odometer value in a given units'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chargingSession.preconditioningState:
        description: 'Preconditioning is active or not'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - active
            - inactive
    chargingSession.preconditioningState.availability:
        description: 'Preconditioning is active or not'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    chargingSession.publicChargingPoints:
        description: 'Matching public charging points.'
        example:
            - {data: {city: {value: Berlin}, postalCode: {value: '10997'}, street: {value: 'Skalitzer Straße 68'}, provider: {value: 'High Energy Low Prices Charging Provider'}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {city: {value: Tallinn}, postalCode: {value: '10130'}, street: {value: 'Harju 6'}, provider: {value: 'Free Wifi and Charging Provider'}}, timestamp: '2024-07-15T12:28:16.715Z'}
        type: array
        items:
            type: object
            properties: {city: {description: 'City the charging point is in.', type: string}, postalCode: {description: 'Postal code the charging point is at.', type: string}, street: {description: 'Street address the chargin point is at.', type: string}, provider: {description: 'The provider name of the charging point.', type: string}}
    chargingSession.publicChargingPoints.availability:
        description: 'Matching public charging points.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {city: {description: 'City the charging point is in.', type: string}, postalCode: {description: 'Postal code the charging point is at.', type: string}, street: {description: 'Street address the chargin point is at.', type: string}, provider: {description: 'The provider name of the charging point.', type: string}}
    chargingSession.startTime:
        description: 'Start time of the charging session'
        example:
            data: {value: '2021-03-10T11:00:39.373Z'}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        format: date-time
    chargingSession.startTime.availability:
        description: 'Start time of the charging session'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    chargingSession.timeZone:
        description: 'Time zone of the charging session'
        example:
            data: {value: Europe/Berlin}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
    chargingSession.timeZone.availability:
        description: 'Time zone of the charging session'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    chargingSession.totalChargingDuration:
        description: 'Total time charging was active during the session'
        example:
            data: {value: 8765, unit: seconds}
            timestamp: '2024-07-15T12:28:16.715Z'
    chargingSession.totalChargingDuration.availability:
        description: 'Total time charging was active during the session'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chargingSession:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            businessErrors: {$ref: '#/definitions/chargingSession.businessErrors'}
            calculatedEnergyCharged: {$ref: '#/definitions/chargingSession.calculatedEnergyCharged'}
            chargingCost: {$ref: '#/definitions/chargingSession.chargingCost'}
            displayedStartStateOfCharge: {$ref: '#/definitions/chargingSession.displayedStartStateOfCharge'}
            displayedStateOfCharge: {$ref: '#/definitions/chargingSession.displayedStateOfCharge'}
            endTime: {$ref: '#/definitions/chargingSession.endTime'}
            energyCharged: {$ref: '#/definitions/chargingSession.energyCharged'}
            location: {$ref: '#/definitions/chargingSession.location'}
            odometer: {$ref: '#/definitions/chargingSession.odometer'}
            preconditioningState: {$ref: '#/definitions/chargingSession.preconditioningState'}
            publicChargingPoints: {$ref: '#/definitions/chargingSession.publicChargingPoints'}
            startTime: {$ref: '#/definitions/chargingSession.startTime'}
            timeZone: {$ref: '#/definitions/chargingSession.timeZone'}
            totalChargingDuration: {$ref: '#/definitions/chargingSession.totalChargingDuration'}
    chargingSession.availability:
        type: object
        properties:
            businessErrors: {$ref: '#/definitions/chargingSession.businessErrors.availability'}
            calculatedEnergyCharged: {$ref: '#/definitions/chargingSession.calculatedEnergyCharged.availability'}
            chargingCost: {$ref: '#/definitions/chargingSession.chargingCost.availability'}
            displayedStartStateOfCharge: {$ref: '#/definitions/chargingSession.displayedStartStateOfCharge.availability'}
            displayedStateOfCharge: {$ref: '#/definitions/chargingSession.displayedStateOfCharge.availability'}
            endTime: {$ref: '#/definitions/chargingSession.endTime.availability'}
            energyCharged: {$ref: '#/definitions/chargingSession.energyCharged.availability'}
            location: {$ref: '#/definitions/chargingSession.location.availability'}
            odometer: {$ref: '#/definitions/chargingSession.odometer.availability'}
            preconditioningState: {$ref: '#/definitions/chargingSession.preconditioningState.availability'}
            publicChargingPoints: {$ref: '#/definitions/chargingSession.publicChargingPoints.availability'}
            startTime: {$ref: '#/definitions/chargingSession.startTime.availability'}
            timeZone: {$ref: '#/definitions/chargingSession.timeZone.availability'}
            totalChargingDuration: {$ref: '#/definitions/chargingSession.totalChargingDuration.availability'}
    chassisSettings.currentChassisPosition:
        description: 'The chassis position calculated from the lowest point'
        example:
            data: {value: 25.4, unit: millimeters}
            timestamp: '2024-07-15T12:28:16.715Z'
    chassisSettings.currentChassisPosition.availability:
        description: 'The chassis position calculated from the lowest point'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chassisSettings.currentSpringRates:
        description: 'The current values for the spring rates'
        example:
            - {data: {axle: {value: front}, springRate: {value: 21, unit: newton_millimeters}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {axle: {value: rear}, springRate: {value: 23, unit: newton_millimeters}}, timestamp: '2024-07-15T12:28:16.715Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.currentSpringRates.availability:
        description: 'The current values for the spring rates'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.drivingMode:
        example:
            data: {value: eco}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - comfort
            - eco
            - eco_plus
            - regular
            - sport
            - sport_plus
    chassisSettings.drivingMode.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - comfort
            - eco
            - eco_plus
            - regular
            - sport
            - sport_plus
    chassisSettings.maximumChassisPosition:
        description: 'The maximum possible value for the chassis position'
        example:
            data: {value: 55.5, unit: millimeters}
            timestamp: '2024-07-15T12:28:16.715Z'
    chassisSettings.maximumChassisPosition.availability:
        description: 'The maximum possible value for the chassis position'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chassisSettings.maximumSpringRates:
        description: 'The maximum possible values for the spring rates'
        example:
            - {data: {axle: {value: front}, springRate: {value: 37, unit: newton_millimeters}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {axle: {value: rear}, springRate: {value: 39, unit: newton_millimeters}}, timestamp: '2024-07-15T12:28:16.715Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.maximumSpringRates.availability:
        description: 'The maximum possible values for the spring rates'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.minimumChassisPosition:
        description: 'The minimum possible value for the chassis position'
        example:
            data: {value: -28.4, unit: millimeters}
            timestamp: '2024-07-15T12:28:16.715Z'
    chassisSettings.minimumChassisPosition.availability:
        description: 'The minimum possible value for the chassis position'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    chassisSettings.minimumSpringRates:
        description: 'The minimum possible values for the spring rates'
        example:
            - {data: {axle: {value: front}, springRate: {value: 16, unit: newton_millimeters}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {axle: {value: rear}, springRate: {value: 18, unit: newton_millimeters}}, timestamp: '2024-07-15T12:28:16.715Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.minimumSpringRates.availability:
        description: 'The minimum possible values for the spring rates'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.sportChrono:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - active
            - inactive
            - reset
    chassisSettings.sportChrono.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
            - reset
    chassisSettings:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            currentChassisPosition: {$ref: '#/definitions/chassisSettings.currentChassisPosition'}
            currentSpringRates: {$ref: '#/definitions/chassisSettings.currentSpringRates'}
            drivingMode: {$ref: '#/definitions/chassisSettings.drivingMode'}
            maximumChassisPosition: {$ref: '#/definitions/chassisSettings.maximumChassisPosition'}
            maximumSpringRates: {$ref: '#/definitions/chassisSettings.maximumSpringRates'}
            minimumChassisPosition: {$ref: '#/definitions/chassisSettings.minimumChassisPosition'}
            minimumSpringRates: {$ref: '#/definitions/chassisSettings.minimumSpringRates'}
            sportChrono: {$ref: '#/definitions/chassisSettings.sportChrono'}
    chassisSettings.availability:
        type: object
        properties:
            currentChassisPosition: {$ref: '#/definitions/chassisSettings.currentChassisPosition.availability'}
            currentSpringRates: {$ref: '#/definitions/chassisSettings.currentSpringRates.availability'}
            drivingMode: {$ref: '#/definitions/chassisSettings.drivingMode.availability'}
            maximumChassisPosition: {$ref: '#/definitions/chassisSettings.maximumChassisPosition.availability'}
            maximumSpringRates: {$ref: '#/definitions/chassisSettings.maximumSpringRates.availability'}
            minimumChassisPosition: {$ref: '#/definitions/chassisSettings.minimumChassisPosition.availability'}
            minimumSpringRates: {$ref: '#/definitions/chassisSettings.minimumSpringRates.availability'}
            sportChrono: {$ref: '#/definitions/chassisSettings.sportChrono.availability'}
    climate.airConditionerCompressorPower:
        description: 'Electric air conditioner compressor power.'
        example:
            data: {value: 0.8, unit: kilowatts}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.airConditionerCompressorPower.availability:
        description: 'Electric air conditioner compressor power.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate.defoggingState:
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - active
            - inactive
    climate.defoggingState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    climate.defrostingState:
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - active
            - inactive
    climate.defrostingState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    climate.defrostingTemperatureSetting:
        description: 'The defrosting temperature setting'
        example:
            data: {value: 21.2, unit: celsius}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.defrostingTemperatureSetting.availability:
        description: 'The defrosting temperature setting'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate.driverTemperatureSetting:
        description: 'The driver temperature setting'
        example:
            data: {value: 21.5, unit: celsius}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.driverTemperatureSetting.availability:
        description: 'The driver temperature setting'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate.humidity:
        description: 'Measured relative humidity between 0.0 - 1.0.'
        example:
            data: {value: 0.568}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: number
        format: double
    climate.humidity.availability:
        description: 'Measured relative humidity between 0.0 - 1.0.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    climate.hvacState:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - active
            - inactive
    climate.hvacState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    climate.hvacWeekdayStartingTimes:
        example:
            - {data: {weekday: {value: monday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: tuesday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: wednesday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: thursday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: friday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: saturday}, time: {hour: {value: 18}, minute: {value: 30}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: sunday}, time: {hour: {value: 19}, minute: {value: 31}}}, timestamp: '2024-07-15T12:28:16.715Z'}
            - {data: {weekday: {value: automatic}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2024-07-15T12:28:16.715Z'}
        type: array
        items:
            type: object
            properties: {weekday: {type: string, enum: [automatic, friday, monday, saturday, sunday, thursday, tuesday, wednesday]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    climate.hvacWeekdayStartingTimes.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {weekday: {type: string, enum: [automatic, friday, monday, saturday, sunday, thursday, tuesday, wednesday]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    climate.insideTemperature:
        description: 'The inside temperature'
        example:
            data: {value: 19.1, unit: celsius}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.insideTemperature.availability:
        description: 'The inside temperature'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate.ionisingState:
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.715Z'
        type: string
        enum:
            - active
            - inactive
    climate.ionisingState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    climate.outsideTemperature:
        description: 'The outside temperature'
        example:
            data: {value: 12.2, unit: celsius}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.outsideTemperature.availability:
        description: 'The outside temperature'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate.passengerTemperatureSetting:
        description: 'The passenger temperature setting'
        example:
            data: {value: 21.7, unit: celsius}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.passengerTemperatureSetting.availability:
        description: 'The passenger temperature setting'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate.rearTemperatureSetting:
        description: 'The rear temperature'
        example:
            data: {value: 21.6, unit: celsius}
            timestamp: '2024-07-15T12:28:16.715Z'
    climate.rearTemperatureSetting.availability:
        description: 'The rear temperature'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    climate:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            airConditionerCompressorPower: {$ref: '#/definitions/climate.airConditionerCompressorPower'}
            defoggingState: {$ref: '#/definitions/climate.defoggingState'}
            defrostingState: {$ref: '#/definitions/climate.defrostingState'}
            defrostingTemperatureSetting: {$ref: '#/definitions/climate.defrostingTemperatureSetting'}
            driverTemperatureSetting: {$ref: '#/definitions/climate.driverTemperatureSetting'}
            humidity: {$ref: '#/definitions/climate.humidity'}
            hvacState: {$ref: '#/definitions/climate.hvacState'}
            hvacWeekdayStartingTimes: {$ref: '#/definitions/climate.hvacWeekdayStartingTimes'}
            insideTemperature: {$ref: '#/definitions/climate.insideTemperature'}
            ionisingState: {$ref: '#/definitions/climate.ionisingState'}
            outsideTemperature: {$ref: '#/definitions/climate.outsideTemperature'}
            passengerTemperatureSetting: {$ref: '#/definitions/climate.passengerTemperatureSetting'}
            rearTemperatureSetting: {$ref: '#/definitions/climate.rearTemperatureSetting'}
    climate.availability:
        type: object
        properties:
            airConditionerCompressorPower: {$ref: '#/definitions/climate.airConditionerCompressorPower.availability'}
            defoggingState: {$ref: '#/definitions/climate.defoggingState.availability'}
            defrostingState: {$ref: '#/definitions/climate.defrostingState.availability'}
            defrostingTemperatureSetting: {$ref: '#/definitions/climate.defrostingTemperatureSetting.availability'}
            driverTemperatureSetting: {$ref: '#/definitions/climate.driverTemperatureSetting.availability'}
            humidity: {$ref: '#/definitions/climate.humidity.availability'}
            hvacState: {$ref: '#/definitions/climate.hvacState.availability'}
            hvacWeekdayStartingTimes: {$ref: '#/definitions/climate.hvacWeekdayStartingTimes.availability'}
            insideTemperature: {$ref: '#/definitions/climate.insideTemperature.availability'}
            ionisingState: {$ref: '#/definitions/climate.ionisingState.availability'}
            outsideTemperature: {$ref: '#/definitions/climate.outsideTemperature.availability'}
            passengerTemperatureSetting: {$ref: '#/definitions/climate.passengerTemperatureSetting.availability'}
            rearTemperatureSetting: {$ref: '#/definitions/climate.rearTemperatureSetting.availability'}
    crash.automaticECall:
        description: 'Automatic emergency call enabled state'
        example:
            data: {value: enabled}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - disabled
            - enabled
    crash.automaticECall.availability:
        description: 'Automatic emergency call enabled state'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disabled
            - enabled
    crash.impactZone:
        description: 'Impact zone of the crash'
        example:
            - {data: {value: rear_driver_side}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {value: side_driver_side}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {value: front_driver_side}, timestamp: '2024-07-15T12:28:16.716Z'}
        type: array
        items:
            type: string
            enum: [front_driver_side, front_passenger_side, pedestrian_protection, rear_driver_side, rear_passenger_side, rollover, side_driver_side, side_passenger_side]
    crash.impactZone.availability:
        description: 'Impact zone of the crash'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: string
            enum: [front_driver_side, front_passenger_side, pedestrian_protection, rear_driver_side, rear_passenger_side, rollover, side_driver_side, side_passenger_side]
    crash.incidents:
        example:
            - {data: {location: {value: front}, severity: {value: high}, repairs: {value: needed}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {location: {value: lateral}, severity: {value: medium}, repairs: {value: needed}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {location: {value: rear}, severity: {value: low}, repairs: {value: not_needed}}, timestamp: '2024-07-15T12:28:16.716Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, lateral, rear]}, severity: {type: string, enum: [high, low, medium, unknown, very_high]}, repairs: {type: string, enum: [needed, not_needed, unknown]}}
    crash.incidents.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, lateral, rear]}, severity: {type: string, enum: [high, low, medium, unknown, very_high]}, repairs: {type: string, enum: [needed, not_needed, unknown]}}
    crash.severity:
        description: 'Severity of the crash (from 0 to 7 - very high severity)'
        example:
            data: {value: 2}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: number
        format: integer
    crash.severity.availability:
        description: 'Severity of the crash (from 0 to 7 - very high severity)'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    crash.status:
        description: 'The system effect an inpact had on the vehicle.'
        example:
            data: {value: normal}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - airbag_triggered
            - normal
            - restraints_engaged
    crash.status.availability:
        description: 'The system effect an inpact had on the vehicle.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - airbag_triggered
            - normal
            - restraints_engaged
    crash.tippedState:
        example:
            data: {value: not_tipped}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - not_tipped
            - tipped_over
    crash.tippedState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - not_tipped
            - tipped_over
    crash.type:
        example:
            data: {value: non_pedestrian}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - non_pedestrian
            - pedestrian
    crash.type.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - non_pedestrian
            - pedestrian
    crash:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            automaticECall: {$ref: '#/definitions/crash.automaticECall'}
            impactZone: {$ref: '#/definitions/crash.impactZone'}
            incidents: {$ref: '#/definitions/crash.incidents'}
            severity: {$ref: '#/definitions/crash.severity'}
            status: {$ref: '#/definitions/crash.status'}
            tippedState: {$ref: '#/definitions/crash.tippedState'}
            type: {$ref: '#/definitions/crash.type'}
    crash.availability:
        type: object
        properties:
            automaticECall: {$ref: '#/definitions/crash.automaticECall.availability'}
            impactZone: {$ref: '#/definitions/crash.impactZone.availability'}
            incidents: {$ref: '#/definitions/crash.incidents.availability'}
            severity: {$ref: '#/definitions/crash.severity.availability'}
            status: {$ref: '#/definitions/crash.status.availability'}
            tippedState: {$ref: '#/definitions/crash.tippedState.availability'}
            type: {$ref: '#/definitions/crash.type.availability'}
    cruiseControl.accTargetSpeed:
        description: 'The target speed of the Adaptive Cruise Control'
        example:
            data: {value: 67, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.716Z'
    cruiseControl.accTargetSpeed.availability:
        description: 'The target speed of the Adaptive Cruise Control'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    cruiseControl.adaptiveCruiseControl:
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - active
            - inactive
    cruiseControl.adaptiveCruiseControl.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    cruiseControl.cruiseControl:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - active
            - inactive
    cruiseControl.cruiseControl.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    cruiseControl.limiter:
        example:
            data: {value: higher_speed_requested}
            timestamp: '2024-07-15T12:28:16.716Z'
        type: string
        enum:
            - higher_speed_requested
            - lower_speed_requested
            - not_set
            - speed_fixed
    cruiseControl.limiter.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - higher_speed_requested
            - lower_speed_requested
            - not_set
            - speed_fixed
    cruiseControl.targetSpeed:
        description: 'The target speed'
        example:
            data: {value: 61, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.716Z'
    cruiseControl.targetSpeed.availability:
        description: 'The target speed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    cruiseControl:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            accTargetSpeed: {$ref: '#/definitions/cruiseControl.accTargetSpeed'}
            adaptiveCruiseControl: {$ref: '#/definitions/cruiseControl.adaptiveCruiseControl'}
            cruiseControl: {$ref: '#/definitions/cruiseControl.cruiseControl'}
            limiter: {$ref: '#/definitions/cruiseControl.limiter'}
            targetSpeed: {$ref: '#/definitions/cruiseControl.targetSpeed'}
    cruiseControl.availability:
        type: object
        properties:
            accTargetSpeed: {$ref: '#/definitions/cruiseControl.accTargetSpeed.availability'}
            adaptiveCruiseControl: {$ref: '#/definitions/cruiseControl.adaptiveCruiseControl.availability'}
            cruiseControl: {$ref: '#/definitions/cruiseControl.cruiseControl.availability'}
            limiter: {$ref: '#/definitions/cruiseControl.limiter.availability'}
            targetSpeed: {$ref: '#/definitions/cruiseControl.targetSpeed.availability'}
    dashboardLights.bulbFailures:
        description: 'Vehicle light bulb failure'
        example:
            - {data: {value: turn_signal_right}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {value: high_beam}, timestamp: '2024-07-15T12:28:16.716Z'}
        type: array
        items:
            type: string
            enum: [day_running, fog_light_front, fog_light_rear, high_beam, high_beam_left, high_beam_right, low_beam, low_beam_left, low_beam_right, multiple, position, stop, trailer_electrical_failure, trailer_stop, trailer_turn, trailer_turn_left, trailer_turn_right, turn_signal_left, turn_signal_right]
    dashboardLights.bulbFailures.availability:
        description: 'Vehicle light bulb failure'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: string
            enum: [day_running, fog_light_front, fog_light_rear, high_beam, high_beam_left, high_beam_right, low_beam, low_beam_left, low_beam_right, multiple, position, stop, trailer_electrical_failure, trailer_stop, trailer_turn, trailer_turn_left, trailer_turn_right, turn_signal_left, turn_signal_right]
    dashboardLights.dashboardLights:
        example:
            - {data: {name: {value: high_beam}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: low_beam}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: hazard_warning}, state: {value: on}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: brake_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: hatch_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: fuel_level}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_coolant_temperature}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: battery_charging_condition}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_oil}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: position_lights}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: front_fog_light}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: rear_fog_light}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: park_heating}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_indicator}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: service_call}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: transmission_fluid_temperature}, state: {value: on}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: transmission_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: anti_lock_brake_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: worn_brake_linings}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: windscreen_washer_fluid}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_oil_level}, state: {value: on}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_coolant_level}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: steering_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: esc_indication}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: brake_lights}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: adblue_level}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: fuel_filter_diff_pressure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: seat_belt}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: advanced_braking}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: acc}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: trailer_connected}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: airbag}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: esc_switched_off}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: lane_departure_warning_off}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: air_filter_minder}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: air_suspension_ride_control_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: all_wheel_drive_disabled}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: anti_theft}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: blind_spot_detection}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: charge_system_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: check_fuel_cap}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: check_fuel_fill_inlet}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: check_fuel_filter}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: dc_temp_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: dc_warning_status}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_engine_idle_shutdown}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_engine_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_exhaust_fluid_system_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_exhaust_over_temp}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_exhaust_fluid_quality}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_filter_regeneration}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_particulate_filter}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: diesel_pre_heat}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: electric_trailer_brake_connection}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_cell_max_volt_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_cell_min_volt_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_charge_energy_storage_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_high_level_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_high_temperature_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_insulation_resist_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_jump_level_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_low_level_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_max_volt_veh_energy_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_min_volt_veh_energy_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_over_charge_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_poor_cell_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: ev_battery_temp_diff_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: forward_collision_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: fuel_door_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: hill_descent_control_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: hill_start_assist_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: hv_interlocking_status_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: lighting_system_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: malfunction_indicator}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: motor_controller_temp_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: park_aid_malfunction}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: passive_entry_passive_start}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: powertrain_malfunction}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: restraints_indicator_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: start_stop_engine_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: traction_control_disabled}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: traction_control_active}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: traction_motor_temp_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_pressure_monitor_system_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: water_in_fuel}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_warning_front_right}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_warning_front_left}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_warning_rear_right}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_warning_rear_left}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_warning_system_error}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: battery_low_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: brake_fluid_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: active_hood_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: active_spoiler_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: adjust_tire_pressure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: steering_lock_alert}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: anti_pollution_failure_engine_start_impossible}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: anti_pollution_system_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: anti_reverse_system_failing}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: auto_parking_brake}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: automatic_braking_deactive}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: automatic_braking_system_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: automatic_lights_settings_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: keyfob_battery_alarm}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: trunk_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: check_reversing_lamp}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: crossing_line_system_alert_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: dipped_beam_headlamps_front_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: dipped_beam_headlamps_front_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: directional_headlamps_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: directional_light_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: dsg_failing}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: electric_mode_not_available}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: electronic_lock_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_control_system_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: engine_oil_pressure_alert}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: esp_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: excessive_oil_temperature}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_front_left_flat}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_front_right_flat}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_rear_left_flat}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.716Z'}
            - {data: {name: {value: tire_rear_right_flat}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: fog_light_front_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: fog_light_front_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: fog_light_rear_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: fog_light_rear_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: fog_light_front_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_front_left_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_front_left_open_high_speed}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_front_left_not_monitored}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_front_right_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_front_right_open_high_speed}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_front_right_not_monitored}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: headlights_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: headlights_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: hybrid_system_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: hybrid_system_fault_repaired_vehicle}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: hydraulic_pressure_or_brake_fluid_insufficient}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: lane_departure_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: limited_visibility_aids_camera}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_pressure_low}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: maintenance_date_exceeded}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: maintenance_odometer_exceeded}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: other_failing_system}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: parking_brake_control_failing}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: parking_space_measuring_system_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: place_gear_to_parking}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: power_steering_assistance_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: power_steering_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: preheating_deactivated_battery_too_low}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: preheating_deactivated_fuel_level_too_low}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: preheating_deactivated_battery_set_the_clock}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: fog_light_rear_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_rear_left_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_rear_left_open_high_speed}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_rear_left_not_monitored}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_rear_right_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: door_rear_right_open_high_speed}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_rear_right_not_monitored}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: screen_rear_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: retractable_roof_mechanism_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: reverse_light_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: reverse_light_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: risk_of_ice}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: roof_operation_impossible_apply_parking_break}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: roof_operation_impossible_apply_start_engine}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: roof_operation_impossible_temperature_too_high}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: seatbelt_passenger_front_right_unbuckled}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: seatbelt_passenger_rear_left_unbuckled}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: seatbelt_passenger_rear_center_unbuckled}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: seatbelt_passenger_rear_right_unbuckled}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: battery_secondary_low}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: shock_sensor_failing}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: side_lights_front_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: side_lights_front_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: side_lights_rear_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: side_lights_rear_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: spare_wheel_fitter_driving_aids_deactivated}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: speed_control_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: stop_light_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: stop_light_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: suspension_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: suspension_failure_reduce_speed}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: suspension_fault_limited_to_90kmh}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_pressure_sensor_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: trunk_open_high_speed}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: trunk_window_open}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: turn_signal_front_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: turn_signal_front_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: turn_signal_rear_left_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: turn_signal_rear_right_failure}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: tire_under_inflation}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: wheel_pressure_fault}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: oil_change_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {name: {value: inspection_warning}, state: {value: off}}, timestamp: '2024-07-15T12:28:16.717Z'}
        type: array
        items:
            type: object
            properties: {name: {type: string, enum: [acc, active_hood_fault, active_spoiler_fault, adblue_level, adjust_tire_pressure, advanced_braking, air_filter_minder, air_suspension_ride_control_fault, airbag, all_wheel_drive_disabled, anti_lock_brake_failure, anti_pollution_failure_engine_start_impossible, anti_pollution_system_failure, anti_reverse_system_failing, anti_theft, auto_parking_brake, automatic_braking_deactive, automatic_braking_system_fault, automatic_lights_settings_failure, battery_charging_condition, battery_low_warning, battery_secondary_low, blind_spot_detection, brake_failure, brake_fluid_warning, brake_lights, charge_system_fault, check_fuel_cap, check_fuel_fill_inlet, check_fuel_filter, check_reversing_lamp, crossing_line_system_alert_failure, dc_temp_warning, dc_warning_status, diesel_engine_idle_shutdown, diesel_engine_warning, diesel_exhaust_fluid_quality, diesel_exhaust_fluid_system_fault, diesel_exhaust_over_temp, diesel_filter_regeneration, diesel_oil_filter_water_presence, diesel_particulate_filter, diesel_pre_heat, dipped_beam_headlamps_front_left_failure, dipped_beam_headlamps_front_right_failure, directional_headlamps_failure, directional_light_failure, door_front_left_open, door_front_left_open_high_speed, door_front_right_open, door_front_right_open_high_speed, door_rear_left_open, door_rear_left_open_high_speed, door_rear_right_open, door_rear_right_open_high_speed, dsg_failing, electric_mode_not_available, electric_trailer_brake_connection, electronic_lock_failure, engine_control_system_failure, engine_coolant_level, engine_coolant_temperature, engine_drag_torque_control_failure, engine_indicator, engine_oil, engine_oil_level, engine_oil_pressure_alert, esc_indication, esc_switched_off, esp_failure, ev_battery_cell_max_volt_warning, ev_battery_cell_min_volt_warning, ev_battery_charge_energy_storage_warning, ev_battery_high_level_warning, ev_battery_high_temperature_warning, ev_battery_insulation_resist_warning, ev_battery_jump_level_warning, ev_battery_low_level_warning, ev_battery_max_volt_veh_energy_warning, ev_battery_min_volt_veh_energy_warning, ev_battery_over_charge_warning, ev_battery_poor_cell_warning, ev_battery_temp_diff_warning, excessive_oil_temperature, fog_light_front_fault, fog_light_front_left_failure, fog_light_front_right_failure, fog_light_rear_fault, fog_light_rear_left_failure, fog_light_rear_right_failure, forward_collision_warning, front_fog_light, fuel_door_open, fuel_filter_diff_pressure, fuel_level, hatch_open, hazard_warning, headlights_left_failure, headlights_right_failure, high_beam, hill_descent_control_fault, hill_start_assist_warning, hv_interlocking_status_warning, hybrid_system_fault, hybrid_system_fault_repaired_vehicle, hydraulic_pressure_or_brake_fluid_insufficient, inspection_warning, keyfob_battery_alarm, lane_departure_fault, lane_departure_warning_off, lighting_system_failure, limited_visibility_aids_camera, low_beam, maintenance_date_exceeded, maintenance_odometer_exceeded, malfunction_indicator, motor_controller_temp_warning, oil_change_warning, other_failing_system, park_aid_malfunction, park_heating, parking_brake_control_failing, parking_space_measuring_system_failure, passive_entry_passive_start, place_gear_to_parking, position_lights, power_steering_assistance_failure, power_steering_failure, powertrain_malfunction, preheating_deactivated_battery_set_the_clock, preheating_deactivated_battery_too_low, preheating_deactivated_fuel_level_too_low, rear_fog_light, restraints_indicator_warning, retractable_roof_mechanism_fault, reverse_light_left_failure, reverse_light_right_failure, risk_of_ice, roof_operation_impossible_apply_parking_break, roof_operation_impossible_apply_start_engine, roof_operation_impossible_temperature_too_high, screen_rear_open, seat_belt, seatbelt_passenger_front_right_unbuckled, seatbelt_passenger_rear_center_unbuckled, seatbelt_passenger_rear_left_unbuckled, seatbelt_passenger_rear_right_unbuckled, service_call, shock_sensor_failing, side_lights_front_left_failure, side_lights_front_right_failure, side_lights_rear_left_failure, side_lights_rear_right_failure, spare_wheel_fitter_driving_aids_deactivated, speed_control_failure, start_stop_engine_warning, steering_failure, steering_lock_alert, stop_light_left_failure, stop_light_right_failure, suspension_failure, suspension_failure_reduce_speed, suspension_fault_limited_to_90kmh, tire_failure, tire_front_left_flat, tire_front_left_not_monitored, tire_front_right_flat, tire_front_right_not_monitored, tire_pressure_low, tire_pressure_monitor_system_warning, tire_pressure_sensor_failure, tire_rear_left_flat, tire_rear_left_not_monitored, tire_rear_right_flat, tire_rear_right_not_monitored, tire_under_inflation, tire_warning_front_left, tire_warning_front_right, tire_warning_rear_left, tire_warning_rear_right, tire_warning_system_error, traction_control_active, traction_control_disabled, traction_motor_temp_warning, trailer_connected, transmission_failure, transmission_fluid_temperature, trunk_open, trunk_open_high_speed, trunk_window_open, turn_signal_front_left_failure, turn_signal_front_right_failure, turn_signal_rear_left_failure, turn_signal_rear_right_failure, water_in_fuel, wheel_pressure_fault, windscreen_washer_fluid, worn_brake_linings]}, state: {type: string, enum: [off, on]}}
    dashboardLights.dashboardLights.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {name: {type: string, enum: [acc, active_hood_fault, active_spoiler_fault, adblue_level, adjust_tire_pressure, advanced_braking, air_filter_minder, air_suspension_ride_control_fault, airbag, all_wheel_drive_disabled, anti_lock_brake_failure, anti_pollution_failure_engine_start_impossible, anti_pollution_system_failure, anti_reverse_system_failing, anti_theft, auto_parking_brake, automatic_braking_deactive, automatic_braking_system_fault, automatic_lights_settings_failure, battery_charging_condition, battery_low_warning, battery_secondary_low, blind_spot_detection, brake_failure, brake_fluid_warning, brake_lights, charge_system_fault, check_fuel_cap, check_fuel_fill_inlet, check_fuel_filter, check_reversing_lamp, crossing_line_system_alert_failure, dc_temp_warning, dc_warning_status, diesel_engine_idle_shutdown, diesel_engine_warning, diesel_exhaust_fluid_quality, diesel_exhaust_fluid_system_fault, diesel_exhaust_over_temp, diesel_filter_regeneration, diesel_oil_filter_water_presence, diesel_particulate_filter, diesel_pre_heat, dipped_beam_headlamps_front_left_failure, dipped_beam_headlamps_front_right_failure, directional_headlamps_failure, directional_light_failure, door_front_left_open, door_front_left_open_high_speed, door_front_right_open, door_front_right_open_high_speed, door_rear_left_open, door_rear_left_open_high_speed, door_rear_right_open, door_rear_right_open_high_speed, dsg_failing, electric_mode_not_available, electric_trailer_brake_connection, electronic_lock_failure, engine_control_system_failure, engine_coolant_level, engine_coolant_temperature, engine_drag_torque_control_failure, engine_indicator, engine_oil, engine_oil_level, engine_oil_pressure_alert, esc_indication, esc_switched_off, esp_failure, ev_battery_cell_max_volt_warning, ev_battery_cell_min_volt_warning, ev_battery_charge_energy_storage_warning, ev_battery_high_level_warning, ev_battery_high_temperature_warning, ev_battery_insulation_resist_warning, ev_battery_jump_level_warning, ev_battery_low_level_warning, ev_battery_max_volt_veh_energy_warning, ev_battery_min_volt_veh_energy_warning, ev_battery_over_charge_warning, ev_battery_poor_cell_warning, ev_battery_temp_diff_warning, excessive_oil_temperature, fog_light_front_fault, fog_light_front_left_failure, fog_light_front_right_failure, fog_light_rear_fault, fog_light_rear_left_failure, fog_light_rear_right_failure, forward_collision_warning, front_fog_light, fuel_door_open, fuel_filter_diff_pressure, fuel_level, hatch_open, hazard_warning, headlights_left_failure, headlights_right_failure, high_beam, hill_descent_control_fault, hill_start_assist_warning, hv_interlocking_status_warning, hybrid_system_fault, hybrid_system_fault_repaired_vehicle, hydraulic_pressure_or_brake_fluid_insufficient, inspection_warning, keyfob_battery_alarm, lane_departure_fault, lane_departure_warning_off, lighting_system_failure, limited_visibility_aids_camera, low_beam, maintenance_date_exceeded, maintenance_odometer_exceeded, malfunction_indicator, motor_controller_temp_warning, oil_change_warning, other_failing_system, park_aid_malfunction, park_heating, parking_brake_control_failing, parking_space_measuring_system_failure, passive_entry_passive_start, place_gear_to_parking, position_lights, power_steering_assistance_failure, power_steering_failure, powertrain_malfunction, preheating_deactivated_battery_set_the_clock, preheating_deactivated_battery_too_low, preheating_deactivated_fuel_level_too_low, rear_fog_light, restraints_indicator_warning, retractable_roof_mechanism_fault, reverse_light_left_failure, reverse_light_right_failure, risk_of_ice, roof_operation_impossible_apply_parking_break, roof_operation_impossible_apply_start_engine, roof_operation_impossible_temperature_too_high, screen_rear_open, seat_belt, seatbelt_passenger_front_right_unbuckled, seatbelt_passenger_rear_center_unbuckled, seatbelt_passenger_rear_left_unbuckled, seatbelt_passenger_rear_right_unbuckled, service_call, shock_sensor_failing, side_lights_front_left_failure, side_lights_front_right_failure, side_lights_rear_left_failure, side_lights_rear_right_failure, spare_wheel_fitter_driving_aids_deactivated, speed_control_failure, start_stop_engine_warning, steering_failure, steering_lock_alert, stop_light_left_failure, stop_light_right_failure, suspension_failure, suspension_failure_reduce_speed, suspension_fault_limited_to_90kmh, tire_failure, tire_front_left_flat, tire_front_left_not_monitored, tire_front_right_flat, tire_front_right_not_monitored, tire_pressure_low, tire_pressure_monitor_system_warning, tire_pressure_sensor_failure, tire_rear_left_flat, tire_rear_left_not_monitored, tire_rear_right_flat, tire_rear_right_not_monitored, tire_under_inflation, tire_warning_front_left, tire_warning_front_right, tire_warning_rear_left, tire_warning_rear_right, tire_warning_system_error, traction_control_active, traction_control_disabled, traction_motor_temp_warning, trailer_connected, transmission_failure, transmission_fluid_temperature, trunk_open, trunk_open_high_speed, trunk_window_open, turn_signal_front_left_failure, turn_signal_front_right_failure, turn_signal_rear_left_failure, turn_signal_rear_right_failure, water_in_fuel, wheel_pressure_fault, windscreen_washer_fluid, worn_brake_linings]}, state: {type: string, enum: [off, on]}}
    dashboardLights.dynamicWarnings:
        description: 'Dynamic warnings'
        example:
            - {data: {category: {value: engine}, id: {value: abc012}, description: {value: 'Engine warning'}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {category: {value: headlights}, id: {value: foo_123}, description: {value: 'Headlights warning'}}, timestamp: '2024-07-15T12:28:16.717Z'}
        type: array
        items:
            type: object
            properties: {category: {description: 'Category of the warning', type: string}, id: {description: 'Identifier of the warning', type: string}, description: {description: 'Description of the warning', type: string}}
    dashboardLights.dynamicWarnings.availability:
        description: 'Dynamic warnings'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {category: {description: 'Category of the warning', type: string}, id: {description: 'Identifier of the warning', type: string}, description: {description: 'Description of the warning', type: string}}
    dashboardLights:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            bulbFailures: {$ref: '#/definitions/dashboardLights.bulbFailures'}
            dashboardLights: {$ref: '#/definitions/dashboardLights.dashboardLights'}
            dynamicWarnings: {$ref: '#/definitions/dashboardLights.dynamicWarnings'}
    dashboardLights.availability:
        type: object
        properties:
            bulbFailures: {$ref: '#/definitions/dashboardLights.bulbFailures.availability'}
            dashboardLights: {$ref: '#/definitions/dashboardLights.dashboardLights.availability'}
            dynamicWarnings: {$ref: '#/definitions/dashboardLights.dynamicWarnings.availability'}
    diagnostics.adBlueLevel:
        description: 'AdBlue level percentage between 0.0-1.0'
        example:
            data: {value: 0.9}
            timestamp: '2024-07-15T12:28:16.717Z'
        type: number
        format: double
    diagnostics.adBlueLevel.availability:
        description: 'AdBlue level percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.antiLockBraking:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.717Z'
        type: string
        enum:
            - active
            - inactive
    diagnostics.antiLockBraking.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    diagnostics.backupBatteryRemainingTime:
        description: 'Remaining time the backup battery can work.'
        example:
            data: {value: 15, unit: minutes}
            timestamp: '2024-07-15T12:28:16.717Z'
    diagnostics.backupBatteryRemainingTime.availability:
        description: 'Remaining time the backup battery can work.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.batteryLevel:
        description: 'Battery level in %, value between 0.0 and 1.0'
        example:
            data: {value: 0.56}
            timestamp: '2024-07-15T12:28:16.717Z'
        type: number
        format: double
    diagnostics.batteryLevel.availability:
        description: 'Battery level in %, value between 0.0 and 1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.batteryVoltage:
        description: 'Battery voltage'
        example:
            data: {value: 12.1, unit: volts}
            timestamp: '2024-07-15T12:28:16.717Z'
    diagnostics.batteryVoltage.availability:
        description: 'Battery voltage'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.brakeFluidLevel:
        example:
            data: {value: low}
            timestamp: '2024-07-15T12:28:16.717Z'
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.brakeFluidLevel.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.brakeLiningWearPreWarning:
        description: 'Status of brake lining wear pre-warning'
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.717Z'
        type: string
        enum:
            - active
            - inactive
    diagnostics.brakeLiningWearPreWarning.availability:
        description: 'Status of brake lining wear pre-warning'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    diagnostics.checkControlMessages:
        example:
            - {data: {ID: {value: 1}, remainingTime: {value: 105592, unit: minutes}, text: {value: 'Check engine'}, status: {value: Alert}}, timestamp: '2024-07-15T12:28:16.717Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Check Control Message identifier', type: number, format: integer}, remainingTime: {description: 'Remaining time of the message'}, text: {description: 'CCM text', type: string}, status: {description: 'CCM status', type: string}}
    diagnostics.checkControlMessages.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Check Control Message identifier', type: number, format: integer}, remainingTime: {description: 'Remaining time of the message'}, text: {description: 'CCM text', type: string}, status: {description: 'CCM status', type: string}}
    diagnostics.confirmedTroubleCodes:
        example:
            - {data: {ID: {value: 801C10}, ecuAddress: {value: '16'}, ecuVariantName: {value: CAS}, status: {value: ACTIVE}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {ID: {value: D52C44}, ecuAddress: {value: '48'}, ecuVariantName: {value: CAS}, status: {value: ACTIVE}}, timestamp: '2024-07-15T12:28:16.717Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: Identifier, type: string}, ecuAddress: {description: 'Electronic Control Unit address', type: string}, ecuVariantName: {description: 'Electronic Control Unit variant name', type: string}, status: {description: Status, type: string}}
    diagnostics.confirmedTroubleCodes.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {ID: {description: Identifier, type: string}, ecuAddress: {description: 'Electronic Control Unit address', type: string}, ecuVariantName: {description: 'Electronic Control Unit variant name', type: string}, status: {description: Status, type: string}}
    diagnostics.dieselExhaustFilterStatus:
        example:
            - {data: {status: {value: unknown}, component: {value: exhaust_filter}, cleaning: {value: unknown}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {status: {value: normal_operation}, component: {value: exhaust_filter}, cleaning: {value: unknown}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {status: {value: overloaded}, component: {value: exhaust_filter}, cleaning: {value: unknown}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {status: {value: at_limit}, component: {value: exhaust_filter}, cleaning: {value: unknown}}, timestamp: '2024-07-15T12:28:16.717Z'}
            - {data: {status: {value: over_limit}, component: {value: exhaust_filter}, cleaning: {value: unknown}}, timestamp: '2024-07-15T12:28:16.717Z'}
        type: array
        items:
            type: object
            properties: {status: {type: string, enum: [at_limit, normal_operation, over_limit, overloaded, unknown]}, component: {type: string, enum: [diesel_particulate_filter, exhaust_filter, off_board_regeneration, overboost_code_regulator, unknown]}, cleaning: {type: string, enum: [complete, in_progress, interrupted, unknown]}}
    diagnostics.dieselExhaustFilterStatus.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {status: {type: string, enum: [at_limit, normal_operation, over_limit, overloaded, unknown]}, component: {type: string, enum: [diesel_particulate_filter, exhaust_filter, off_board_regeneration, overboost_code_regulator, unknown]}, cleaning: {type: string, enum: [complete, in_progress, interrupted, unknown]}}
    diagnostics.dieselExhaustFluidRange:
        description: 'Distance remaining until diesel exhaust fluid is empty'
        example:
            data: {value: 2233, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.717Z'
    diagnostics.dieselExhaustFluidRange.availability:
        description: 'Distance remaining until diesel exhaust fluid is empty'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.dieselParticulateFilterSootLevel:
        description: 'Level of soot in diesel exhaust particulate filter'
        example:
            data: {value: 0.16}
            timestamp: '2024-07-15T12:28:16.717Z'
        type: number
        format: double
    diagnostics.dieselParticulateFilterSootLevel.availability:
        description: 'Level of soot in diesel exhaust particulate filter'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.distanceSinceReset:
        description: 'The distance driven since reset'
        example:
            data: {value: 1500.1, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.717Z'
    diagnostics.distanceSinceReset.availability:
        description: 'The distance driven since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.distanceSinceStart:
        description: 'The distance driven since trip start'
        example:
            data: {value: 12.4, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.distanceSinceStart.availability:
        description: 'The distance driven since trip start'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineCoolantFluidLevel:
        description: 'Engine coolant fluid level'
        example:
            data: {value: high}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.engineCoolantFluidLevel.availability:
        description: 'Engine coolant fluid level'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.engineCoolantTemperature:
        description: 'Engine coolant temperature'
        example:
            data: {value: 20, unit: celsius}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineCoolantTemperature.availability:
        description: 'Engine coolant temperature'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineLoad:
        description: 'Current engine load percentage between 0.0-1.0'
        example:
            data: {value: 0.1}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: number
        format: double
    diagnostics.engineLoad.availability:
        description: 'Current engine load percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.engineOilAmount:
        description: 'The current estimated oil tank liquid fill.'
        example:
            data: {value: 3.5, unit: liters}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineOilAmount.availability:
        description: 'The current estimated oil tank liquid fill.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineOilFluidLevel:
        description: 'Engine oil fluid level'
        example:
            data: {value: normal}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.engineOilFluidLevel.availability:
        description: 'Engine oil fluid level'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.engineOilLevel:
        description: 'The current estimated oil tank liquid fill in percentage.'
        example:
            data: {value: 0.8}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: number
        format: double
    diagnostics.engineOilLevel.availability:
        description: 'The current estimated oil tank liquid fill in percentage.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.engineOilLifeRemaining:
        description: 'Remaining life of engine oil which decreases over time'
        example:
            data: {value: 0.88}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: number
        format: double
    diagnostics.engineOilLifeRemaining.availability:
        description: 'Remaining life of engine oil which decreases over time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.engineOilPressureLevel:
        description: 'Engine oil pressure level'
        example:
            data: {value: normal}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: string
        enum:
            - high
            - low
            - low_hard
            - low_soft
            - no_sensor
            - normal
            - system_fault
    diagnostics.engineOilPressureLevel.availability:
        description: 'Engine oil pressure level'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - high
            - low
            - low_hard
            - low_soft
            - no_sensor
            - normal
            - system_fault
    diagnostics.engineOilServiceStatus:
        description: 'Engine oil service status'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: string
        enum:
            - critical
            - ok
            - warning
    diagnostics.engineOilServiceStatus.availability:
        description: 'Engine oil service status'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - critical
            - ok
            - warning
    diagnostics.engineOilTemperature:
        description: 'Engine oil temperature'
        example:
            data: {value: 99.5, unit: celsius}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineOilTemperature.availability:
        description: 'Engine oil temperature'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineRPM:
        description: 'Engine RPM (revolutions per minute)'
        example:
            data: {value: 2500, unit: revolutions_per_minute}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineRPM.availability:
        description: 'Engine RPM (revolutions per minute)'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineTimeToNextService:
        description: 'Engine time until next service of the vehicle'
        example:
            data: {value: 501, unit: hours}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineTimeToNextService.availability:
        description: 'Engine time until next service of the vehicle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineTorque:
        description: 'Current engine torque percentage between 0.0-1.0'
        example:
            data: {value: 0.2}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: number
        format: double
    diagnostics.engineTorque.availability:
        description: 'Current engine torque percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.engineTotalFuelConsumption:
        description: 'The accumulated lifespan fuel consumption'
        example:
            data: {value: 27587, unit: liters}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineTotalFuelConsumption.availability:
        description: 'The accumulated lifespan fuel consumption'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineTotalIdleOperatingTime:
        description: 'The accumulated time of engine operation'
        example:
            data: {value: 213.56, unit: hours}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineTotalIdleOperatingTime.availability:
        description: 'The accumulated time of engine operation'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.engineTotalOperatingTime:
        description: 'The accumulated time of engine operation'
        example:
            data: {value: 1500.65, unit: hours}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.engineTotalOperatingTime.availability:
        description: 'The accumulated time of engine operation'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.estimatedPrimaryPowertrainRange:
        description: 'Estimated primary powertrain range'
        example:
            data: {value: 265, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.estimatedPrimaryPowertrainRange.availability:
        description: 'Estimated primary powertrain range'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.estimatedRange:
        description: 'Estimated range (with combustion engine)'
        example:
            data: {value: 265, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.estimatedRange.availability:
        description: 'Estimated range (with combustion engine)'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.estimatedSecondaryPowertrainRange:
        description: 'Estimated secondary powertrain range'
        example:
            data: {value: 265, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.estimatedSecondaryPowertrainRange.availability:
        description: 'Estimated secondary powertrain range'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.fuelLevel:
        description: 'Fuel level percentage between 0.0-1.0'
        example:
            data: {value: 0.9}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: number
        format: double
    diagnostics.fuelLevel.availability:
        description: 'Fuel level percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    diagnostics.fuelLevelAccuracy:
        description: 'This value includes the information, if the fuel level has been calculated or measured.'
        example:
            data: {value: measured}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: string
        enum:
            - calculated
            - measured
    diagnostics.fuelLevelAccuracy.availability:
        description: 'This value includes the information, if the fuel level has been calculated or measured.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - calculated
            - measured
    diagnostics.fuelVolume:
        description: 'The fuel volume measured in liters'
        example:
            data: {value: 35.5, unit: liters}
            timestamp: '2024-07-15T12:28:16.718Z'
    diagnostics.fuelVolume.availability:
        description: 'The fuel volume measured in liters'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.lowVoltageBatteryChargeLevel:
        description: 'Indicates if the charge level of the low voltage battery is too low to use other systems'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.718Z'
        type: string
        enum:
            - deactivation_level_1
            - deactivation_level_2
            - deactivation_level_3
            - ok
    diagnostics.lowVoltageBatteryChargeLevel.availability:
        description: 'Indicates if the charge level of the low voltage battery is too low to use other systems'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - deactivation_level_1
            - deactivation_level_2
            - deactivation_level_3
            - ok
    diagnostics.odometer:
        description: 'The vehicle odometer value in a given units'
        example:
            data: {value: 2050, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.719Z'
    diagnostics.odometer.availability:
        description: 'The vehicle odometer value in a given units'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.oemTroubleCodeValues:
        description: 'Additional OEM trouble codes'
        example:
            - {data: {ID: {value: 123ID}, keyValue: {key: {value: some_error}, value: {value: some_value}}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {ID: {value: 1B3C}, keyValue: {key: {value: important_error}, value: {value: 'system fault 32'}}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Identifier for the trouble code', type: string}, keyValue: {description: 'Key-value pair for the trouble code', type: object, properties: {key: {description: 'Key for the value', type: string}, value: {description: 'Value for the key', type: string}}}}
    diagnostics.oemTroubleCodeValues.availability:
        description: 'Additional OEM trouble codes'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Identifier for the trouble code', type: string}, keyValue: {description: 'Key-value pair for the trouble code', type: object, properties: {key: {description: 'Key for the value', type: string}, value: {description: 'Value for the key', type: string}}}}
    diagnostics.passengerAirbagStatus:
        description: 'Passenger airbag is activated or not'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.719Z'
        type: string
        enum:
            - active
            - inactive
    diagnostics.passengerAirbagStatus.availability:
        description: 'Passenger airbag is activated or not'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    diagnostics.speed:
        description: 'The vehicle speed'
        example:
            data: {value: 60, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.719Z'
    diagnostics.speed.availability:
        description: 'The vehicle speed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.tirePressures:
        example:
            - {data: {location: {value: front_left}, pressure: {value: 2.31, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: front_right}, pressure: {value: 2.31, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right}, pressure: {value: 2.24, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left}, pressure: {value: 2.24, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right_outer}, pressure: {value: 2.25, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left_outer}, pressure: {value: 2.25, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: spare}, pressure: {value: 2.25, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tirePressures.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tirePressuresDifferences:
        description: 'Tire pressures difference from the target pressure.'
        example:
            - {data: {location: {value: front_left}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: front_right}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right_outer}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left_outer}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: spare}, pressure: {value: 0.1, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tirePressuresDifferences.availability:
        description: 'Tire pressures difference from the target pressure.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tirePressuresTargets:
        description: 'Target tire pressures for the vehicle.'
        example:
            - {data: {location: {value: front_left}, pressure: {value: 2.31, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: front_right}, pressure: {value: 2.31, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right}, pressure: {value: 2.24, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left}, pressure: {value: 2.24, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right_outer}, pressure: {value: 2.25, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left_outer}, pressure: {value: 2.25, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: spare}, pressure: {value: 2.25, unit: bars}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tirePressuresTargets.availability:
        description: 'Target tire pressures for the vehicle.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tirePressureStatuses:
        example:
            - {data: {location: {value: front_left}, status: {value: normal}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: front_right}, status: {value: low}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right}, status: {value: alert}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left}, status: {value: normal}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right_outer}, status: {value: normal}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left_outer}, status: {value: normal}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: spare}, status: {value: normal}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, status: {type: string, enum: [alert, deflation, low, normal, soft]}}
    diagnostics.tirePressureStatuses.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, status: {type: string, enum: [alert, deflation, low, normal, soft]}}
    diagnostics.tireTemperatures:
        example:
            - {data: {location: {value: front_left}, temperature: {value: 40.1, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: front_right}, temperature: {value: 40.2, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right}, temperature: {value: 40.3, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left}, temperature: {value: 40.4, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right_outer}, temperature: {value: 40.5, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left_outer}, temperature: {value: 40.6, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: spare}, temperature: {value: 10.2, unit: celsius}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, temperature: {description: 'Tire temperature'}}
    diagnostics.tireTemperatures.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, temperature: {description: 'Tire temperature'}}
    diagnostics.troubleCodes:
        example:
            - {data: {occurrences: {value: 2}, ID: {value: C1116FA}, ecuID: {value: RDU_212FR}, status: {value: PENDING}, system: {value: unknown}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {occurrences: {value: 2}, ID: {value: C163AFA}, ecuID: {value: DTR212}, status: {value: PENDING}, system: {value: body}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {occurrences: {description: 'Number of occurrences', type: number, format: integer}, ID: {description: Identifier, type: string}, ecuID: {description: 'Electronic Control Unit identifier', type: string}, status: {description: Status, type: string}, system: {type: string, enum: [body, chassis, network, powertrain, unknown]}}
    diagnostics.troubleCodes.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {occurrences: {description: 'Number of occurrences', type: number, format: integer}, ID: {description: Identifier, type: string}, ecuID: {description: 'Electronic Control Unit identifier', type: string}, status: {description: Status, type: string}, system: {type: string, enum: [body, chassis, network, powertrain, unknown]}}
    diagnostics.washerFluidLevel:
        example:
            data: {value: filled}
            timestamp: '2024-07-15T12:28:16.719Z'
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.washerFluidLevel.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - filled
            - high
            - low
            - normal
            - very_high
            - very_low
    diagnostics.wheelBasedSpeed:
        description: 'The vehicle speed measured at the wheel base'
        example:
            data: {value: 65, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.719Z'
    diagnostics.wheelBasedSpeed.availability:
        description: 'The vehicle speed measured at the wheel base'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    diagnostics.wheelRPMs:
        example:
            - {data: {location: {value: front_left}, RPM: {value: 737, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: front_right}, RPM: {value: 747, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right}, RPM: {value: 777, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left}, RPM: {value: 787, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_right_outer}, RPM: {value: 797, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: rear_left_outer}, RPM: {value: 807, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
            - {data: {location: {value: spare}, RPM: {value: 0, unit: revolutions_per_minute}}, timestamp: '2024-07-15T12:28:16.719Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Wheel location', type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, RPM: {description: 'The RPM measured at this wheel'}}
    diagnostics.wheelRPMs.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {description: 'Wheel location', type: string, enum: [front_left, front_right, rear_left, rear_left_outer, rear_right, rear_right_outer, spare]}, RPM: {description: 'The RPM measured at this wheel'}}
    diagnostics:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            adBlueLevel: {$ref: '#/definitions/diagnostics.adBlueLevel'}
            antiLockBraking: {$ref: '#/definitions/diagnostics.antiLockBraking'}
            backupBatteryRemainingTime: {$ref: '#/definitions/diagnostics.backupBatteryRemainingTime'}
            batteryLevel: {$ref: '#/definitions/diagnostics.batteryLevel'}
            batteryVoltage: {$ref: '#/definitions/diagnostics.batteryVoltage'}
            brakeFluidLevel: {$ref: '#/definitions/diagnostics.brakeFluidLevel'}
            brakeLiningWearPreWarning: {$ref: '#/definitions/diagnostics.brakeLiningWearPreWarning'}
            checkControlMessages: {$ref: '#/definitions/diagnostics.checkControlMessages'}
            confirmedTroubleCodes: {$ref: '#/definitions/diagnostics.confirmedTroubleCodes'}
            dieselExhaustFilterStatus: {$ref: '#/definitions/diagnostics.dieselExhaustFilterStatus'}
            dieselExhaustFluidRange: {$ref: '#/definitions/diagnostics.dieselExhaustFluidRange'}
            dieselParticulateFilterSootLevel: {$ref: '#/definitions/diagnostics.dieselParticulateFilterSootLevel'}
            distanceSinceReset: {$ref: '#/definitions/diagnostics.distanceSinceReset'}
            distanceSinceStart: {$ref: '#/definitions/diagnostics.distanceSinceStart'}
            engineCoolantFluidLevel: {$ref: '#/definitions/diagnostics.engineCoolantFluidLevel'}
            engineCoolantTemperature: {$ref: '#/definitions/diagnostics.engineCoolantTemperature'}
            engineLoad: {$ref: '#/definitions/diagnostics.engineLoad'}
            engineOilAmount: {$ref: '#/definitions/diagnostics.engineOilAmount'}
            engineOilFluidLevel: {$ref: '#/definitions/diagnostics.engineOilFluidLevel'}
            engineOilLevel: {$ref: '#/definitions/diagnostics.engineOilLevel'}
            engineOilLifeRemaining: {$ref: '#/definitions/diagnostics.engineOilLifeRemaining'}
            engineOilPressureLevel: {$ref: '#/definitions/diagnostics.engineOilPressureLevel'}
            engineOilServiceStatus: {$ref: '#/definitions/diagnostics.engineOilServiceStatus'}
            engineOilTemperature: {$ref: '#/definitions/diagnostics.engineOilTemperature'}
            engineRPM: {$ref: '#/definitions/diagnostics.engineRPM'}
            engineTimeToNextService: {$ref: '#/definitions/diagnostics.engineTimeToNextService'}
            engineTorque: {$ref: '#/definitions/diagnostics.engineTorque'}
            engineTotalFuelConsumption: {$ref: '#/definitions/diagnostics.engineTotalFuelConsumption'}
            engineTotalIdleOperatingTime: {$ref: '#/definitions/diagnostics.engineTotalIdleOperatingTime'}
            engineTotalOperatingTime: {$ref: '#/definitions/diagnostics.engineTotalOperatingTime'}
            estimatedPrimaryPowertrainRange: {$ref: '#/definitions/diagnostics.estimatedPrimaryPowertrainRange'}
            estimatedRange: {$ref: '#/definitions/diagnostics.estimatedRange'}
            estimatedSecondaryPowertrainRange: {$ref: '#/definitions/diagnostics.estimatedSecondaryPowertrainRange'}
            fuelLevel: {$ref: '#/definitions/diagnostics.fuelLevel'}
            fuelLevelAccuracy: {$ref: '#/definitions/diagnostics.fuelLevelAccuracy'}
            fuelVolume: {$ref: '#/definitions/diagnostics.fuelVolume'}
            lowVoltageBatteryChargeLevel: {$ref: '#/definitions/diagnostics.lowVoltageBatteryChargeLevel'}
            odometer: {$ref: '#/definitions/diagnostics.odometer'}
            oemTroubleCodeValues: {$ref: '#/definitions/diagnostics.oemTroubleCodeValues'}
            passengerAirbagStatus: {$ref: '#/definitions/diagnostics.passengerAirbagStatus'}
            speed: {$ref: '#/definitions/diagnostics.speed'}
            tirePressures: {$ref: '#/definitions/diagnostics.tirePressures'}
            tirePressuresDifferences: {$ref: '#/definitions/diagnostics.tirePressuresDifferences'}
            tirePressuresTargets: {$ref: '#/definitions/diagnostics.tirePressuresTargets'}
            tirePressureStatuses: {$ref: '#/definitions/diagnostics.tirePressureStatuses'}
            tireTemperatures: {$ref: '#/definitions/diagnostics.tireTemperatures'}
            troubleCodes: {$ref: '#/definitions/diagnostics.troubleCodes'}
            washerFluidLevel: {$ref: '#/definitions/diagnostics.washerFluidLevel'}
            wheelBasedSpeed: {$ref: '#/definitions/diagnostics.wheelBasedSpeed'}
            wheelRPMs: {$ref: '#/definitions/diagnostics.wheelRPMs'}
    diagnostics.availability:
        type: object
        properties:
            adBlueLevel: {$ref: '#/definitions/diagnostics.adBlueLevel.availability'}
            antiLockBraking: {$ref: '#/definitions/diagnostics.antiLockBraking.availability'}
            backupBatteryRemainingTime: {$ref: '#/definitions/diagnostics.backupBatteryRemainingTime.availability'}
            batteryLevel: {$ref: '#/definitions/diagnostics.batteryLevel.availability'}
            batteryVoltage: {$ref: '#/definitions/diagnostics.batteryVoltage.availability'}
            brakeFluidLevel: {$ref: '#/definitions/diagnostics.brakeFluidLevel.availability'}
            brakeLiningWearPreWarning: {$ref: '#/definitions/diagnostics.brakeLiningWearPreWarning.availability'}
            checkControlMessages: {$ref: '#/definitions/diagnostics.checkControlMessages.availability'}
            confirmedTroubleCodes: {$ref: '#/definitions/diagnostics.confirmedTroubleCodes.availability'}
            dieselExhaustFilterStatus: {$ref: '#/definitions/diagnostics.dieselExhaustFilterStatus.availability'}
            dieselExhaustFluidRange: {$ref: '#/definitions/diagnostics.dieselExhaustFluidRange.availability'}
            dieselParticulateFilterSootLevel: {$ref: '#/definitions/diagnostics.dieselParticulateFilterSootLevel.availability'}
            distanceSinceReset: {$ref: '#/definitions/diagnostics.distanceSinceReset.availability'}
            distanceSinceStart: {$ref: '#/definitions/diagnostics.distanceSinceStart.availability'}
            engineCoolantFluidLevel: {$ref: '#/definitions/diagnostics.engineCoolantFluidLevel.availability'}
            engineCoolantTemperature: {$ref: '#/definitions/diagnostics.engineCoolantTemperature.availability'}
            engineLoad: {$ref: '#/definitions/diagnostics.engineLoad.availability'}
            engineOilAmount: {$ref: '#/definitions/diagnostics.engineOilAmount.availability'}
            engineOilFluidLevel: {$ref: '#/definitions/diagnostics.engineOilFluidLevel.availability'}
            engineOilLevel: {$ref: '#/definitions/diagnostics.engineOilLevel.availability'}
            engineOilLifeRemaining: {$ref: '#/definitions/diagnostics.engineOilLifeRemaining.availability'}
            engineOilPressureLevel: {$ref: '#/definitions/diagnostics.engineOilPressureLevel.availability'}
            engineOilServiceStatus: {$ref: '#/definitions/diagnostics.engineOilServiceStatus.availability'}
            engineOilTemperature: {$ref: '#/definitions/diagnostics.engineOilTemperature.availability'}
            engineRPM: {$ref: '#/definitions/diagnostics.engineRPM.availability'}
            engineTimeToNextService: {$ref: '#/definitions/diagnostics.engineTimeToNextService.availability'}
            engineTorque: {$ref: '#/definitions/diagnostics.engineTorque.availability'}
            engineTotalFuelConsumption: {$ref: '#/definitions/diagnostics.engineTotalFuelConsumption.availability'}
            engineTotalIdleOperatingTime: {$ref: '#/definitions/diagnostics.engineTotalIdleOperatingTime.availability'}
            engineTotalOperatingTime: {$ref: '#/definitions/diagnostics.engineTotalOperatingTime.availability'}
            estimatedPrimaryPowertrainRange: {$ref: '#/definitions/diagnostics.estimatedPrimaryPowertrainRange.availability'}
            estimatedRange: {$ref: '#/definitions/diagnostics.estimatedRange.availability'}
            estimatedSecondaryPowertrainRange: {$ref: '#/definitions/diagnostics.estimatedSecondaryPowertrainRange.availability'}
            fuelLevel: {$ref: '#/definitions/diagnostics.fuelLevel.availability'}
            fuelLevelAccuracy: {$ref: '#/definitions/diagnostics.fuelLevelAccuracy.availability'}
            fuelVolume: {$ref: '#/definitions/diagnostics.fuelVolume.availability'}
            lowVoltageBatteryChargeLevel: {$ref: '#/definitions/diagnostics.lowVoltageBatteryChargeLevel.availability'}
            odometer: {$ref: '#/definitions/diagnostics.odometer.availability'}
            oemTroubleCodeValues: {$ref: '#/definitions/diagnostics.oemTroubleCodeValues.availability'}
            passengerAirbagStatus: {$ref: '#/definitions/diagnostics.passengerAirbagStatus.availability'}
            speed: {$ref: '#/definitions/diagnostics.speed.availability'}
            tirePressures: {$ref: '#/definitions/diagnostics.tirePressures.availability'}
            tirePressuresDifferences: {$ref: '#/definitions/diagnostics.tirePressuresDifferences.availability'}
            tirePressuresTargets: {$ref: '#/definitions/diagnostics.tirePressuresTargets.availability'}
            tirePressureStatuses: {$ref: '#/definitions/diagnostics.tirePressureStatuses.availability'}
            tireTemperatures: {$ref: '#/definitions/diagnostics.tireTemperatures.availability'}
            troubleCodes: {$ref: '#/definitions/diagnostics.troubleCodes.availability'}
            washerFluidLevel: {$ref: '#/definitions/diagnostics.washerFluidLevel.availability'}
            wheelBasedSpeed: {$ref: '#/definitions/diagnostics.wheelBasedSpeed.availability'}
            wheelRPMs: {$ref: '#/definitions/diagnostics.wheelRPMs.availability'}
    doors.insideLocks:
        description: 'Inside lock states for the given doors'
        example:
            - {data: {location: {value: front_left}, lockState: {value: locked}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: front_right}, lockState: {value: unlocked}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: rear_right}, lockState: {value: unlocked}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: rear_left}, lockState: {value: unlocked}}, timestamp: '2024-07-15T12:28:16.720Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_left, rear_right]}, lockState: {description: 'Lock state for the door', type: string, enum: [locked, unlocked]}}
    doors.insideLocks.availability:
        description: 'Inside lock states for the given doors'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_left, rear_right]}, lockState: {description: 'Lock state for the door', type: string, enum: [locked, unlocked]}}
    doors.insideLocksState:
        description: 'Inside locks state for the whole vehicle (combines all specific lock states if available)'
        example:
            data: {value: locked}
            timestamp: '2024-07-15T12:28:16.720Z'
        type: string
        enum:
            - locked
            - unlocked
    doors.insideLocksState.availability:
        description: 'Inside locks state for the whole vehicle (combines all specific lock states if available)'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    doors.locks:
        description: 'Lock states for the given doors'
        example:
            - {data: {location: {value: front_left}, lockState: {value: unlocked}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: front_right}, lockState: {value: unlocked}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: rear_right}, lockState: {value: locked}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: rear_left}, lockState: {value: locked}}, timestamp: '2024-07-15T12:28:16.720Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_left, rear_right]}, lockState: {description: 'Lock state for the door', type: string, enum: [locked, unlocked]}}
    doors.locks.availability:
        description: 'Lock states for the given doors'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_left, rear_right]}, lockState: {description: 'Lock state for the door', type: string, enum: [locked, unlocked]}}
    doors.locksState:
        description: 'Locks state for the whole vehicle (combines all specific lock states if available)'
        example:
            data: {value: unlocked}
            timestamp: '2024-07-15T12:28:16.720Z'
        type: string
        enum:
            - locked
            - unlocked
    doors.locksState.availability:
        description: 'Locks state for the whole vehicle (combines all specific lock states if available)'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    doors.positions:
        description: 'Door positions for the given doors'
        example:
            - {data: {location: {value: front_left}, position: {value: open}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: front_right}, position: {value: closed}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: rear_right}, position: {value: closed}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: rear_left}, position: {value: closed}}, timestamp: '2024-07-15T12:28:16.720Z'}
            - {data: {location: {value: all}, position: {value: closed}}, timestamp: '2024-07-15T12:28:16.720Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [all, front_left, front_right, rear_left, rear_right]}, position: {type: string, enum: [closed, open]}}
    doors.positions.availability:
        description: 'Door positions for the given doors'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [all, front_left, front_right, rear_left, rear_right]}, position: {type: string, enum: [closed, open]}}
    doors:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            insideLocks: {$ref: '#/definitions/doors.insideLocks'}
            insideLocksState: {$ref: '#/definitions/doors.insideLocksState'}
            locks: {$ref: '#/definitions/doors.locks'}
            locksState: {$ref: '#/definitions/doors.locksState'}
            positions: {$ref: '#/definitions/doors.positions'}
    doors.availability:
        type: object
        properties:
            insideLocks: {$ref: '#/definitions/doors.insideLocks.availability'}
            insideLocksState: {$ref: '#/definitions/doors.insideLocksState.availability'}
            locks: {$ref: '#/definitions/doors.locks.availability'}
            locksState: {$ref: '#/definitions/doors.locksState.availability'}
            positions: {$ref: '#/definitions/doors.positions.availability'}
    driverFatigue.detectedFatigueLevel:
        example:
            data: {value: pause_recommended}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - action_needed
            - car_ready_to_take_over
            - light
            - pause_recommended
    driverFatigue.detectedFatigueLevel.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - action_needed
            - car_ready_to_take_over
            - light
            - pause_recommended
    driverFatigue:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            detectedFatigueLevel: {$ref: '#/definitions/driverFatigue.detectedFatigueLevel'}
    driverFatigue.availability:
        type: object
        properties:
            detectedFatigueLevel: {$ref: '#/definitions/driverFatigue.detectedFatigueLevel.availability'}
    engine.limpMode:
        description: 'Indicates wheter the engine is in fail-safe mode.'
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - active
            - inactive
    engine.limpMode.availability:
        description: 'Indicates wheter the engine is in fail-safe mode.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    engine.preconditioningActive:
        description: 'Pre-conditioning is running.'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - active
            - inactive
    engine.preconditioningActive.availability:
        description: 'Pre-conditioning is running.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    engine.preconditioningEnabled:
        description: 'Use of the engine pre-conditioning is enabled.'
        example:
            data: {value: enabled}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - disabled
            - enabled
    engine.preconditioningEnabled.availability:
        description: 'Use of the engine pre-conditioning is enabled.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disabled
            - enabled
    engine.preconditioningError:
        description: 'Reason for not carrying out pre-conditioning.'
        example:
            data: {value: low_fuel}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - component_failure
            - heater_failure
            - low_battery
            - low_fuel
            - ok
            - open_or_unlocked
            - quota_exceeded
    engine.preconditioningError.availability:
        description: 'Reason for not carrying out pre-conditioning.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - component_failure
            - heater_failure
            - low_battery
            - low_fuel
            - ok
            - open_or_unlocked
            - quota_exceeded
    engine.preconditioningRemainingTime:
        description: 'Remaining time of pre-conditioning.'
        example:
            data: {value: 15.5, unit: minutes}
            timestamp: '2024-07-15T12:28:16.721Z'
    engine.preconditioningRemainingTime.availability:
        description: 'Remaining time of pre-conditioning.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    engine.preconditioningStatus:
        description: 'Status of the pre-conditioning system.'
        example:
            data: {value: standby}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - cooling
            - heating
            - inactive
            - standby
            - ventilation
    engine.preconditioningStatus.availability:
        description: 'Status of the pre-conditioning system.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - cooling
            - heating
            - inactive
            - standby
            - ventilation
    engine.startStopEnabled:
        description: 'Indicates if the automatic start-stop system is enabled or not'
        example:
            data: {value: enabled}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - disabled
            - enabled
    engine.startStopEnabled.availability:
        description: 'Indicates if the automatic start-stop system is enabled or not'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disabled
            - enabled
    engine.startStopState:
        description: 'Indicates wheter the start-stop system is currently active or not'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - active
            - inactive
    engine.startStopState.availability:
        description: 'Indicates wheter the start-stop system is currently active or not'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    engine.status:
        example:
            data: {value: off}
            timestamp: '2024-07-15T12:28:16.721Z'
        type: string
        enum:
            - off
            - on
    engine.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - off
            - on
    engine:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            limpMode: {$ref: '#/definitions/engine.limpMode'}
            preconditioningActive: {$ref: '#/definitions/engine.preconditioningActive'}
            preconditioningEnabled: {$ref: '#/definitions/engine.preconditioningEnabled'}
            preconditioningError: {$ref: '#/definitions/engine.preconditioningError'}
            preconditioningRemainingTime: {$ref: '#/definitions/engine.preconditioningRemainingTime'}
            preconditioningStatus: {$ref: '#/definitions/engine.preconditioningStatus'}
            startStopEnabled: {$ref: '#/definitions/engine.startStopEnabled'}
            startStopState: {$ref: '#/definitions/engine.startStopState'}
            status: {$ref: '#/definitions/engine.status'}
    engine.availability:
        type: object
        properties:
            limpMode: {$ref: '#/definitions/engine.limpMode.availability'}
            preconditioningActive: {$ref: '#/definitions/engine.preconditioningActive.availability'}
            preconditioningEnabled: {$ref: '#/definitions/engine.preconditioningEnabled.availability'}
            preconditioningError: {$ref: '#/definitions/engine.preconditioningError.availability'}
            preconditioningRemainingTime: {$ref: '#/definitions/engine.preconditioningRemainingTime.availability'}
            preconditioningStatus: {$ref: '#/definitions/engine.preconditioningStatus.availability'}
            startStopEnabled: {$ref: '#/definitions/engine.startStopEnabled.availability'}
            startStopState: {$ref: '#/definitions/engine.startStopState.availability'}
            status: {$ref: '#/definitions/engine.status.availability'}
    failureMessage.failedMessageID:
        description: 'Capability identifier of the failed message'
        example:
            data: {value: 33}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: number
        format: integer
    failureMessage.failedMessageType:
        description: 'Message type of the failed message'
        example:
            data: {value: 1}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: number
        format: integer
    failureMessage.failedPropertyIDs:
        description: 'Array of failed property identifiers'
        example:
            data: [1, 2]
            timestamp: '2024-07-15T12:28:16.722Z'
        type: array
        items:
            type: number
            format: integer
    failureMessage.failureDescription:
        description: 'Failure description'
        example:
            data: {value: 'Try again'}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: string
    failureMessage.failureReason:
        example:
            data: {value: unauthorised}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: string
        enum:
            - execution_timeout
            - incorrect_state
            - invalid_command
            - oem_error
            - pending
            - privacy_mode_active
            - rate_limit
            - unauthorised
            - unsupported_capability
            - vehicle_asleep
    failureMessage:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            failedMessageID: {$ref: '#/definitions/failureMessage.failedMessageID'}
            failedMessageType: {$ref: '#/definitions/failureMessage.failedMessageType'}
            failedPropertyIDs: {$ref: '#/definitions/failureMessage.failedPropertyIDs'}
            failureDescription: {$ref: '#/definitions/failureMessage.failureDescription'}
            failureReason: {$ref: '#/definitions/failureMessage.failureReason'}
    failureMessage.availability:
        type: object
        properties:
            failedMessageID: {$ref: '#/definitions/failureMessage.failedMessageID.availability'}
            failedMessageType: {$ref: '#/definitions/failureMessage.failedMessageType.availability'}
            failedPropertyIDs: {$ref: '#/definitions/failureMessage.failedPropertyIDs.availability'}
            failureDescription: {$ref: '#/definitions/failureMessage.failureDescription.availability'}
            failureReason: {$ref: '#/definitions/failureMessage.failureReason.availability'}
    firmwareVersion.applicationVersion:
        description: 'Application version'
        example:
            data: {value: v1.5-prod}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: string
    firmwareVersion.hmKitBuildName:
        description: 'HMKit version build name'
        example:
            data: {value: btstack-uart}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: string
    firmwareVersion.hmKitVersion:
        description: 'HMKit version'
        example:
            data: {major: {value: 1}, minor: {value: 15}, patch: {value: 33}}
            timestamp: '2024-07-15T12:28:16.722Z'
        type: object
        properties:
            major: {description: 'HMKit version major number', type: number, format: integer}
            minor: {description: 'HMKit version minor number', type: number, format: integer}
            patch: {description: 'HMKit version patch number', type: number, format: integer}
    firmwareVersion:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            applicationVersion: {$ref: '#/definitions/firmwareVersion.applicationVersion'}
            hmKitBuildName: {$ref: '#/definitions/firmwareVersion.hmKitBuildName'}
            hmKitVersion: {$ref: '#/definitions/firmwareVersion.hmKitVersion'}
    firmwareVersion.availability:
        type: object
        properties:
            applicationVersion: {$ref: '#/definitions/firmwareVersion.applicationVersion.availability'}
            hmKitBuildName: {$ref: '#/definitions/firmwareVersion.hmKitBuildName.availability'}
            hmKitVersion: {$ref: '#/definitions/firmwareVersion.hmKitVersion.availability'}
    fueling.gasFlapLock:
        example:
            data: {value: locked}
            timestamp: '2024-07-15T12:28:16.723Z'
        type: string
        enum:
            - locked
            - unlocked
    fueling.gasFlapLock.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    fueling.gasFlapPosition:
        example:
            data: {value: closed}
            timestamp: '2024-07-15T12:28:16.723Z'
        type: string
        enum:
            - closed
            - open
    fueling.gasFlapPosition.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - open
    fueling:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            gasFlapLock: {$ref: '#/definitions/fueling.gasFlapLock'}
            gasFlapPosition: {$ref: '#/definitions/fueling.gasFlapPosition'}
    fueling.availability:
        type: object
        properties:
            gasFlapLock: {$ref: '#/definitions/fueling.gasFlapLock.availability'}
            gasFlapPosition: {$ref: '#/definitions/fueling.gasFlapPosition.availability'}
    graphics.imageURL:
        description: 'The image URL'
        example:
            data: {value: 'https://about.high-mobility.com/assets/images/hm-logo.svg'}
            timestamp: '2024-07-15T12:28:16.723Z'
        type: string
    graphics.imageURL.availability:
        description: 'The image URL'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    heartRate.heartRate:
        example:
            data: {value: 64, unit: times_per_minute}
            timestamp: '2024-07-15T12:28:16.723Z'
    heartRate.heartRate.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    historical.capabilityID:
        description: 'The identifier of the Capability'
        example:
            data: {value: 96}
            timestamp: '2024-07-15T12:28:16.723Z'
        type: number
        format: integer
    historical.endDate:
        description: 'End date for historical data query'
        example:
            data: {value: '2019-09-27T08:42:30.000Z'}
            timestamp: '2024-07-15T12:28:16.723Z'
        type: string
        format: date-time
    historical.startDate:
        description: 'Start date for historical data query'
        example:
            data: {value: '2019-10-07T13:04:32.000Z'}
            timestamp: '2024-07-15T12:28:16.723Z'
        type: string
        format: date-time
    historical.states:
        description: 'The bytes of a Capability state'
        example:
            - {data: {doors: {locksState: {data: {value: unlocked}}, positions: [{data: {location: {value: front_left}, position: {value: open}}}, {data: {location: {value: rear_right}, position: {value: open}}}], timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2024-07-15T12:28:16.723Z'}
            - {data: {charging: {chargePortState: {data: {value: open}}, chargeMode: {data: {value: immediate}}, chargingRate: {data: {value: 35, unit: kilowatts}}, maxRange: {data: {value: 555, unit: kilometers}}, timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2024-07-15T12:28:16.723Z'}
        type: array
        items:
            type: capability_state
    historical:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            states: {$ref: '#/definitions/historical.states'}
    historical.availability:
        type: object
        properties:
            states: {$ref: '#/definitions/historical.states.availability'}
    homeCharger.authenticationMechanism:
        example:
            data: {value: app}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - app
            - pin
    homeCharger.authenticationMechanism.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - app
            - pin
    homeCharger.authenticationState:
        example:
            data: {value: authenticated}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - authenticated
            - unauthenticated
    homeCharger.authenticationState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - authenticated
            - unauthenticated
    homeCharger.chargeCurrent:
        description: 'The charge current'
        example:
            data: {value: 0.5, unit: amperes}
            timestamp: '2024-07-15T12:28:16.724Z'
    homeCharger.chargeCurrent.availability:
        description: 'The charge current'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    homeCharger.chargingPower:
        description: 'Charging power output from the charger'
        example:
            data: {value: 350, unit: kilowatts}
            timestamp: '2024-07-15T12:28:16.724Z'
    homeCharger.chargingPower.availability:
        description: 'Charging power output from the charger'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    homeCharger.chargingStatus:
        example:
            data: {value: charging}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - charging
            - disconnected
            - plugged_in
    homeCharger.chargingStatus.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - charging
            - disconnected
            - plugged_in
    homeCharger.coordinates:
        example:
            data: {latitude: {value: 52.520008}, longitude: {value: 13.404954}}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    homeCharger.coordinates.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    homeCharger.maximumChargeCurrent:
        description: 'The maximum possible charge current'
        example:
            data: {value: 1, unit: amperes}
            timestamp: '2024-07-15T12:28:16.724Z'
    homeCharger.maximumChargeCurrent.availability:
        description: 'The maximum possible charge current'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    homeCharger.minimumChargeCurrent:
        description: 'The minimal possible charge current'
        example:
            data: {value: 0.1, unit: amperes}
            timestamp: '2024-07-15T12:28:16.724Z'
    homeCharger.minimumChargeCurrent.availability:
        description: 'The minimal possible charge current'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    homeCharger.plugType:
        example:
            data: {value: type_2}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - ccs
            - chademo
            - type_1
            - type_2
    homeCharger.plugType.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - ccs
            - chademo
            - type_1
            - type_2
    homeCharger.priceTariffs:
        example:
            - {data: {pricingType: {value: starting_fee}, price: {value: 4.5}, currency: {value: EUR}}, timestamp: '2024-07-15T12:28:16.724Z'}
            - {data: {pricingType: {value: per_minute}, price: {value: 0.3}, currency: {value: EUR}}, timestamp: '2024-07-15T12:28:16.724Z'}
            - {data: {pricingType: {value: per_kwh}, price: {value: 0.3}, currency: {value: Ripple}}, timestamp: '2024-07-15T12:28:16.724Z'}
        type: array
        items:
            type: object
            properties: {pricingType: {type: string, enum: [per_kwh, per_minute, starting_fee]}, price: {description: 'The price', type: number, format: double}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}
    homeCharger.priceTariffs.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {pricingType: {type: string, enum: [per_kwh, per_minute, starting_fee]}, price: {description: 'The price', type: number, format: double}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}
    homeCharger.solarCharging:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - active
            - inactive
    homeCharger.solarCharging.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    homeCharger.wifiHotspotEnabled:
        example:
            data: {value: enabled}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - disabled
            - enabled
    homeCharger.wifiHotspotEnabled.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disabled
            - enabled
    homeCharger.wiFiHotspotPassword:
        description: 'The Wi-Fi Hotspot password'
        example:
            data: {value: ZW3vARNUBe}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
    homeCharger.wiFiHotspotPassword.availability:
        description: 'The Wi-Fi Hotspot password'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    homeCharger.wiFiHotspotSecurity:
        example:
            data: {value: wpa2_personal}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    homeCharger.wiFiHotspotSecurity.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    homeCharger.wifiHotspotSSID:
        description: 'The Wi-Fi Hotspot SSID'
        example:
            data: {value: 'Charger 7612'}
            timestamp: '2024-07-15T12:28:16.724Z'
        type: string
    homeCharger.wifiHotspotSSID.availability:
        description: 'The Wi-Fi Hotspot SSID'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    homeCharger:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            authenticationMechanism: {$ref: '#/definitions/homeCharger.authenticationMechanism'}
            authenticationState: {$ref: '#/definitions/homeCharger.authenticationState'}
            chargeCurrent: {$ref: '#/definitions/homeCharger.chargeCurrent'}
            chargingPower: {$ref: '#/definitions/homeCharger.chargingPower'}
            chargingStatus: {$ref: '#/definitions/homeCharger.chargingStatus'}
            coordinates: {$ref: '#/definitions/homeCharger.coordinates'}
            maximumChargeCurrent: {$ref: '#/definitions/homeCharger.maximumChargeCurrent'}
            minimumChargeCurrent: {$ref: '#/definitions/homeCharger.minimumChargeCurrent'}
            plugType: {$ref: '#/definitions/homeCharger.plugType'}
            priceTariffs: {$ref: '#/definitions/homeCharger.priceTariffs'}
            solarCharging: {$ref: '#/definitions/homeCharger.solarCharging'}
            wifiHotspotEnabled: {$ref: '#/definitions/homeCharger.wifiHotspotEnabled'}
            wiFiHotspotPassword: {$ref: '#/definitions/homeCharger.wiFiHotspotPassword'}
            wiFiHotspotSecurity: {$ref: '#/definitions/homeCharger.wiFiHotspotSecurity'}
            wifiHotspotSSID: {$ref: '#/definitions/homeCharger.wifiHotspotSSID'}
    homeCharger.availability:
        type: object
        properties:
            authenticationMechanism: {$ref: '#/definitions/homeCharger.authenticationMechanism.availability'}
            authenticationState: {$ref: '#/definitions/homeCharger.authenticationState.availability'}
            chargeCurrent: {$ref: '#/definitions/homeCharger.chargeCurrent.availability'}
            chargingPower: {$ref: '#/definitions/homeCharger.chargingPower.availability'}
            chargingStatus: {$ref: '#/definitions/homeCharger.chargingStatus.availability'}
            coordinates: {$ref: '#/definitions/homeCharger.coordinates.availability'}
            maximumChargeCurrent: {$ref: '#/definitions/homeCharger.maximumChargeCurrent.availability'}
            minimumChargeCurrent: {$ref: '#/definitions/homeCharger.minimumChargeCurrent.availability'}
            plugType: {$ref: '#/definitions/homeCharger.plugType.availability'}
            priceTariffs: {$ref: '#/definitions/homeCharger.priceTariffs.availability'}
            solarCharging: {$ref: '#/definitions/homeCharger.solarCharging.availability'}
            wifiHotspotEnabled: {$ref: '#/definitions/homeCharger.wifiHotspotEnabled.availability'}
            wiFiHotspotPassword: {$ref: '#/definitions/homeCharger.wiFiHotspotPassword.availability'}
            wiFiHotspotSecurity: {$ref: '#/definitions/homeCharger.wiFiHotspotSecurity.availability'}
            wifiHotspotSSID: {$ref: '#/definitions/homeCharger.wifiHotspotSSID.availability'}
    honkHornFlashLights.emergencyFlashersState:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - active
            - inactive
    honkHornFlashLights.emergencyFlashersState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    honkHornFlashLights.flashers:
        example:
            data: {value: left_flasher_active}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - emergency_flasher_active
            - inactive
            - left_flasher_active
            - right_flasher_active
    honkHornFlashLights.flashers.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - emergency_flasher_active
            - inactive
            - left_flasher_active
            - right_flasher_active
    honkHornFlashLights.flashTimes:
        description: 'Number of times to flash the lights'
        example:
            data: {value: 5}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: number
        format: integer
    honkHornFlashLights.flashTimes.availability:
        description: 'Number of times to flash the lights'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    honkHornFlashLights.honkTime:
        description: 'Time to honk the horn'
        example:
            data: {value: 2, unit: seconds}
            timestamp: '2024-07-15T12:28:16.725Z'
    honkHornFlashLights.honkTime.availability:
        description: 'Time to honk the horn'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    honkHornFlashLights:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            flashers: {$ref: '#/definitions/honkHornFlashLights.flashers'}
    honkHornFlashLights.availability:
        type: object
        properties:
            flashers: {$ref: '#/definitions/honkHornFlashLights.flashers.availability'}
    hood.lock:
        description: 'Includes the lock state of the hood.'
        example:
            data: {value: locked}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - locked
            - unlocked
    hood.lock.availability:
        description: 'Includes the lock state of the hood.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    hood.lockSafety:
        description: 'Indicates the safe-state of the hood.'
        example:
            data: {value: safe}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - safe
            - unsafe
    hood.lockSafety.availability:
        description: 'Indicates the safe-state of the hood.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - safe
            - unsafe
    hood.position:
        example:
            data: {value: open}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - closed
            - intermediate
            - open
    hood.position.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - intermediate
            - open
    hood:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            lock: {$ref: '#/definitions/hood.lock'}
            lockSafety: {$ref: '#/definitions/hood.lockSafety'}
            position: {$ref: '#/definitions/hood.position'}
    hood.availability:
        type: object
        properties:
            lock: {$ref: '#/definitions/hood.lock.availability'}
            lockSafety: {$ref: '#/definitions/hood.lockSafety.availability'}
            position: {$ref: '#/definitions/hood.position.availability'}
    ignition.state:
        example:
            data: {value: accessory}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - accessory
            - lock
            - off
            - on
            - start
    ignition.state.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - accessory
            - lock
            - off
            - on
            - start
    ignition:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            state: {$ref: '#/definitions/ignition.state'}
    ignition.availability:
        type: object
        properties:
            state: {$ref: '#/definitions/ignition.state.availability'}
    keyfobPosition.location:
        example:
            data: {value: inside_car}
            timestamp: '2024-07-15T12:28:16.725Z'
        type: string
        enum:
            - inside_car
            - not_inside
            - out_of_range
            - outside_behind_car
            - outside_driver_side
            - outside_in_front_of_car
            - outside_passenger_side
    keyfobPosition.location.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - inside_car
            - not_inside
            - out_of_range
            - outside_behind_car
            - outside_driver_side
            - outside_in_front_of_car
            - outside_passenger_side
    keyfobPosition:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            location: {$ref: '#/definitions/keyfobPosition.location'}
    keyfobPosition.availability:
        type: object
        properties:
            location: {$ref: '#/definitions/keyfobPosition.location.availability'}
    lightConditions.insideLight:
        description: 'Measured inside illuminance'
        example:
            data: {value: 0.25, unit: lux}
            timestamp: '2024-07-15T12:28:16.725Z'
    lightConditions.insideLight.availability:
        description: 'Measured inside illuminance'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    lightConditions.outsideLight:
        description: 'Measured outside illuminance'
        example:
            data: {value: 111000, unit: lux}
            timestamp: '2024-07-15T12:28:16.725Z'
    lightConditions.outsideLight.availability:
        description: 'Measured outside illuminance'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    lightConditions:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            insideLight: {$ref: '#/definitions/lightConditions.insideLight'}
            outsideLight: {$ref: '#/definitions/lightConditions.outsideLight'}
    lightConditions.availability:
        type: object
        properties:
            insideLight: {$ref: '#/definitions/lightConditions.insideLight.availability'}
            outsideLight: {$ref: '#/definitions/lightConditions.outsideLight.availability'}
    lights.ambientLightColour:
        example:
            data: {red: {value: 255}, green: {value: 0}, blue: {value: 0}}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: object
        properties:
            red: {description: 'The red component of RGB', type: number, format: integer}
            green: {description: 'The green component of RGB', type: number, format: integer}
            blue: {description: 'The blue component of RGB', type: number, format: integer}
    lights.ambientLightColour.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            red: {description: 'The red component of RGB', type: number, format: integer}
            green: {description: 'The green component of RGB', type: number, format: integer}
            blue: {description: 'The blue component of RGB', type: number, format: integer}
    lights.emergencyBrakeLight:
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - active
            - inactive
    lights.emergencyBrakeLight.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    lights.fogLights:
        example:
            - {data: {location: {value: front}, state: {value: inactive}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {location: {value: rear}, state: {value: active}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}
    lights.fogLights.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}
    lights.frontExteriorLight:
        example:
            data: {value: active_with_full_beam}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - active
            - active_with_full_beam
            - automatic
            - drl
            - inactive
    lights.frontExteriorLight.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - active_with_full_beam
            - automatic
            - drl
            - inactive
    lights.interiorLights:
        example:
            - {data: {location: {value: front}, state: {value: inactive}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {location: {value: rear}, state: {value: active}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}
    lights.interiorLights.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}
    lights.parkingLightStatus:
        description: 'Indicates the status of the parking light.'
        example:
            data: {value: both}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - both
            - left
            - off
            - right
    lights.parkingLightStatus.availability:
        description: 'Indicates the status of the parking light.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - both
            - left
            - off
            - right
    lights.readingLamps:
        example:
            - {data: {location: {value: front_left}, state: {value: active}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {location: {value: front_right}, state: {value: active}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {location: {value: rear_right}, state: {value: inactive}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {location: {value: rear_left}, state: {value: inactive}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_right]}, state: {type: string, enum: [active, inactive]}}
    lights.readingLamps.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_right]}, state: {type: string, enum: [active, inactive]}}
    lights.rearExteriorLight:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - active
            - inactive
    lights.rearExteriorLight.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    lights.reverseLight:
        example:
            data: {value: inactive}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - active
            - inactive
    lights.reverseLight.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    lights.switchPosition:
        description: 'Position of the rotary light switch'
        example:
            data: {value: parking_light_right}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - automatic
            - dipped_headlights
            - parking_light_left
            - parking_light_right
            - sidelights
    lights.switchPosition.availability:
        description: 'Position of the rotary light switch'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - automatic
            - dipped_headlights
            - parking_light_left
            - parking_light_right
            - sidelights
    lights:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            ambientLightColour: {$ref: '#/definitions/lights.ambientLightColour'}
            emergencyBrakeLight: {$ref: '#/definitions/lights.emergencyBrakeLight'}
            fogLights: {$ref: '#/definitions/lights.fogLights'}
            frontExteriorLight: {$ref: '#/definitions/lights.frontExteriorLight'}
            interiorLights: {$ref: '#/definitions/lights.interiorLights'}
            parkingLightStatus: {$ref: '#/definitions/lights.parkingLightStatus'}
            readingLamps: {$ref: '#/definitions/lights.readingLamps'}
            rearExteriorLight: {$ref: '#/definitions/lights.rearExteriorLight'}
            reverseLight: {$ref: '#/definitions/lights.reverseLight'}
            switchPosition: {$ref: '#/definitions/lights.switchPosition'}
    lights.availability:
        type: object
        properties:
            ambientLightColour: {$ref: '#/definitions/lights.ambientLightColour.availability'}
            emergencyBrakeLight: {$ref: '#/definitions/lights.emergencyBrakeLight.availability'}
            fogLights: {$ref: '#/definitions/lights.fogLights.availability'}
            frontExteriorLight: {$ref: '#/definitions/lights.frontExteriorLight.availability'}
            interiorLights: {$ref: '#/definitions/lights.interiorLights.availability'}
            parkingLightStatus: {$ref: '#/definitions/lights.parkingLightStatus.availability'}
            readingLamps: {$ref: '#/definitions/lights.readingLamps.availability'}
            rearExteriorLight: {$ref: '#/definitions/lights.rearExteriorLight.availability'}
            reverseLight: {$ref: '#/definitions/lights.reverseLight.availability'}
            switchPosition: {$ref: '#/definitions/lights.switchPosition.availability'}
    maintenance.automaticTeleserviceCallDate:
        description: 'Automatic teleservice call date'
        example:
            data: {value: '2018-11-23T11:33:50.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.automaticTeleserviceCallDate.availability:
        description: 'Automatic teleservice call date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.brakeFluidChangeDate:
        description: 'Brake fluid change date'
        example:
            data: {value: '2018-12-05T03:22:56.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.brakeFluidChangeDate.availability:
        description: 'Brake fluid change date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.brakeFluidRemainingDistance:
        description: 'Indicates the remaining distance for brake fluid.'
        example:
            data: {value: 1500.25, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.726Z'
    maintenance.brakeFluidRemainingDistance.availability:
        description: 'Indicates the remaining distance for brake fluid.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.brakeFluidStatus:
        description: 'Brake fluid''s service status.'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.brakeFluidStatus.availability:
        description: 'Brake fluid''s service status.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.brakesServiceDueDates:
        description: 'Brakes servicing due dates.'
        example:
            - {data: {axle: {value: front}, dueDate: {value: '2022-03-30T09:58:48.000Z'}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {axle: {value: rear}, dueDate: {value: '2022-03-30T09:58:48.000Z'}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, dueDate: {type: string, format: date-time}}
    maintenance.brakesServiceDueDates.availability:
        description: 'Brakes servicing due dates.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, dueDate: {type: string, format: date-time}}
    maintenance.brakesServiceRemainingDistances:
        description: 'Brakes servicing remaining distances.'
        example:
            - {data: {axle: {value: front}, distance: {value: 1500.25, unit: kilometers}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {axle: {value: rear}, distance: {value: 1500.25, unit: kilometers}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, distance: {}}
    maintenance.brakesServiceRemainingDistances.availability:
        description: 'Brakes servicing remaining distances.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, distance: {}}
    maintenance.brakesServiceStatuses:
        description: 'Brakes servicing statuses.'
        example:
            - {data: {axle: {value: front}, status: {value: ok}}, timestamp: '2024-07-15T12:28:16.726Z'}
            - {data: {axle: {value: rear}, status: {value: ok}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, status: {type: string, enum: [critical, ok, warning]}}
    maintenance.brakesServiceStatuses.availability:
        description: 'Brakes servicing statuses.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, status: {type: string, enum: [critical, ok, warning]}}
    maintenance.cbsReportsCount:
        description: 'The number of CBS reports'
        example:
            data: {value: 3}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: number
        format: integer
    maintenance.cbsReportsCount.availability:
        description: 'The number of CBS reports'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    maintenance.conditionBasedServices:
        example:
            - {data: {year: {value: 2019}, month: {value: 5}, id: {value: 3}, dueStatus: {value: ok}, text: {value: 'Brake fluid'}, description: {value: 'Next change at specified date at the latest.'}}, timestamp: '2024-07-15T12:28:16.726Z'}
        type: array
        items:
            type: object
            properties: {year: {description: 'The year', type: number, format: integer}, month: {description: 'Value between 1 and 12', type: number, format: integer}, id: {description: 'CBS identifier', type: number, format: integer}, dueStatus: {type: string, enum: [ok, overdue, pending]}, text: {description: 'CBS text', type: string}, description: {description: Description, type: string}}
    maintenance.conditionBasedServices.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {year: {description: 'The year', type: number, format: integer}, month: {description: 'Value between 1 and 12', type: number, format: integer}, id: {description: 'CBS identifier', type: number, format: integer}, dueStatus: {type: string, enum: [ok, overdue, pending]}, text: {description: 'CBS text', type: string}, description: {description: Description, type: string}}
    maintenance.distanceToNextOilService:
        description: 'Indicates the remaining distance until the next oil service; if this limit was exceeded, this value indicates the distance that has been driven since then.'
        example:
            data: {value: 525.6, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.726Z'
    maintenance.distanceToNextOilService.availability:
        description: 'Indicates the remaining distance until the next oil service; if this limit was exceeded, this value indicates the distance that has been driven since then.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.distanceToNextService:
        description: 'The distance until next servicing of the vehicle'
        example:
            data: {value: 3681, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.726Z'
    maintenance.distanceToNextService.availability:
        description: 'The distance until next servicing of the vehicle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.driveInInspectionDate:
        description: 'Next drive-in inspection date.'
        example:
            data: {value: '2022-04-05T11:00:00.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.driveInInspectionDate.availability:
        description: 'Next drive-in inspection date.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.driveInInspectionDistanceTo:
        description: 'The distance until next drive-in inspection of the vehicle'
        example:
            data: {value: 3681, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.726Z'
    maintenance.driveInInspectionDistanceTo.availability:
        description: 'The distance until next drive-in inspection of the vehicle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.driveInInspectionStatus:
        description: 'Drive-in inspection service status.'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.driveInInspectionStatus.availability:
        description: 'Drive-in inspection service status.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.inspectionStatus:
        description: 'Vehicle inspection service status.'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.inspectionStatus.availability:
        description: 'Vehicle inspection service status.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.lastECall:
        description: 'Date-time of the last eCall'
        example:
            data: {value: '2018-12-05T03:22:56.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.lastECall.availability:
        description: 'Date-time of the last eCall'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.legalInspectionDate:
        description: 'Next legally required inspection date'
        example:
            data: {value: '2022-03-30T12:11:44.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.legalInspectionDate.availability:
        description: 'Next legally required inspection date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.nextInspectionDate:
        description: 'Next inspection date'
        example:
            data: {value: '2018-10-23T14:38:47.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.nextInspectionDate.availability:
        description: 'Next inspection date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.nextInspectionDistanceTo:
        description: 'Distance until the next inspection.'
        example:
            data: {value: 1500.25, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.726Z'
    maintenance.nextInspectionDistanceTo.availability:
        description: 'Distance until the next inspection.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.nextOilServiceDate:
        description: 'Next oil service date.'
        example:
            data: {value: '2022-03-30T12:11:44.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.nextOilServiceDate.availability:
        description: 'Next oil service date.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.serviceDate:
        description: 'Date of the earliest service. If this service is overdue, the date is in the past.'
        example:
            data: {value: '2022-03-30T12:11:44.000Z'}
            timestamp: '2024-07-15T12:28:16.726Z'
        type: string
        format: date-time
    maintenance.serviceDate.availability:
        description: 'Date of the earliest service. If this service is overdue, the date is in the past.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.serviceDistanceThreshold:
        description: 'Distance threshold for service'
        example:
            data: {value: 5000, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.726Z'
    maintenance.serviceDistanceThreshold.availability:
        description: 'Distance threshold for service'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.serviceStatus:
        description: 'Consolidated status regarding service requirements. OK: no current service requirement, WARNING: at least one service has reported requirement, CRITICAL: at least one service is overdue.'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.727Z'
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.serviceStatus.availability:
        description: 'Consolidated status regarding service requirements. OK: no current service requirement, WARNING: at least one service has reported requirement, CRITICAL: at least one service is overdue.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.serviceTimeThreshold:
        description: 'Time threshold for service'
        example:
            data: {value: 4, unit: weeks}
            timestamp: '2024-07-15T12:28:16.727Z'
    maintenance.serviceTimeThreshold.availability:
        description: 'Time threshold for service'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.teleserviceAvailability:
        example:
            data: {value: successful}
            timestamp: '2024-07-15T12:28:16.727Z'
        type: string
        enum:
            - error
            - idle
            - pending
            - successful
    maintenance.teleserviceAvailability.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - error
            - idle
            - pending
            - successful
    maintenance.teleserviceBatteryCallDate:
        description: 'Teleservice batter call date'
        example:
            data: {value: '2018-11-23T10:36:50.000Z'}
            timestamp: '2024-07-15T12:28:16.727Z'
        type: string
        format: date-time
    maintenance.teleserviceBatteryCallDate.availability:
        description: 'Teleservice batter call date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.timeToExhaustInspection:
        description: 'Time until exhaust inspection'
        example:
            data: {value: 5, unit: months}
            timestamp: '2024-07-15T12:28:16.727Z'
    maintenance.timeToExhaustInspection.availability:
        description: 'Time until exhaust inspection'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.timeToNextOilService:
        description: 'Indicates the time remaining until the next oil service; if this limit was exceeded, this value indicates the time that has passed since then.'
        example:
            data: {value: 66.8, unit: days}
            timestamp: '2024-07-15T12:28:16.727Z'
    maintenance.timeToNextOilService.availability:
        description: 'Indicates the time remaining until the next oil service; if this limit was exceeded, this value indicates the time that has passed since then.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.timeToNextService:
        description: 'Time until next servicing of the vehicle'
        example:
            data: {value: 501, unit: days}
            timestamp: '2024-07-15T12:28:16.727Z'
    maintenance.timeToNextService.availability:
        description: 'Time until next servicing of the vehicle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.vehicleCheckDate:
        description: 'Vehicle check date (usually after a predetermined distance).'
        example:
            data: {value: '2022-04-01T08:51:28.093Z'}
            timestamp: '2024-07-15T12:28:16.727Z'
        type: string
        format: date-time
    maintenance.vehicleCheckDate.availability:
        description: 'Vehicle check date (usually after a predetermined distance).'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    maintenance.vehicleCheckDistanceTo:
        description: 'The distance until next vehicle check.'
        example:
            data: {value: 1350.4, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.727Z'
    maintenance.vehicleCheckDistanceTo.availability:
        description: 'The distance until next vehicle check.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    maintenance.vehicleCheckStatus:
        description: 'Vehicle check service status.'
        example:
            data: {value: ok}
            timestamp: '2024-07-15T12:28:16.728Z'
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance.vehicleCheckStatus.availability:
        description: 'Vehicle check service status.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - critical
            - ok
            - warning
    maintenance:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            automaticTeleserviceCallDate: {$ref: '#/definitions/maintenance.automaticTeleserviceCallDate'}
            brakeFluidChangeDate: {$ref: '#/definitions/maintenance.brakeFluidChangeDate'}
            brakeFluidRemainingDistance: {$ref: '#/definitions/maintenance.brakeFluidRemainingDistance'}
            brakeFluidStatus: {$ref: '#/definitions/maintenance.brakeFluidStatus'}
            brakesServiceDueDates: {$ref: '#/definitions/maintenance.brakesServiceDueDates'}
            brakesServiceRemainingDistances: {$ref: '#/definitions/maintenance.brakesServiceRemainingDistances'}
            brakesServiceStatuses: {$ref: '#/definitions/maintenance.brakesServiceStatuses'}
            cbsReportsCount: {$ref: '#/definitions/maintenance.cbsReportsCount'}
            conditionBasedServices: {$ref: '#/definitions/maintenance.conditionBasedServices'}
            distanceToNextOilService: {$ref: '#/definitions/maintenance.distanceToNextOilService'}
            distanceToNextService: {$ref: '#/definitions/maintenance.distanceToNextService'}
            driveInInspectionDate: {$ref: '#/definitions/maintenance.driveInInspectionDate'}
            driveInInspectionDistanceTo: {$ref: '#/definitions/maintenance.driveInInspectionDistanceTo'}
            driveInInspectionStatus: {$ref: '#/definitions/maintenance.driveInInspectionStatus'}
            inspectionStatus: {$ref: '#/definitions/maintenance.inspectionStatus'}
            lastECall: {$ref: '#/definitions/maintenance.lastECall'}
            legalInspectionDate: {$ref: '#/definitions/maintenance.legalInspectionDate'}
            nextInspectionDate: {$ref: '#/definitions/maintenance.nextInspectionDate'}
            nextInspectionDistanceTo: {$ref: '#/definitions/maintenance.nextInspectionDistanceTo'}
            nextOilServiceDate: {$ref: '#/definitions/maintenance.nextOilServiceDate'}
            serviceDate: {$ref: '#/definitions/maintenance.serviceDate'}
            serviceDistanceThreshold: {$ref: '#/definitions/maintenance.serviceDistanceThreshold'}
            serviceStatus: {$ref: '#/definitions/maintenance.serviceStatus'}
            serviceTimeThreshold: {$ref: '#/definitions/maintenance.serviceTimeThreshold'}
            teleserviceAvailability: {$ref: '#/definitions/maintenance.teleserviceAvailability'}
            teleserviceBatteryCallDate: {$ref: '#/definitions/maintenance.teleserviceBatteryCallDate'}
            timeToExhaustInspection: {$ref: '#/definitions/maintenance.timeToExhaustInspection'}
            timeToNextOilService: {$ref: '#/definitions/maintenance.timeToNextOilService'}
            timeToNextService: {$ref: '#/definitions/maintenance.timeToNextService'}
            vehicleCheckDate: {$ref: '#/definitions/maintenance.vehicleCheckDate'}
            vehicleCheckDistanceTo: {$ref: '#/definitions/maintenance.vehicleCheckDistanceTo'}
            vehicleCheckStatus: {$ref: '#/definitions/maintenance.vehicleCheckStatus'}
    maintenance.availability:
        type: object
        properties:
            automaticTeleserviceCallDate: {$ref: '#/definitions/maintenance.automaticTeleserviceCallDate.availability'}
            brakeFluidChangeDate: {$ref: '#/definitions/maintenance.brakeFluidChangeDate.availability'}
            brakeFluidRemainingDistance: {$ref: '#/definitions/maintenance.brakeFluidRemainingDistance.availability'}
            brakeFluidStatus: {$ref: '#/definitions/maintenance.brakeFluidStatus.availability'}
            brakesServiceDueDates: {$ref: '#/definitions/maintenance.brakesServiceDueDates.availability'}
            brakesServiceRemainingDistances: {$ref: '#/definitions/maintenance.brakesServiceRemainingDistances.availability'}
            brakesServiceStatuses: {$ref: '#/definitions/maintenance.brakesServiceStatuses.availability'}
            cbsReportsCount: {$ref: '#/definitions/maintenance.cbsReportsCount.availability'}
            conditionBasedServices: {$ref: '#/definitions/maintenance.conditionBasedServices.availability'}
            distanceToNextOilService: {$ref: '#/definitions/maintenance.distanceToNextOilService.availability'}
            distanceToNextService: {$ref: '#/definitions/maintenance.distanceToNextService.availability'}
            driveInInspectionDate: {$ref: '#/definitions/maintenance.driveInInspectionDate.availability'}
            driveInInspectionDistanceTo: {$ref: '#/definitions/maintenance.driveInInspectionDistanceTo.availability'}
            driveInInspectionStatus: {$ref: '#/definitions/maintenance.driveInInspectionStatus.availability'}
            inspectionStatus: {$ref: '#/definitions/maintenance.inspectionStatus.availability'}
            lastECall: {$ref: '#/definitions/maintenance.lastECall.availability'}
            legalInspectionDate: {$ref: '#/definitions/maintenance.legalInspectionDate.availability'}
            nextInspectionDate: {$ref: '#/definitions/maintenance.nextInspectionDate.availability'}
            nextInspectionDistanceTo: {$ref: '#/definitions/maintenance.nextInspectionDistanceTo.availability'}
            nextOilServiceDate: {$ref: '#/definitions/maintenance.nextOilServiceDate.availability'}
            serviceDate: {$ref: '#/definitions/maintenance.serviceDate.availability'}
            serviceDistanceThreshold: {$ref: '#/definitions/maintenance.serviceDistanceThreshold.availability'}
            serviceStatus: {$ref: '#/definitions/maintenance.serviceStatus.availability'}
            serviceTimeThreshold: {$ref: '#/definitions/maintenance.serviceTimeThreshold.availability'}
            teleserviceAvailability: {$ref: '#/definitions/maintenance.teleserviceAvailability.availability'}
            teleserviceBatteryCallDate: {$ref: '#/definitions/maintenance.teleserviceBatteryCallDate.availability'}
            timeToExhaustInspection: {$ref: '#/definitions/maintenance.timeToExhaustInspection.availability'}
            timeToNextOilService: {$ref: '#/definitions/maintenance.timeToNextOilService.availability'}
            timeToNextService: {$ref: '#/definitions/maintenance.timeToNextService.availability'}
            vehicleCheckDate: {$ref: '#/definitions/maintenance.vehicleCheckDate.availability'}
            vehicleCheckDistanceTo: {$ref: '#/definitions/maintenance.vehicleCheckDistanceTo.availability'}
            vehicleCheckStatus: {$ref: '#/definitions/maintenance.vehicleCheckStatus.availability'}
    messaging.handle:
        description: 'The optional handle of message'
        example:
            data: {value: Epp}
            timestamp: '2024-07-15T12:28:16.728Z'
        type: string
    messaging.handle.availability:
        description: 'The optional handle of message'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    messaging.text:
        description: 'The text'
        example:
            data: {value: 'Hey mom!'}
            timestamp: '2024-07-15T12:28:16.728Z'
        type: string
    messaging.text.availability:
        description: 'The text'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    messaging:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            handle: {$ref: '#/definitions/messaging.handle'}
            text: {$ref: '#/definitions/messaging.text'}
    messaging.availability:
        type: object
        properties:
            handle: {$ref: '#/definitions/messaging.handle.availability'}
            text: {$ref: '#/definitions/messaging.text.availability'}
    mobile.connection:
        example:
            data: {value: connected}
            timestamp: '2024-07-15T12:28:16.728Z'
        type: string
        enum:
            - connected
            - disconnected
    mobile.connection.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - connected
            - disconnected
    mobile:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            connection: {$ref: '#/definitions/mobile.connection'}
    mobile.availability:
        type: object
        properties:
            connection: {$ref: '#/definitions/mobile.connection.availability'}
    multiCommand.multiCommands:
        description: 'The outgoing commands'
        example:
            - {data: {doors: {locksState: {data: {value: locked}}}}, timestamp: '2024-07-15T12:28:16.728Z'}
            - {data: {ignition: {status: {data: {value: off}}}}, timestamp: '2024-07-15T12:28:16.728Z'}
        type: array
        items:
            type: capability_state
    multiCommand.multiStates:
        description: 'The incoming states'
        example:
            - {data: {doors: {brand: {data: {value: bmw}}, vin: {data: {value: JF2SHBDC7CH451869}}, locksState: {data: {value: unlocked}}, positions: [{data: {location: {value: front_left}, position: {value: open}}}, {data: {location: {value: rear_right}, position: {value: open}}}], timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2024-07-15T12:28:16.729Z'}
            - {data: {charging: {brand: {data: {value: bmw}}, vin: {data: {value: JF2SHBDC7CH451869}}, chargePortState: {data: {value: open}}, chargeMode: {data: {value: immediate}}, chargingRate: {data: {value: 35, unit: kilowatts}}, maxRange: {data: {value: 555, unit: kilometers}}, timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2024-07-15T12:28:16.729Z'}
        type: array
        items:
            type: capability_state
    multiCommand:
        type: object
        properties:
            multiStates: {$ref: '#/definitions/multiCommand.multiStates'}
    multiCommand.availability:
        type: object
        properties:
            multiStates: {$ref: '#/definitions/multiCommand.multiStates.availability'}
    naviDestination.arrivalDuration:
        description: 'Remaining time until reaching the destination.'
        example:
            data: {value: 2.6, unit: hours}
            timestamp: '2024-07-15T12:28:16.729Z'
    naviDestination.arrivalDuration.availability:
        description: 'Remaining time until reaching the destination.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    naviDestination.batteryConsumptionToDestination:
        description: 'Required battery charge level to proceed to the next destination.'
        example:
            data: {value: 0.23}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: number
        format: double
    naviDestination.batteryConsumptionToDestination.availability:
        description: 'Required battery charge level to proceed to the next destination.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    naviDestination.chargingTimeForDestination:
        description: 'Required charging time to reach the next destination.'
        example:
            data: {value: 55, unit: minutes}
            timestamp: '2024-07-15T12:28:16.729Z'
    naviDestination.chargingTimeForDestination.availability:
        description: 'Required charging time to reach the next destination.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    naviDestination.coordinates:
        example:
            data: {latitude: {value: 52.520008}, longitude: {value: 13.404954}}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    naviDestination.coordinates.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    naviDestination.dataSlotsFree:
        description: 'Remaining number of POI data slots available.'
        example:
            data: {value: 14}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: number
        format: integer
    naviDestination.dataSlotsFree.availability:
        description: 'Remaining number of POI data slots available.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    naviDestination.dataSlotsMax:
        description: 'Maximum number of POI data slots.'
        example:
            data: {value: 30}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: number
        format: integer
    naviDestination.dataSlotsMax.availability:
        description: 'Maximum number of POI data slots.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    naviDestination.destinationName:
        description: 'Destination name'
        example:
            data: {value: Berlin}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: string
    naviDestination.destinationName.availability:
        description: 'Destination name'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    naviDestination.distanceToDestination:
        description: 'Remaining distance to reach the destination.'
        example:
            data: {value: 1337, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.729Z'
    naviDestination.distanceToDestination.availability:
        description: 'Remaining distance to reach the destination.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    naviDestination:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            arrivalDuration: {$ref: '#/definitions/naviDestination.arrivalDuration'}
            batteryConsumptionToDestination: {$ref: '#/definitions/naviDestination.batteryConsumptionToDestination'}
            chargingTimeForDestination: {$ref: '#/definitions/naviDestination.chargingTimeForDestination'}
            coordinates: {$ref: '#/definitions/naviDestination.coordinates'}
            dataSlotsFree: {$ref: '#/definitions/naviDestination.dataSlotsFree'}
            dataSlotsMax: {$ref: '#/definitions/naviDestination.dataSlotsMax'}
            destinationName: {$ref: '#/definitions/naviDestination.destinationName'}
            distanceToDestination: {$ref: '#/definitions/naviDestination.distanceToDestination'}
    naviDestination.availability:
        type: object
        properties:
            arrivalDuration: {$ref: '#/definitions/naviDestination.arrivalDuration.availability'}
            batteryConsumptionToDestination: {$ref: '#/definitions/naviDestination.batteryConsumptionToDestination.availability'}
            chargingTimeForDestination: {$ref: '#/definitions/naviDestination.chargingTimeForDestination.availability'}
            coordinates: {$ref: '#/definitions/naviDestination.coordinates.availability'}
            dataSlotsFree: {$ref: '#/definitions/naviDestination.dataSlotsFree.availability'}
            dataSlotsMax: {$ref: '#/definitions/naviDestination.dataSlotsMax.availability'}
            destinationName: {$ref: '#/definitions/naviDestination.destinationName.availability'}
            distanceToDestination: {$ref: '#/definitions/naviDestination.distanceToDestination.availability'}
    notifications.actionItems:
        example:
            - {data: {id: {value: 27}, name: {value: Open}}, timestamp: '2024-07-15T12:28:16.729Z'}
            - {data: {id: {value: 28}, name: {value: Cancel}}, timestamp: '2024-07-15T12:28:16.729Z'}
        type: array
        items:
            type: object
            properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}
    notifications.actionItems.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}
    notifications.activatedAction:
        description: 'Identifier of the activated action'
        example:
            data: {value: 27}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: number
        format: integer
    notifications.activatedAction.availability:
        description: 'Identifier of the activated action'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    notifications.clear:
        example:
            data: {value: clear}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: string
        enum:
            - clear
    notifications.clear.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - clear
    notifications.text:
        description: 'Text for the notification'
        example:
            data: {value: 'Open Garage'}
            timestamp: '2024-07-15T12:28:16.729Z'
        type: string
    notifications.text.availability:
        description: 'Text for the notification'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    notifications:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            actionItems: {$ref: '#/definitions/notifications.actionItems'}
            activatedAction: {$ref: '#/definitions/notifications.activatedAction'}
            clear: {$ref: '#/definitions/notifications.clear'}
            text: {$ref: '#/definitions/notifications.text'}
    notifications.availability:
        type: object
        properties:
            actionItems: {$ref: '#/definitions/notifications.actionItems.availability'}
            activatedAction: {$ref: '#/definitions/notifications.activatedAction.availability'}
            clear: {$ref: '#/definitions/notifications.clear.availability'}
            text: {$ref: '#/definitions/notifications.text.availability'}
    offroad.routeIncline:
        description: 'The route elevation incline'
        example:
            data: {value: 10.1, unit: degrees}
            timestamp: '2024-07-15T12:28:16.729Z'
    offroad.routeIncline.availability:
        description: 'The route elevation incline'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    offroad.wheelSuspension:
        description: 'The wheel suspension level percentage, whereas 0.0 is no suspension and 1.0 maximum suspension'
        example:
            data: {value: 0.5}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: number
        format: double
    offroad.wheelSuspension.availability:
        description: 'The wheel suspension level percentage, whereas 0.0 is no suspension and 1.0 maximum suspension'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    offroad:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            routeIncline: {$ref: '#/definitions/offroad.routeIncline'}
            wheelSuspension: {$ref: '#/definitions/offroad.wheelSuspension'}
    offroad.availability:
        type: object
        properties:
            routeIncline: {$ref: '#/definitions/offroad.routeIncline.availability'}
            wheelSuspension: {$ref: '#/definitions/offroad.wheelSuspension.availability'}
    parkingBrake.status:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
        enum:
            - active
            - inactive
    parkingBrake.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    parkingBrake:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            status: {$ref: '#/definitions/parkingBrake.status'}
    parkingBrake.availability:
        type: object
        properties:
            status: {$ref: '#/definitions/parkingBrake.status.availability'}
    parkingTicket.operatorName:
        description: 'Operator name'
        example:
            data: {value: 'Berlin Parking'}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
    parkingTicket.operatorName.availability:
        description: 'Operator name'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    parkingTicket.operatorTicketID:
        description: 'Operator ticket ID'
        example:
            data: {value: 6489AB4233}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
    parkingTicket.operatorTicketID.availability:
        description: 'Operator ticket ID'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    parkingTicket.status:
        example:
            data: {value: ended}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
        enum:
            - ended
            - started
    parkingTicket.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - ended
            - started
    parkingTicket.ticketEndTime:
        description: 'Parking ticket end time'
        example:
            data: {value: '2019-10-08T11:21:45.000Z'}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
        format: date-time
    parkingTicket.ticketEndTime.availability:
        description: 'Parking ticket end time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    parkingTicket.ticketStartTime:
        description: 'Parking ticket start time'
        example:
            data: {value: '2017-01-10T19:34:22.000Z'}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
        format: date-time
    parkingTicket.ticketStartTime.availability:
        description: 'Parking ticket start time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    parkingTicket:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            operatorName: {$ref: '#/definitions/parkingTicket.operatorName'}
            operatorTicketID: {$ref: '#/definitions/parkingTicket.operatorTicketID'}
            status: {$ref: '#/definitions/parkingTicket.status'}
            ticketEndTime: {$ref: '#/definitions/parkingTicket.ticketEndTime'}
            ticketStartTime: {$ref: '#/definitions/parkingTicket.ticketStartTime'}
    parkingTicket.availability:
        type: object
        properties:
            operatorName: {$ref: '#/definitions/parkingTicket.operatorName.availability'}
            operatorTicketID: {$ref: '#/definitions/parkingTicket.operatorTicketID.availability'}
            status: {$ref: '#/definitions/parkingTicket.status.availability'}
            ticketEndTime: {$ref: '#/definitions/parkingTicket.ticketEndTime.availability'}
            ticketStartTime: {$ref: '#/definitions/parkingTicket.ticketStartTime.availability'}
    powerTakeoff.engaged:
        example:
            data: {value: engaged}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
        enum:
            - engaged
            - not_engaged
    powerTakeoff.engaged.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - engaged
            - not_engaged
    powerTakeoff.status:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.730Z'
        type: string
        enum:
            - active
            - inactive
    powerTakeoff.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    powerTakeoff:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            engaged: {$ref: '#/definitions/powerTakeoff.engaged'}
            status: {$ref: '#/definitions/powerTakeoff.status'}
    powerTakeoff.availability:
        type: object
        properties:
            engaged: {$ref: '#/definitions/powerTakeoff.engaged.availability'}
            status: {$ref: '#/definitions/powerTakeoff.status.availability'}
    race.accelerations:
        example:
            - {data: {direction: {value: longitudinal}, acceleration: {value: 0.864, unit: gravity}}, timestamp: '2024-07-15T12:28:16.731Z'}
            - {data: {direction: {value: lateral}, acceleration: {value: -0.753, unit: gravity}}, timestamp: '2024-07-15T12:28:16.731Z'}
            - {data: {direction: {value: front_lateral}, acceleration: {value: 0.753, unit: gravity}}, timestamp: '2024-07-15T12:28:16.731Z'}
            - {data: {direction: {value: rear_lateral}, acceleration: {value: -0.864, unit: gravity}}, timestamp: '2024-07-15T12:28:16.731Z'}
        type: array
        items:
            type: object
            properties: {direction: {type: string, enum: [front_lateral, lateral, longitudinal, rear_lateral]}, acceleration: {description: 'The acceleration'}}
    race.accelerations.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {direction: {type: string, enum: [front_lateral, lateral, longitudinal, rear_lateral]}, acceleration: {description: 'The acceleration'}}
    race.acceleratorDurations:
        description: 'Duration during which the accelerator pedal has been pressed more than the given percentage.'
        example:
            - {data: {pedalPositionThreshold: {value: 0.5}, duration: {value: 1234, unit: seconds}}, timestamp: '2024-07-15T12:28:16.731Z'}
        type: array
        items:
            type: object
            properties: {pedalPositionThreshold: {description: 'The accelerator pedal position threshold percentage', type: number, format: double}, duration: {description: 'The duration of the accelerator pedal position'}}
    race.acceleratorDurations.availability:
        description: 'Duration during which the accelerator pedal has been pressed more than the given percentage.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {pedalPositionThreshold: {description: 'The accelerator pedal position threshold percentage', type: number, format: double}, duration: {description: 'The duration of the accelerator pedal position'}}
    race.acceleratorPedalIdleSwitch:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - active
            - inactive
    race.acceleratorPedalIdleSwitch.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    race.acceleratorPedalKickdownSwitch:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - active
            - inactive
    race.acceleratorPedalKickdownSwitch.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    race.brakePedalPosition:
        description: 'The brake pedal position between 0.0-1.0, wheras 1.0 (100%) is full brakes'
        example:
            data: {value: 0.12}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: number
        format: double
    race.brakePedalPosition.availability:
        description: 'The brake pedal position between 0.0-1.0, wheras 1.0 (100%) is full brakes'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    race.brakePedalSwitch:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - active
            - inactive
    race.brakePedalSwitch.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    race.brakePressure:
        description: 'Brake pressure'
        example:
            data: {value: 20, unit: bars}
            timestamp: '2024-07-15T12:28:16.731Z'
    race.brakePressure.availability:
        description: 'Brake pressure'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    race.brakeTorqueVectorings:
        example:
            - {data: {axle: {value: front}, state: {value: active}}, timestamp: '2024-07-15T12:28:16.731Z'}
            - {data: {axle: {value: rear}, state: {value: inactive}}, timestamp: '2024-07-15T12:28:16.731Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}
    race.brakeTorqueVectorings.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}
    race.clutchPedalSwitch:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - active
            - inactive
    race.clutchPedalSwitch.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    race.drivetrainState:
        description: 'State of the drivetrain for starts.'
        example:
            data: {value: race_start}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - comfort_start
            - e_launch
            - inactive
            - low_speed_mode
            - race_start
            - race_start_preparation
            - ready_for_overpressing
            - start
            - start_idle_run_control
    race.drivetrainState.availability:
        description: 'State of the drivetrain for starts.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - comfort_start
            - e_launch
            - inactive
            - low_speed_mode
            - race_start
            - race_start_preparation
            - ready_for_overpressing
            - start
            - start_idle_run_control
    race.electronicStabilityProgram:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - active
            - inactive
    race.electronicStabilityProgram.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    race.gasPedalPosition:
        description: 'The gas pedal position between 0.0-1.0, whereas 1.0 (100%) is full throttle'
        example:
            data: {value: 0.98}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: number
        format: double
    race.gasPedalPosition.availability:
        description: 'The gas pedal position between 0.0-1.0, whereas 1.0 (100%) is full throttle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    race.gearMode:
        example:
            data: {value: drive}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - drive
            - low_gear
            - manual
            - neutral
            - park
            - reverse
            - sport
    race.gearMode.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - drive
            - low_gear
            - manual
            - neutral
            - park
            - reverse
            - sport
    race.oversteering:
        description: 'The oversteering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 30% marginal, over 30% critical'
        example:
            data: {value: 0.05}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: number
        format: double
    race.oversteering.availability:
        description: 'The oversteering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 30% marginal, over 30% critical'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    race.rearSuspensionSteering:
        description: 'Rear suspension steering'
        example:
            data: {value: 3.3, unit: degrees}
            timestamp: '2024-07-15T12:28:16.731Z'
    race.rearSuspensionSteering.availability:
        description: 'Rear suspension steering'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    race.selectedGear:
        description: 'The selected gear value, if any'
        example:
            data: {value: 4}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: number
        format: integer
    race.selectedGear.availability:
        description: 'The selected gear value, if any'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    race.steeringAngle:
        description: 'The steering angle, whereas 0.0 is straight ahead, positive number to the right and negative number to the left'
        example:
            data: {value: 10, unit: degrees}
            timestamp: '2024-07-15T12:28:16.731Z'
    race.steeringAngle.availability:
        description: 'The steering angle, whereas 0.0 is straight ahead, positive number to the right and negative number to the left'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    race.understeering:
        description: 'The understeering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 0.3 (30%) marginal, over 30% critical'
        example:
            data: {value: 0.19}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: number
        format: double
    race.understeering.availability:
        description: 'The understeering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 0.3 (30%) marginal, over 30% critical'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    race.vehicleMoving:
        example:
            data: {value: moving}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - moving
            - not_moving
    race.vehicleMoving.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - moving
            - not_moving
    race.yawRate:
        description: 'Yaw turning rate'
        example:
            data: {value: 6.66, unit: degrees_per_second}
            timestamp: '2024-07-15T12:28:16.731Z'
    race.yawRate.availability:
        description: 'Yaw turning rate'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    race:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            accelerations: {$ref: '#/definitions/race.accelerations'}
            acceleratorDurations: {$ref: '#/definitions/race.acceleratorDurations'}
            acceleratorPedalIdleSwitch: {$ref: '#/definitions/race.acceleratorPedalIdleSwitch'}
            acceleratorPedalKickdownSwitch: {$ref: '#/definitions/race.acceleratorPedalKickdownSwitch'}
            brakePedalPosition: {$ref: '#/definitions/race.brakePedalPosition'}
            brakePedalSwitch: {$ref: '#/definitions/race.brakePedalSwitch'}
            brakePressure: {$ref: '#/definitions/race.brakePressure'}
            brakeTorqueVectorings: {$ref: '#/definitions/race.brakeTorqueVectorings'}
            clutchPedalSwitch: {$ref: '#/definitions/race.clutchPedalSwitch'}
            drivetrainState: {$ref: '#/definitions/race.drivetrainState'}
            electronicStabilityProgram: {$ref: '#/definitions/race.electronicStabilityProgram'}
            gasPedalPosition: {$ref: '#/definitions/race.gasPedalPosition'}
            gearMode: {$ref: '#/definitions/race.gearMode'}
            oversteering: {$ref: '#/definitions/race.oversteering'}
            rearSuspensionSteering: {$ref: '#/definitions/race.rearSuspensionSteering'}
            selectedGear: {$ref: '#/definitions/race.selectedGear'}
            steeringAngle: {$ref: '#/definitions/race.steeringAngle'}
            understeering: {$ref: '#/definitions/race.understeering'}
            vehicleMoving: {$ref: '#/definitions/race.vehicleMoving'}
            yawRate: {$ref: '#/definitions/race.yawRate'}
    race.availability:
        type: object
        properties:
            accelerations: {$ref: '#/definitions/race.accelerations.availability'}
            acceleratorDurations: {$ref: '#/definitions/race.acceleratorDurations.availability'}
            acceleratorPedalIdleSwitch: {$ref: '#/definitions/race.acceleratorPedalIdleSwitch.availability'}
            acceleratorPedalKickdownSwitch: {$ref: '#/definitions/race.acceleratorPedalKickdownSwitch.availability'}
            brakePedalPosition: {$ref: '#/definitions/race.brakePedalPosition.availability'}
            brakePedalSwitch: {$ref: '#/definitions/race.brakePedalSwitch.availability'}
            brakePressure: {$ref: '#/definitions/race.brakePressure.availability'}
            brakeTorqueVectorings: {$ref: '#/definitions/race.brakeTorqueVectorings.availability'}
            clutchPedalSwitch: {$ref: '#/definitions/race.clutchPedalSwitch.availability'}
            drivetrainState: {$ref: '#/definitions/race.drivetrainState.availability'}
            electronicStabilityProgram: {$ref: '#/definitions/race.electronicStabilityProgram.availability'}
            gasPedalPosition: {$ref: '#/definitions/race.gasPedalPosition.availability'}
            gearMode: {$ref: '#/definitions/race.gearMode.availability'}
            oversteering: {$ref: '#/definitions/race.oversteering.availability'}
            rearSuspensionSteering: {$ref: '#/definitions/race.rearSuspensionSteering.availability'}
            selectedGear: {$ref: '#/definitions/race.selectedGear.availability'}
            steeringAngle: {$ref: '#/definitions/race.steeringAngle.availability'}
            understeering: {$ref: '#/definitions/race.understeering.availability'}
            vehicleMoving: {$ref: '#/definitions/race.vehicleMoving.availability'}
            yawRate: {$ref: '#/definitions/race.yawRate.availability'}
    remoteControl.angle:
        description: 'Wheel base angle'
        example:
            data: {value: 50, unit: degrees}
            timestamp: '2024-07-15T12:28:16.731Z'
    remoteControl.angle.availability:
        description: 'Wheel base angle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    remoteControl.controlMode:
        example:
            data: {value: started}
            timestamp: '2024-07-15T12:28:16.731Z'
        type: string
        enum:
            - aborted
            - available
            - ended
            - failed_to_start
            - started
            - unavailable
    remoteControl.controlMode.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - aborted
            - available
            - ended
            - failed_to_start
            - started
            - unavailable
    remoteControl.speed:
        description: 'Target speed'
        example:
            data: {value: 5, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.731Z'
    remoteControl.speed.availability:
        description: 'Target speed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    remoteControl:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            angle: {$ref: '#/definitions/remoteControl.angle'}
            controlMode: {$ref: '#/definitions/remoteControl.controlMode'}
    remoteControl.availability:
        type: object
        properties:
            angle: {$ref: '#/definitions/remoteControl.angle.availability'}
            controlMode: {$ref: '#/definitions/remoteControl.controlMode.availability'}
    rooftopControl.convertibleRoofState:
        example:
            data: {value: open}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: string
        enum:
            - closed
            - closed_secured
            - emergency_locked
            - hard_top_mounted
            - intermediate_position
            - loading_position
            - loading_position_immediate
            - open
            - open_secured
    rooftopControl.convertibleRoofState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - closed_secured
            - emergency_locked
            - hard_top_mounted
            - intermediate_position
            - loading_position
            - loading_position_immediate
            - open
            - open_secured
    rooftopControl.dimming:
        description: '1.0 (100%) is opaque, 0.0 (0%) is transparent'
        example:
            data: {value: 1}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: number
        format: double
    rooftopControl.dimming.availability:
        description: '1.0 (100%) is opaque, 0.0 (0%) is transparent'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    rooftopControl.position:
        description: '1.0 (100%) is fully open, 0.0 (0%) is closed'
        example:
            data: {value: 0.5}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: number
        format: double
    rooftopControl.position.availability:
        description: '1.0 (100%) is fully open, 0.0 (0%) is closed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    rooftopControl.sunroofRainEvent:
        description: 'Sunroof event happened in case of rain'
        example:
            data: {value: no_event}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: string
        enum:
            - automatically_in_stroke_position
            - in_stroke_position_because_of_rain
            - no_event
            - timer
    rooftopControl.sunroofRainEvent.availability:
        description: 'Sunroof event happened in case of rain'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - automatically_in_stroke_position
            - in_stroke_position_because_of_rain
            - no_event
            - timer
    rooftopControl.sunroofState:
        example:
            data: {value: open}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: string
        enum:
            - closed
            - intermediate
            - open
    rooftopControl.sunroofState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - intermediate
            - open
    rooftopControl.sunroofTiltState:
        example:
            data: {value: half_tilted}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: string
        enum:
            - closed
            - half_tilted
            - tilted
    rooftopControl.sunroofTiltState.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - half_tilted
            - tilted
    rooftopControl.tiltPosition:
        description: '1.0 (100%) is fully tilted, 0.0 (0%) is not'
        example:
            data: {value: 0.5}
            timestamp: '2024-07-15T12:28:16.732Z'
        type: number
        format: double
    rooftopControl.tiltPosition.availability:
        description: '1.0 (100%) is fully tilted, 0.0 (0%) is not'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    rooftopControl:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            convertibleRoofState: {$ref: '#/definitions/rooftopControl.convertibleRoofState'}
            dimming: {$ref: '#/definitions/rooftopControl.dimming'}
            position: {$ref: '#/definitions/rooftopControl.position'}
            sunroofRainEvent: {$ref: '#/definitions/rooftopControl.sunroofRainEvent'}
            sunroofState: {$ref: '#/definitions/rooftopControl.sunroofState'}
            sunroofTiltState: {$ref: '#/definitions/rooftopControl.sunroofTiltState'}
            tiltPosition: {$ref: '#/definitions/rooftopControl.tiltPosition'}
    rooftopControl.availability:
        type: object
        properties:
            convertibleRoofState: {$ref: '#/definitions/rooftopControl.convertibleRoofState.availability'}
            dimming: {$ref: '#/definitions/rooftopControl.dimming.availability'}
            position: {$ref: '#/definitions/rooftopControl.position.availability'}
            sunroofRainEvent: {$ref: '#/definitions/rooftopControl.sunroofRainEvent.availability'}
            sunroofState: {$ref: '#/definitions/rooftopControl.sunroofState.availability'}
            sunroofTiltState: {$ref: '#/definitions/rooftopControl.sunroofTiltState.availability'}
            tiltPosition: {$ref: '#/definitions/rooftopControl.tiltPosition.availability'}
    seats.personsDetected:
        example:
            - {data: {location: {value: front_left}, detected: {value: detected}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: front_right}, detected: {value: not_detected}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: rear_right}, detected: {value: not_detected}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: rear_left}, detected: {value: not_detected}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: rear_center}, detected: {value: not_detected}}, timestamp: '2024-07-15T12:28:16.732Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [driver, front_left, front_right, passenger, rear_center, rear_left, rear_right]}, detected: {type: string, enum: [detected, not_detected]}}
    seats.personsDetected.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [driver, front_left, front_right, passenger, rear_center, rear_left, rear_right]}, detected: {type: string, enum: [detected, not_detected]}}
    seats.seatbeltsState:
        example:
            - {data: {location: {value: front_left}, fastenedState: {value: fastened}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: front_right}, fastenedState: {value: not_fastened}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: rear_right}, fastenedState: {value: not_fastened}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: rear_left}, fastenedState: {value: not_fastened}}, timestamp: '2024-07-15T12:28:16.732Z'}
            - {data: {location: {value: rear_center}, fastenedState: {value: not_fastened}}, timestamp: '2024-07-15T12:28:16.732Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [driver, front_left, front_right, passenger, rear_center, rear_left, rear_right]}, fastenedState: {type: string, enum: [fastened, not_fastened]}}
    seats.seatbeltsState.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [driver, front_left, front_right, passenger, rear_center, rear_left, rear_right]}, fastenedState: {type: string, enum: [fastened, not_fastened]}}
    seats:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            personsDetected: {$ref: '#/definitions/seats.personsDetected'}
            seatbeltsState: {$ref: '#/definitions/seats.seatbeltsState'}
    seats.availability:
        type: object
        properties:
            personsDetected: {$ref: '#/definitions/seats.personsDetected.availability'}
            seatbeltsState: {$ref: '#/definitions/seats.seatbeltsState.availability'}
    tachograph.driversCardsPresent:
        example:
            - {data: {driverNumber: {value: 6}, cardPresent: {value: present}}, timestamp: '2024-07-15T12:28:16.733Z'}
            - {data: {driverNumber: {value: 7}, cardPresent: {value: not_present}}, timestamp: '2024-07-15T12:28:16.733Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, cardPresent: {type: string, enum: [not_present, present]}}
    tachograph.driversCardsPresent.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, cardPresent: {type: string, enum: [not_present, present]}}
    tachograph.driversTimeStates:
        example:
            - {data: {driverNumber: {value: 3}, timeState: {value: four_reached}}, timestamp: '2024-07-15T12:28:16.733Z'}
            - {data: {driverNumber: {value: 4}, timeState: {value: fifteen_min_before_sixteen}}, timestamp: '2024-07-15T12:28:16.733Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, timeState: {type: string, enum: [fifteen_min_before_four, fifteen_min_before_nine, fifteen_min_before_sixteen, four_reached, nine_reached, normal, sixteen_reached]}}
    tachograph.driversTimeStates.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, timeState: {type: string, enum: [fifteen_min_before_four, fifteen_min_before_nine, fifteen_min_before_sixteen, four_reached, nine_reached, normal, sixteen_reached]}}
    tachograph.driversWorkingStates:
        example:
            - {data: {driverNumber: {value: 1}, workingState: {value: working}}, timestamp: '2024-07-15T12:28:16.733Z'}
            - {data: {driverNumber: {value: 2}, workingState: {value: resting}}, timestamp: '2024-07-15T12:28:16.733Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, workingState: {type: string, enum: [driver_available, driving, resting, working]}}
    tachograph.driversWorkingStates.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, workingState: {type: string, enum: [driver_available, driving, resting, working]}}
    tachograph.vehicleDirection:
        example:
            data: {value: forward}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - forward
            - reverse
    tachograph.vehicleDirection.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - forward
            - reverse
    tachograph.vehicleMotion:
        example:
            data: {value: detected}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - detected
            - not_detected
    tachograph.vehicleMotion.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - detected
            - not_detected
    tachograph.vehicleOverspeed:
        example:
            data: {value: no_overspeed}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - no_overspeed
            - overspeed
    tachograph.vehicleOverspeed.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - no_overspeed
            - overspeed
    tachograph.vehicleSpeed:
        description: 'The tachograph vehicle speed'
        example:
            data: {value: 80, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.733Z'
    tachograph.vehicleSpeed.availability:
        description: 'The tachograph vehicle speed'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    tachograph:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            driversCardsPresent: {$ref: '#/definitions/tachograph.driversCardsPresent'}
            driversTimeStates: {$ref: '#/definitions/tachograph.driversTimeStates'}
            driversWorkingStates: {$ref: '#/definitions/tachograph.driversWorkingStates'}
            vehicleDirection: {$ref: '#/definitions/tachograph.vehicleDirection'}
            vehicleMotion: {$ref: '#/definitions/tachograph.vehicleMotion'}
            vehicleOverspeed: {$ref: '#/definitions/tachograph.vehicleOverspeed'}
            vehicleSpeed: {$ref: '#/definitions/tachograph.vehicleSpeed'}
    tachograph.availability:
        type: object
        properties:
            driversCardsPresent: {$ref: '#/definitions/tachograph.driversCardsPresent.availability'}
            driversTimeStates: {$ref: '#/definitions/tachograph.driversTimeStates.availability'}
            driversWorkingStates: {$ref: '#/definitions/tachograph.driversWorkingStates.availability'}
            vehicleDirection: {$ref: '#/definitions/tachograph.vehicleDirection.availability'}
            vehicleMotion: {$ref: '#/definitions/tachograph.vehicleMotion.availability'}
            vehicleOverspeed: {$ref: '#/definitions/tachograph.vehicleOverspeed.availability'}
            vehicleSpeed: {$ref: '#/definitions/tachograph.vehicleSpeed.availability'}
    textInput.text:
        description: 'The text'
        example:
            data: {value: 'Rendezvous with Rama'}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
    textInput.text.availability:
        description: 'The text'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    theftAlarm.eventType:
        description: 'Position of the last even relative to the vehicle'
        example:
            data: {value: rear_right}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - front_left
            - front_middle
            - front_right
            - idle
            - left
            - rear_left
            - rear_middle
            - rear_right
            - right
            - unknown
    theftAlarm.eventType.availability:
        description: 'Position of the last even relative to the vehicle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - front_left
            - front_middle
            - front_right
            - idle
            - left
            - rear_left
            - rear_middle
            - rear_right
            - right
            - unknown
    theftAlarm.interiorProtectionStatus:
        description: 'Interior protection sensor status'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - active
            - inactive_not_selected
            - inactive_selected
    theftAlarm.interiorProtectionStatus.availability:
        description: 'Interior protection sensor status'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive_not_selected
            - inactive_selected
    theftAlarm.interiorProtectionTriggered:
        description: 'Indicates whether the interior protection sensors are triggered.'
        example:
            data: {value: not_triggered}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - not_triggered
            - triggered
    theftAlarm.interiorProtectionTriggered.availability:
        description: 'Indicates whether the interior protection sensors are triggered.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - not_triggered
            - triggered
    theftAlarm.lastEvent:
        description: 'Last event happening date'
        example:
            data: {value: '2020-06-16T11:10:02.000Z'}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        format: date-time
    theftAlarm.lastEvent.availability:
        description: 'Last event happening date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    theftAlarm.lastEventLevel:
        description: 'Level of impact for the last event'
        example:
            data: {value: low}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - high
            - low
            - medium
    theftAlarm.lastEventLevel.availability:
        description: 'Level of impact for the last event'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - high
            - low
            - medium
    theftAlarm.lastWarningReason:
        example:
            data: {value: hood}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - basic_alarm
            - center_box
            - common_alm_in
            - door_front_left
            - door_front_right
            - door_rear_left
            - door_rear_right
            - glovebox
            - hold_com
            - hood
            - horn
            - its
            - its_slv
            - no_alarm
            - panic
            - rear_box
            - remote
            - sensor_vta
            - siren
            - tps
            - trunk
            - unknown
    theftAlarm.lastWarningReason.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - basic_alarm
            - center_box
            - common_alm_in
            - door_front_left
            - door_front_right
            - door_rear_left
            - door_rear_right
            - glovebox
            - hold_com
            - hood
            - horn
            - its
            - its_slv
            - no_alarm
            - panic
            - rear_box
            - remote
            - sensor_vta
            - siren
            - tps
            - trunk
            - unknown
    theftAlarm.status:
        example:
            data: {value: armed}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - armed
            - triggered
            - unarmed
    theftAlarm.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - armed
            - triggered
            - unarmed
    theftAlarm.towProtectionStatus:
        description: 'Tow protection sensor status'
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - active
            - inactive_not_selected
            - inactive_selected
    theftAlarm.towProtectionStatus.availability:
        description: 'Tow protection sensor status'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive_not_selected
            - inactive_selected
    theftAlarm.towProtectionTriggered:
        description: 'Indicates whether the tow protection sensors are triggered.'
        example:
            data: {value: not_triggered}
            timestamp: '2024-07-15T12:28:16.733Z'
        type: string
        enum:
            - not_triggered
            - triggered
    theftAlarm.towProtectionTriggered.availability:
        description: 'Indicates whether the tow protection sensors are triggered.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - not_triggered
            - triggered
    theftAlarm:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            eventType: {$ref: '#/definitions/theftAlarm.eventType'}
            interiorProtectionStatus: {$ref: '#/definitions/theftAlarm.interiorProtectionStatus'}
            interiorProtectionTriggered: {$ref: '#/definitions/theftAlarm.interiorProtectionTriggered'}
            lastEvent: {$ref: '#/definitions/theftAlarm.lastEvent'}
            lastEventLevel: {$ref: '#/definitions/theftAlarm.lastEventLevel'}
            lastWarningReason: {$ref: '#/definitions/theftAlarm.lastWarningReason'}
            status: {$ref: '#/definitions/theftAlarm.status'}
            towProtectionStatus: {$ref: '#/definitions/theftAlarm.towProtectionStatus'}
            towProtectionTriggered: {$ref: '#/definitions/theftAlarm.towProtectionTriggered'}
    theftAlarm.availability:
        type: object
        properties:
            eventType: {$ref: '#/definitions/theftAlarm.eventType.availability'}
            interiorProtectionStatus: {$ref: '#/definitions/theftAlarm.interiorProtectionStatus.availability'}
            interiorProtectionTriggered: {$ref: '#/definitions/theftAlarm.interiorProtectionTriggered.availability'}
            lastEvent: {$ref: '#/definitions/theftAlarm.lastEvent.availability'}
            lastEventLevel: {$ref: '#/definitions/theftAlarm.lastEventLevel.availability'}
            lastWarningReason: {$ref: '#/definitions/theftAlarm.lastWarningReason.availability'}
            status: {$ref: '#/definitions/theftAlarm.status.availability'}
            towProtectionStatus: {$ref: '#/definitions/theftAlarm.towProtectionStatus.availability'}
            towProtectionTriggered: {$ref: '#/definitions/theftAlarm.towProtectionTriggered.availability'}
    trips.averageFuelConsumption:
        description: 'Average fuel consumption during the trip'
        example:
            data: {value: 7.34, unit: liters_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.averageFuelConsumption.availability:
        description: 'Average fuel consumption during the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.brakingCount:
        description: 'Number of times the brakes were applied during the trip.'
        example:
            data: {value: 161}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: number
        format: integer
    trips.brakingCount.availability:
        description: 'Number of times the brakes were applied during the trip.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: integer
    trips.description:
        description: 'Description of the trip'
        example:
            data: {value: 'To save humankind'}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
    trips.description.availability:
        description: 'Description of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    trips.distance:
        description: 'Distance of the trip'
        example:
            data: {value: 43, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.distance.availability:
        description: 'Distance of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.driverName:
        description: 'Name of the driver of the trip'
        example:
            data: {value: 'Hari Seldon'}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
    trips.driverName.availability:
        description: 'Name of the driver of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    trips.duration:
        description: 'Duration of the trip'
        example:
            data: {value: 123, unit: minutes}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.duration.availability:
        description: 'Duration of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.ecoLevel:
        example:
            data: {value: high}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
        enum:
            - high
            - medium
    trips.ecoLevel.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - high
            - medium
    trips.endAddress:
        description: 'End address of the trip'
        example:
            data: {value: 'Skalitzer Straße 68, 10997 Berlin, Germany'}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
    trips.endAddress.availability:
        description: 'End address of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    trips.endAddressComponents:
        description: 'End address components'
        example:
            - {data: {type: {value: city}, value: {value: Berlin}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: country}, value: {value: Germany}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: country_short}, value: {value: DE}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: district}, value: {value: Berlin}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: postal_code}, value: {value: '10117'}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: street}, value: {value: 'Skalitzer Straße 68'}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: state_province}, value: {value: Brandenburg}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: other}, value: {value: Germany}}, timestamp: '2024-07-15T12:28:16.734Z'}
        type: array
        items:
            type: object
            properties: {type: {description: 'Component type', type: string, enum: [city, country, country_short, district, other, postal_code, state_province, street]}, value: {description: 'Value for the component', type: string}}
    trips.endAddressComponents.availability:
        description: 'End address components'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {type: {description: 'Component type', type: string, enum: [city, country, country_short, district, other, postal_code, state_province, street]}, value: {description: 'Value for the component', type: string}}
    trips.endCoordinates:
        description: 'End coordinates of the trip'
        example:
            data: {latitude: {value: 52.500276}, longitude: {value: 13.439719}}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    trips.endCoordinates.availability:
        description: 'End coordinates of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    trips.endOdometer:
        description: 'Odometer reading at the end of the trip'
        example:
            data: {value: 10543, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.endOdometer.availability:
        description: 'Odometer reading at the end of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.endTime:
        description: 'End time of the trip'
        example:
            data: {value: '2020-06-19T13:12:10.000Z'}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
        format: date-time
    trips.endTime.availability:
        description: 'End time of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    trips.event:
        example:
            data: {value: harsh_acceleration}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
        enum:
            - emergency_braking
            - harsh_acceleration
            - harsh_braking
            - idling_engine_on
            - over_rpm
            - overspeed
            - sharp_turn
    trips.event.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - emergency_braking
            - harsh_acceleration
            - harsh_braking
            - idling_engine_on
            - over_rpm
            - overspeed
            - sharp_turn
    trips.id:
        description: 'ID of the trip'
        example:
            data: {value: 123abc}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
    trips.id.availability:
        description: 'ID of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    trips.maximumSpeed:
        description: 'Maximum speed recorded since the last igntion on.'
        example:
            data: {value: 67.3, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.maximumSpeed.availability:
        description: 'Maximum speed recorded since the last igntion on.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.roadType:
        description: 'Type of road travelled on.'
        example:
            data: {value: local}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
        enum:
            - country
            - county
            - federal_highway
            - highway
            - local
            - national
            - private_or_gravel
            - rural
    trips.roadType.availability:
        description: 'Type of road travelled on.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - country
            - county
            - federal_highway
            - highway
            - local
            - national
            - private_or_gravel
            - rural
    trips.startAddress:
        description: 'Start address of the trip'
        example:
            data: {value: 'Skalitzer Straße 68, 10997 Berlin, Germany'}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
    trips.startAddress.availability:
        description: 'Start address of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    trips.startAddressComponents:
        description: 'Start address components'
        example:
            - {data: {type: {value: city}, value: {value: Berlin}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: country}, value: {value: Germany}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: country_short}, value: {value: DE}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: district}, value: {value: Berlin}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: postal_code}, value: {value: '10117'}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: street}, value: {value: 'Skalitzer Straße 68'}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: state_province}, value: {value: Brandenburg}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: other}, value: {value: Germany}}, timestamp: '2024-07-15T12:28:16.734Z'}
        type: array
        items:
            type: object
            properties: {type: {description: 'Component type', type: string, enum: [city, country, country_short, district, other, postal_code, state_province, street]}, value: {description: 'Value for the component', type: string}}
    trips.startAddressComponents.availability:
        description: 'Start address components'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {type: {description: 'Component type', type: string, enum: [city, country, country_short, district, other, postal_code, state_province, street]}, value: {description: 'Value for the component', type: string}}
    trips.startCoordinates:
        description: 'Start coordinates of the trip'
        example:
            data: {latitude: {value: 52.500276}, longitude: {value: 13.439719}}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    trips.startCoordinates.availability:
        description: 'Start coordinates of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    trips.startOdometer:
        description: 'Odometer reading at the start of the trip'
        example:
            data: {value: 10500, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.startOdometer.availability:
        description: 'Odometer reading at the start of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.startTime:
        description: 'Start time of the trip'
        example:
            data: {value: '2020-06-19T12:12:10.000Z'}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
        format: date-time
    trips.startTime.availability:
        description: 'Start time of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    trips.thresholds:
        description: 'Eco driving thresholds'
        example:
            - {data: {type: {value: zero}, value: {value: 0}}, timestamp: '2024-07-15T12:28:16.734Z'}
            - {data: {type: {value: one}, value: {value: 0}}, timestamp: '2024-07-15T12:28:16.734Z'}
        type: array
        items:
            type: object
            properties: {type: {type: string, enum: [one, zero]}, value: {type: number, format: double}}
    trips.thresholds.availability:
        description: 'Eco driving thresholds'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {type: {type: string, enum: [one, zero]}, value: {type: number, format: double}}
    trips.totalFuelConsumption:
        description: 'Total fuel consumption during the trip'
        example:
            data: {value: 23.4, unit: liters}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.totalFuelConsumption.availability:
        description: 'Total fuel consumption during the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.totalIdleFuelConsumption:
        description: 'Fuel consumed while idle since the last ignition on.'
        example:
            data: {value: 2.5, unit: liters}
            timestamp: '2024-07-15T12:28:16.734Z'
    trips.totalIdleFuelConsumption.availability:
        description: 'Fuel consumed while idle since the last ignition on.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    trips.type:
        description: 'Type of the trip'
        example:
            data: {value: single}
            timestamp: '2024-07-15T12:28:16.734Z'
        type: string
        enum:
            - eco
            - multi
            - single
    trips.type.availability:
        description: 'Type of the trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - eco
            - multi
            - single
    trips:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            averageFuelConsumption: {$ref: '#/definitions/trips.averageFuelConsumption'}
            brakingCount: {$ref: '#/definitions/trips.brakingCount'}
            description: {$ref: '#/definitions/trips.description'}
            distance: {$ref: '#/definitions/trips.distance'}
            driverName: {$ref: '#/definitions/trips.driverName'}
            duration: {$ref: '#/definitions/trips.duration'}
            ecoLevel: {$ref: '#/definitions/trips.ecoLevel'}
            endAddress: {$ref: '#/definitions/trips.endAddress'}
            endAddressComponents: {$ref: '#/definitions/trips.endAddressComponents'}
            endCoordinates: {$ref: '#/definitions/trips.endCoordinates'}
            endOdometer: {$ref: '#/definitions/trips.endOdometer'}
            endTime: {$ref: '#/definitions/trips.endTime'}
            event: {$ref: '#/definitions/trips.event'}
            id: {$ref: '#/definitions/trips.id'}
            maximumSpeed: {$ref: '#/definitions/trips.maximumSpeed'}
            roadType: {$ref: '#/definitions/trips.roadType'}
            startAddress: {$ref: '#/definitions/trips.startAddress'}
            startAddressComponents: {$ref: '#/definitions/trips.startAddressComponents'}
            startCoordinates: {$ref: '#/definitions/trips.startCoordinates'}
            startOdometer: {$ref: '#/definitions/trips.startOdometer'}
            startTime: {$ref: '#/definitions/trips.startTime'}
            thresholds: {$ref: '#/definitions/trips.thresholds'}
            totalFuelConsumption: {$ref: '#/definitions/trips.totalFuelConsumption'}
            totalIdleFuelConsumption: {$ref: '#/definitions/trips.totalIdleFuelConsumption'}
            type: {$ref: '#/definitions/trips.type'}
    trips.availability:
        type: object
        properties:
            averageFuelConsumption: {$ref: '#/definitions/trips.averageFuelConsumption.availability'}
            brakingCount: {$ref: '#/definitions/trips.brakingCount.availability'}
            description: {$ref: '#/definitions/trips.description.availability'}
            distance: {$ref: '#/definitions/trips.distance.availability'}
            driverName: {$ref: '#/definitions/trips.driverName.availability'}
            duration: {$ref: '#/definitions/trips.duration.availability'}
            ecoLevel: {$ref: '#/definitions/trips.ecoLevel.availability'}
            endAddress: {$ref: '#/definitions/trips.endAddress.availability'}
            endAddressComponents: {$ref: '#/definitions/trips.endAddressComponents.availability'}
            endCoordinates: {$ref: '#/definitions/trips.endCoordinates.availability'}
            endOdometer: {$ref: '#/definitions/trips.endOdometer.availability'}
            endTime: {$ref: '#/definitions/trips.endTime.availability'}
            event: {$ref: '#/definitions/trips.event.availability'}
            id: {$ref: '#/definitions/trips.id.availability'}
            maximumSpeed: {$ref: '#/definitions/trips.maximumSpeed.availability'}
            roadType: {$ref: '#/definitions/trips.roadType.availability'}
            startAddress: {$ref: '#/definitions/trips.startAddress.availability'}
            startAddressComponents: {$ref: '#/definitions/trips.startAddressComponents.availability'}
            startCoordinates: {$ref: '#/definitions/trips.startCoordinates.availability'}
            startOdometer: {$ref: '#/definitions/trips.startOdometer.availability'}
            startTime: {$ref: '#/definitions/trips.startTime.availability'}
            thresholds: {$ref: '#/definitions/trips.thresholds.availability'}
            totalFuelConsumption: {$ref: '#/definitions/trips.totalFuelConsumption.availability'}
            totalIdleFuelConsumption: {$ref: '#/definitions/trips.totalIdleFuelConsumption.availability'}
            type: {$ref: '#/definitions/trips.type.availability'}
    trunk.lock:
        example:
            data: {value: unlocked}
            timestamp: '2024-07-15T12:28:16.735Z'
        type: string
        enum:
            - locked
            - unlocked
    trunk.lock.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - locked
            - unlocked
    trunk.lockSafety:
        description: 'Indicates the safe-state of the trunk.'
        example:
            data: {value: safe}
            timestamp: '2024-07-15T12:28:16.735Z'
        type: string
        enum:
            - safe
            - unsafe
    trunk.lockSafety.availability:
        description: 'Indicates the safe-state of the trunk.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - safe
            - unsafe
    trunk.position:
        example:
            data: {value: open}
            timestamp: '2024-07-15T12:28:16.735Z'
        type: string
        enum:
            - closed
            - open
    trunk.position.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - closed
            - open
    trunk:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            lock: {$ref: '#/definitions/trunk.lock'}
            lockSafety: {$ref: '#/definitions/trunk.lockSafety'}
            position: {$ref: '#/definitions/trunk.position'}
    trunk.availability:
        type: object
        properties:
            lock: {$ref: '#/definitions/trunk.lock.availability'}
            lockSafety: {$ref: '#/definitions/trunk.lockSafety.availability'}
            position: {$ref: '#/definitions/trunk.position.availability'}
    usage.accelerationDurations:
        description: 'Durations of normal or other accelerations.'
        example:
            - {data: {direction: {value: longitudinal}, type: {value: regular}, duration: {value: 1234, unit: milliseconds}}, timestamp: '2024-07-15T12:28:16.735Z'}
            - {data: {direction: {value: lateral}, type: {value: positive_outlier}, duration: {value: 1234, unit: milliseconds}}, timestamp: '2024-07-15T12:28:16.735Z'}
        type: array
        items:
            type: object
            properties: {direction: {type: string, enum: [lateral, longitudinal]}, type: {type: string, enum: [negative_outlier, positive_outlier, regular]}, duration: {description: 'The duration of the acceleration'}}
    usage.accelerationDurations.availability:
        description: 'Durations of normal or other accelerations.'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {direction: {type: string, enum: [lateral, longitudinal]}, type: {type: string, enum: [negative_outlier, positive_outlier, regular]}, duration: {description: 'The duration of the acceleration'}}
    usage.accelerationEvaluation:
        description: 'Acceleration evaluation percentage'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.735Z'
        type: number
        format: double
    usage.accelerationEvaluation.availability:
        description: 'Acceleration evaluation percentage'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.averageFuelConsumption:
        description: 'Average fuel consumption for current trip'
        example:
            data: {value: 6.5, unit: liters_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.averageFuelConsumption.availability:
        description: 'Average fuel consumption for current trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.averageSpeed:
        description: 'Average speed at data collection.'
        example:
            data: {value: 77.5, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.averageSpeed.availability:
        description: 'Average speed at data collection.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.averageSpeedLastTrip:
        description: 'Average speed during last trip'
        example:
            data: {value: 44.2, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.averageSpeedLastTrip.availability:
        description: 'Average speed during last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.averageSpeedSinceReset:
        description: 'Average speed since reset'
        example:
            data: {value: 44.2, unit: kilometers_per_hour}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.averageSpeedSinceReset.availability:
        description: 'Average speed since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.averageWeeklyDistance:
        description: 'Average weekly distance'
        example:
            data: {value: 666.6, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.averageWeeklyDistance.availability:
        description: 'Average weekly distance'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.averageWeeklyDistanceLongRun:
        description: 'Average weekyl distance over long term'
        example:
            data: {value: 777.7, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.averageWeeklyDistanceLongRun.availability:
        description: 'Average weekyl distance over long term'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.brakingEvaluation:
        description: 'Braking evaluation percentage'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.735Z'
        type: number
        format: double
    usage.brakingEvaluation.availability:
        description: 'Braking evaluation percentage'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.currentFuelConsumption:
        description: 'Current fuel consumption'
        example:
            data: {value: 7.5, unit: liters_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.currentFuelConsumption.availability:
        description: 'Current fuel consumption'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.distanceOverTime:
        description: 'Distance driven over a given time period'
        example:
            data: {distance: {value: 1500.88, unit: kilometers}, time: {value: 10, unit: weeks}}
            timestamp: '2024-07-15T12:28:16.735Z'
        type: object
        properties:
            distance: {description: 'Distance driven'}
            time: {description: 'Duration of time for the given distance'}
    usage.distanceOverTime.availability:
        description: 'Distance driven over a given time period'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            distance: {description: 'Distance driven'}
            time: {description: 'Duration of time for the given distance'}
    usage.drivingDurationLastTrip:
        description: 'Duration of last trip'
        example:
            data: {value: 77, unit: minutes}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.drivingDurationLastTrip.availability:
        description: 'Duration of last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.drivingDurationSinceReset:
        description: 'Duration of travelling since reset'
        example:
            data: {value: 88, unit: minutes}
            timestamp: '2024-07-15T12:28:16.735Z'
    usage.drivingDurationSinceReset.availability:
        description: 'Duration of travelling since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.drivingModesActivationPeriods:
        example:
            - {data: {drivingMode: {value: regular}, period: {value: 0.2}}, timestamp: '2024-07-15T12:28:16.735Z'}
            - {data: {drivingMode: {value: eco}, period: {value: 0.3}}, timestamp: '2024-07-15T12:28:16.735Z'}
            - {data: {drivingMode: {value: sport}, period: {value: 0.1}}, timestamp: '2024-07-15T12:28:16.735Z'}
            - {data: {drivingMode: {value: sport_plus}, period: {value: 0.1}}, timestamp: '2024-07-15T12:28:16.735Z'}
            - {data: {drivingMode: {value: eco_plus}, period: {value: 0.3}}, timestamp: '2024-07-15T12:28:16.735Z'}
            - {data: {drivingMode: {value: comfort}, period: {value: 0}}, timestamp: '2024-07-15T12:28:16.735Z'}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [comfort, eco, eco_plus, regular, sport, sport_plus]}, period: {description: 'Percentage of the period used for a driving mode', type: number, format: double}}
    usage.drivingModesActivationPeriods.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [comfort, eco, eco_plus, regular, sport, sport_plus]}, period: {description: 'Percentage of the period used for a driving mode', type: number, format: double}}
    usage.drivingModesEnergyConsumptions:
        example:
            - {data: {drivingMode: {value: regular}, consumption: {value: 20.2, unit: kilowatt_hours}}, timestamp: '2024-07-15T12:28:16.736Z'}
            - {data: {drivingMode: {value: eco}, consumption: {value: 33.2, unit: kilowatt_hours}}, timestamp: '2024-07-15T12:28:16.736Z'}
            - {data: {drivingMode: {value: sport}, consumption: {value: 54.3, unit: kilowatt_hours}}, timestamp: '2024-07-15T12:28:16.736Z'}
            - {data: {drivingMode: {value: sport_plus}, consumption: {value: 64.8, unit: kilowatt_hours}}, timestamp: '2024-07-15T12:28:16.736Z'}
            - {data: {drivingMode: {value: eco_plus}, consumption: {value: 18, unit: kilowatt_hours}}, timestamp: '2024-07-15T12:28:16.736Z'}
            - {data: {drivingMode: {value: comfort}, consumption: {value: 33.7, unit: kilowatt_hours}}, timestamp: '2024-07-15T12:28:16.736Z'}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [comfort, eco, eco_plus, regular, sport, sport_plus]}, consumption: {description: 'Energy consumption in the driving mode'}}
    usage.drivingModesEnergyConsumptions.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [comfort, eco, eco_plus, regular, sport, sport_plus]}, consumption: {description: 'Energy consumption in the driving mode'}}
    usage.drivingStyleEvaluation:
        description: 'Driving style evaluation percentage'
        example:
            data: {value: 0.88}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.drivingStyleEvaluation.availability:
        description: 'Driving style evaluation percentage'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.ecoScoreBonusRange:
        description: 'Eco-score bonus range'
        example:
            data: {value: 0.7, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.ecoScoreBonusRange.availability:
        description: 'Eco-score bonus range'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.ecoScoreConstant:
        description: 'Eco-score rating constant'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.ecoScoreConstant.availability:
        description: 'Eco-score rating constant'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.ecoScoreFreeWheel:
        description: 'Eco-score rating for free-wheeling'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.ecoScoreFreeWheel.availability:
        description: 'Eco-score rating for free-wheeling'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.ecoScoreTotal:
        description: 'Overall eco-score rating'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.ecoScoreTotal.availability:
        description: 'Overall eco-score rating'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.electricConsumptionAverage:
        description: 'Average electric energy consumption calculated based on the last 20km'
        example:
            data: {value: 11.22, unit: kwh_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricConsumptionAverage.availability:
        description: 'Average electric energy consumption calculated based on the last 20km'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.electricConsumptionRateSinceReset:
        description: 'Electric energy consumption rate since a reset'
        example:
            data: {value: 22.33, unit: kwh_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricConsumptionRateSinceReset.availability:
        description: 'Electric energy consumption rate since a reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.electricConsumptionRateSinceStart:
        description: 'Electric energy consumption rate since the start of a trip'
        example:
            data: {value: 11.22, unit: kwh_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricConsumptionRateSinceStart.availability:
        description: 'Electric energy consumption rate since the start of a trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.electricDistanceLastTrip:
        description: 'Distance travelled with electricity in last trip'
        example:
            data: {value: 111000, unit: meters}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricDistanceLastTrip.availability:
        description: 'Distance travelled with electricity in last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.electricDistanceSinceReset:
        description: 'Distance travelled with electricity since reset'
        example:
            data: {value: 222000, unit: meters}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricDistanceSinceReset.availability:
        description: 'Distance travelled with electricity since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.electricDurationLastTrip:
        description: 'Duration of travelling using electricity during last trip'
        example:
            data: {value: 77, unit: minutes}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricDurationLastTrip.availability:
        description: 'Duration of travelling using electricity during last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.electricDurationSinceReset:
        description: 'Duration of travelling using electricity since reset'
        example:
            data: {value: 88, unit: minutes}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.electricDurationSinceReset.availability:
        description: 'Duration of travelling using electricity since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.fuelConsumptionRateLastTrip:
        description: 'Liquid fuel consumption rate during last trip'
        example:
            data: {value: 5.4, unit: liters_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.fuelConsumptionRateLastTrip.availability:
        description: 'Liquid fuel consumption rate during last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.fuelConsumptionRateSinceReset:
        description: 'Liquid fuel consumption rate since reset'
        example:
            data: {value: 5.3, unit: liters_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.fuelConsumptionRateSinceReset.availability:
        description: 'Liquid fuel consumption rate since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.fuelDistanceLastTrip:
        description: 'Distance travelled with (liquid) fuel during last trip'
        example:
            data: {value: 111000, unit: meters}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.fuelDistanceLastTrip.availability:
        description: 'Distance travelled with (liquid) fuel during last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.fuelDistanceSinceReset:
        description: 'Distance travelled with (liquid) fuel since reset'
        example:
            data: {value: 222000, unit: meters}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.fuelDistanceSinceReset.availability:
        description: 'Distance travelled with (liquid) fuel since reset'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.lastTripAverageEnergyRecuperation:
        description: 'Energy recuperation rate for last trip'
        example:
            data: {value: 5.68, unit: kwh_per_100_kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.lastTripAverageEnergyRecuperation.availability:
        description: 'Energy recuperation rate for last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.lastTripBatteryRegenerated:
        description: 'Estimated electrical charge (in %) that was recovered through regeneration during a trip.'
        example:
            data: {value: 0.14}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.lastTripBatteryRegenerated.availability:
        description: 'Estimated electrical charge (in %) that was recovered through regeneration during a trip.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.lastTripBatteryRemaining:
        description: 'Battery % remaining after last trip'
        example:
            data: {value: 0.5}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.lastTripBatteryRemaining.availability:
        description: 'Battery % remaining after last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.lastTripDate:
        description: 'The last trip date'
        example:
            data: {value: '2018-10-17T12:34:58.000Z'}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: string
        format: date-time
    usage.lastTripDate.availability:
        description: 'The last trip date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    usage.lastTripElectricPortion:
        description: 'Portion of the last trip used in electric mode'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.lastTripElectricPortion.availability:
        description: 'Portion of the last trip used in electric mode'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.lastTripEnergyConsumption:
        description: 'Energy consumption in the last trip'
        example:
            data: {value: 101.3, unit: kilowatt_hours}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.lastTripEnergyConsumption.availability:
        description: 'Energy consumption in the last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.lastTripFuelConsumption:
        description: 'Fuel consumption in the last trip'
        example:
            data: {value: 22.5, unit: liters}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.lastTripFuelConsumption.availability:
        description: 'Fuel consumption in the last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.lateNightGrade:
        description: 'Grade given for late night driving over time'
        example:
            data: {value: excellent}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.lateNightGrade.availability:
        description: 'Grade given for late night driving over time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.odometerAfterLastTrip:
        description: 'Odometer after the last trip'
        example:
            data: {value: 95632, unit: kilometers}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.odometerAfterLastTrip.availability:
        description: 'Odometer after the last trip'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.rapidAccelerationGrade:
        description: 'Grade given for rapid acceleration over time'
        example:
            data: {value: excellent}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.rapidAccelerationGrade.availability:
        description: 'Grade given for rapid acceleration over time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.rapidDecelerationGrade:
        description: 'Grade given for rapid deceleration over time'
        example:
            data: {value: normal}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.rapidDecelerationGrade.availability:
        description: 'Grade given for rapid deceleration over time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.recuperationPower:
        description: 'Recuperation energy of the drivetrain.'
        example:
            data: {value: 2300, unit: watts}
            timestamp: '2024-07-15T12:28:16.736Z'
    usage.recuperationPower.availability:
        description: 'Recuperation energy of the drivetrain.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    usage.safetyDrivingScore:
        description: 'Safety driving score as percentage'
        example:
            data: {value: 0.7}
            timestamp: '2024-07-15T12:28:16.736Z'
        type: number
        format: double
    usage.safetyDrivingScore.availability:
        description: 'Safety driving score as percentage'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    usage.tripMeters:
        description: 'Independent meter that can be reset at any time by the driver'
        example:
            - {data: {id: {value: 1}, distance: {value: 456.2, unit: kilometers}}, timestamp: '2024-07-15T12:28:16.736Z'}
            - {data: {id: {value: 2}, distance: {value: 2489.3, unit: kilometers}}, timestamp: '2024-07-15T12:28:16.736Z'}
        type: array
        items:
            type: object
            properties: {id: {type: number, format: integer}, distance: {}}
    usage.tripMeters.availability:
        description: 'Independent meter that can be reset at any time by the driver'
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {id: {type: number, format: integer}, distance: {}}
    usage:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            accelerationDurations: {$ref: '#/definitions/usage.accelerationDurations'}
            accelerationEvaluation: {$ref: '#/definitions/usage.accelerationEvaluation'}
            averageFuelConsumption: {$ref: '#/definitions/usage.averageFuelConsumption'}
            averageSpeed: {$ref: '#/definitions/usage.averageSpeed'}
            averageSpeedLastTrip: {$ref: '#/definitions/usage.averageSpeedLastTrip'}
            averageSpeedSinceReset: {$ref: '#/definitions/usage.averageSpeedSinceReset'}
            averageWeeklyDistance: {$ref: '#/definitions/usage.averageWeeklyDistance'}
            averageWeeklyDistanceLongRun: {$ref: '#/definitions/usage.averageWeeklyDistanceLongRun'}
            brakingEvaluation: {$ref: '#/definitions/usage.brakingEvaluation'}
            currentFuelConsumption: {$ref: '#/definitions/usage.currentFuelConsumption'}
            distanceOverTime: {$ref: '#/definitions/usage.distanceOverTime'}
            drivingDurationLastTrip: {$ref: '#/definitions/usage.drivingDurationLastTrip'}
            drivingDurationSinceReset: {$ref: '#/definitions/usage.drivingDurationSinceReset'}
            drivingModesActivationPeriods: {$ref: '#/definitions/usage.drivingModesActivationPeriods'}
            drivingModesEnergyConsumptions: {$ref: '#/definitions/usage.drivingModesEnergyConsumptions'}
            drivingStyleEvaluation: {$ref: '#/definitions/usage.drivingStyleEvaluation'}
            ecoScoreBonusRange: {$ref: '#/definitions/usage.ecoScoreBonusRange'}
            ecoScoreConstant: {$ref: '#/definitions/usage.ecoScoreConstant'}
            ecoScoreFreeWheel: {$ref: '#/definitions/usage.ecoScoreFreeWheel'}
            ecoScoreTotal: {$ref: '#/definitions/usage.ecoScoreTotal'}
            electricConsumptionAverage: {$ref: '#/definitions/usage.electricConsumptionAverage'}
            electricConsumptionRateSinceReset: {$ref: '#/definitions/usage.electricConsumptionRateSinceReset'}
            electricConsumptionRateSinceStart: {$ref: '#/definitions/usage.electricConsumptionRateSinceStart'}
            electricDistanceLastTrip: {$ref: '#/definitions/usage.electricDistanceLastTrip'}
            electricDistanceSinceReset: {$ref: '#/definitions/usage.electricDistanceSinceReset'}
            electricDurationLastTrip: {$ref: '#/definitions/usage.electricDurationLastTrip'}
            electricDurationSinceReset: {$ref: '#/definitions/usage.electricDurationSinceReset'}
            fuelConsumptionRateLastTrip: {$ref: '#/definitions/usage.fuelConsumptionRateLastTrip'}
            fuelConsumptionRateSinceReset: {$ref: '#/definitions/usage.fuelConsumptionRateSinceReset'}
            fuelDistanceLastTrip: {$ref: '#/definitions/usage.fuelDistanceLastTrip'}
            fuelDistanceSinceReset: {$ref: '#/definitions/usage.fuelDistanceSinceReset'}
            lastTripAverageEnergyRecuperation: {$ref: '#/definitions/usage.lastTripAverageEnergyRecuperation'}
            lastTripBatteryRegenerated: {$ref: '#/definitions/usage.lastTripBatteryRegenerated'}
            lastTripBatteryRemaining: {$ref: '#/definitions/usage.lastTripBatteryRemaining'}
            lastTripDate: {$ref: '#/definitions/usage.lastTripDate'}
            lastTripElectricPortion: {$ref: '#/definitions/usage.lastTripElectricPortion'}
            lastTripEnergyConsumption: {$ref: '#/definitions/usage.lastTripEnergyConsumption'}
            lastTripFuelConsumption: {$ref: '#/definitions/usage.lastTripFuelConsumption'}
            lateNightGrade: {$ref: '#/definitions/usage.lateNightGrade'}
            odometerAfterLastTrip: {$ref: '#/definitions/usage.odometerAfterLastTrip'}
            rapidAccelerationGrade: {$ref: '#/definitions/usage.rapidAccelerationGrade'}
            rapidDecelerationGrade: {$ref: '#/definitions/usage.rapidDecelerationGrade'}
            recuperationPower: {$ref: '#/definitions/usage.recuperationPower'}
            safetyDrivingScore: {$ref: '#/definitions/usage.safetyDrivingScore'}
            tripMeters: {$ref: '#/definitions/usage.tripMeters'}
    usage.availability:
        type: object
        properties:
            accelerationDurations: {$ref: '#/definitions/usage.accelerationDurations.availability'}
            accelerationEvaluation: {$ref: '#/definitions/usage.accelerationEvaluation.availability'}
            averageFuelConsumption: {$ref: '#/definitions/usage.averageFuelConsumption.availability'}
            averageSpeed: {$ref: '#/definitions/usage.averageSpeed.availability'}
            averageSpeedLastTrip: {$ref: '#/definitions/usage.averageSpeedLastTrip.availability'}
            averageSpeedSinceReset: {$ref: '#/definitions/usage.averageSpeedSinceReset.availability'}
            averageWeeklyDistance: {$ref: '#/definitions/usage.averageWeeklyDistance.availability'}
            averageWeeklyDistanceLongRun: {$ref: '#/definitions/usage.averageWeeklyDistanceLongRun.availability'}
            brakingEvaluation: {$ref: '#/definitions/usage.brakingEvaluation.availability'}
            currentFuelConsumption: {$ref: '#/definitions/usage.currentFuelConsumption.availability'}
            distanceOverTime: {$ref: '#/definitions/usage.distanceOverTime.availability'}
            drivingDurationLastTrip: {$ref: '#/definitions/usage.drivingDurationLastTrip.availability'}
            drivingDurationSinceReset: {$ref: '#/definitions/usage.drivingDurationSinceReset.availability'}
            drivingModesActivationPeriods: {$ref: '#/definitions/usage.drivingModesActivationPeriods.availability'}
            drivingModesEnergyConsumptions: {$ref: '#/definitions/usage.drivingModesEnergyConsumptions.availability'}
            drivingStyleEvaluation: {$ref: '#/definitions/usage.drivingStyleEvaluation.availability'}
            ecoScoreBonusRange: {$ref: '#/definitions/usage.ecoScoreBonusRange.availability'}
            ecoScoreConstant: {$ref: '#/definitions/usage.ecoScoreConstant.availability'}
            ecoScoreFreeWheel: {$ref: '#/definitions/usage.ecoScoreFreeWheel.availability'}
            ecoScoreTotal: {$ref: '#/definitions/usage.ecoScoreTotal.availability'}
            electricConsumptionAverage: {$ref: '#/definitions/usage.electricConsumptionAverage.availability'}
            electricConsumptionRateSinceReset: {$ref: '#/definitions/usage.electricConsumptionRateSinceReset.availability'}
            electricConsumptionRateSinceStart: {$ref: '#/definitions/usage.electricConsumptionRateSinceStart.availability'}
            electricDistanceLastTrip: {$ref: '#/definitions/usage.electricDistanceLastTrip.availability'}
            electricDistanceSinceReset: {$ref: '#/definitions/usage.electricDistanceSinceReset.availability'}
            electricDurationLastTrip: {$ref: '#/definitions/usage.electricDurationLastTrip.availability'}
            electricDurationSinceReset: {$ref: '#/definitions/usage.electricDurationSinceReset.availability'}
            fuelConsumptionRateLastTrip: {$ref: '#/definitions/usage.fuelConsumptionRateLastTrip.availability'}
            fuelConsumptionRateSinceReset: {$ref: '#/definitions/usage.fuelConsumptionRateSinceReset.availability'}
            fuelDistanceLastTrip: {$ref: '#/definitions/usage.fuelDistanceLastTrip.availability'}
            fuelDistanceSinceReset: {$ref: '#/definitions/usage.fuelDistanceSinceReset.availability'}
            lastTripAverageEnergyRecuperation: {$ref: '#/definitions/usage.lastTripAverageEnergyRecuperation.availability'}
            lastTripBatteryRegenerated: {$ref: '#/definitions/usage.lastTripBatteryRegenerated.availability'}
            lastTripBatteryRemaining: {$ref: '#/definitions/usage.lastTripBatteryRemaining.availability'}
            lastTripDate: {$ref: '#/definitions/usage.lastTripDate.availability'}
            lastTripElectricPortion: {$ref: '#/definitions/usage.lastTripElectricPortion.availability'}
            lastTripEnergyConsumption: {$ref: '#/definitions/usage.lastTripEnergyConsumption.availability'}
            lastTripFuelConsumption: {$ref: '#/definitions/usage.lastTripFuelConsumption.availability'}
            lateNightGrade: {$ref: '#/definitions/usage.lateNightGrade.availability'}
            odometerAfterLastTrip: {$ref: '#/definitions/usage.odometerAfterLastTrip.availability'}
            rapidAccelerationGrade: {$ref: '#/definitions/usage.rapidAccelerationGrade.availability'}
            rapidDecelerationGrade: {$ref: '#/definitions/usage.rapidDecelerationGrade.availability'}
            recuperationPower: {$ref: '#/definitions/usage.recuperationPower.availability'}
            safetyDrivingScore: {$ref: '#/definitions/usage.safetyDrivingScore.availability'}
            tripMeters: {$ref: '#/definitions/usage.tripMeters.availability'}
    valetMode.status:
        example:
            data: {value: active}
            timestamp: '2024-07-15T12:28:16.737Z'
        type: string
        enum:
            - active
            - inactive
    valetMode.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - inactive
    valetMode:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            status: {$ref: '#/definitions/valetMode.status'}
    valetMode.availability:
        type: object
        properties:
            status: {$ref: '#/definitions/valetMode.status.availability'}
    vehicleInformation.buildDate:
        description: 'Build (construction) date of the vehicle.'
        example:
            data: {value: '2022-03-31T11:51:29.000Z'}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        format: date-time
    vehicleInformation.colourName:
        description: 'The colour name'
        example:
            data: {value: 'Estoril Blau'}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.countryCode:
        description: 'The country code of the vehicle.'
        example:
            data: {value: DE}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.dataQuality:
        description: 'Evaluation of the timeliness of the available vehicle data.'
        example:
            data: {value: up_to_date}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - almost_up_to_date
            - no_data
            - out_of_date
            - up_to_date
    vehicleInformation.displayUnit:
        example:
            data: {value: km}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - km
            - miles
    vehicleInformation.drive:
        description: 'Wheels driven by the engine'
        example:
            data: {value: rwd}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - awd
            - four_wd
            - fwd
            - rwd
    vehicleInformation.driverSeatLocation:
        example:
            data: {value: left}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - center
            - left
            - right
    vehicleInformation.engineMaxTorque:
        description: 'The maximum engine torque'
        example:
            data: {value: 245, unit: newton_meters}
            timestamp: '2024-07-15T12:28:16.738Z'
    vehicleInformation.engineVolume:
        description: 'The engine volume displacement'
        example:
            data: {value: 2.5, unit: liters}
            timestamp: '2024-07-15T12:28:16.738Z'
    vehicleInformation.equipments:
        description: 'Names of equipment the vehicle is equipped with'
        example:
            - {data: {value: 'Parking sensors'}, timestamp: '2024-07-15T12:28:16.738Z'}
            - {data: {value: 'Automatic wipers'}, timestamp: '2024-07-15T12:28:16.738Z'}
        type: array
        items:
            type: string
    vehicleInformation.extraEquipmentCodes:
        description: 'Codes of the extra equipment the vehicle has'
        example:
            - {data: {value: CODE123}, timestamp: '2024-07-15T12:28:16.738Z'}
            - {data: {value: EQP666}, timestamp: '2024-07-15T12:28:16.738Z'}
        type: array
        items:
            type: string
    vehicleInformation.fuelTankCapacity:
        description: 'The fuel tank capacity measured in liters'
        example:
            data: {value: 80, unit: liters}
            timestamp: '2024-07-15T12:28:16.738Z'
    vehicleInformation.gearbox:
        example:
            data: {value: automatic}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - automatic
            - manual
            - semi_automatic
    vehicleInformation.language:
        description: 'The language on headunit'
        example:
            data: {value: estonian}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.lastDataTransferDate:
        description: 'The last trip date'
        example:
            data: {value: '2018-10-17T12:34:58.000Z'}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        format: date-time
    vehicleInformation.licensePlate:
        description: 'The license plate number'
        example:
            data: {value: ABC123}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.modelKey:
        description: 'The model key of the vehicle.'
        example:
            data: {value: C32}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.modelName:
        description: 'The vehicle model name'
        example:
            data: {value: 'Type X'}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.modelYear:
        description: 'The vehicle model manufacturing year number'
        example:
            data: {value: 2019}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: number
        format: integer
    vehicleInformation.name:
        description: 'The vehicle name (nickname)'
        example:
            data: {value: Speedy}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.numberOfDoors:
        description: 'The number of doors'
        example:
            data: {value: 5}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: number
        format: integer
    vehicleInformation.numberOfSeats:
        description: 'The number of seats'
        example:
            data: {value: 5}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: number
        format: integer
    vehicleInformation.power:
        description: 'The power of the vehicle'
        example:
            data: {value: 220, unit: kilowatts}
            timestamp: '2024-07-15T12:28:16.738Z'
    vehicleInformation.powertrain:
        description: 'Type of the (primary) powertrain'
        example:
            data: {value: all_electric}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - all_electric
            - cng
            - combustion_engine
            - diesel
            - electric
            - gas
            - gasoline
            - hybrid
            - hydrogen
            - hydrogen_hybrid
            - lpg
            - petrol
            - phev
            - unknown
    vehicleInformation.powertrainSecondary:
        example:
            data: {value: petrol}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - all_electric
            - cng
            - combustion_engine
            - diesel
            - electric
            - gas
            - gasoline
            - hybrid
            - hydrogen
            - hydrogen_hybrid
            - lpg
            - petrol
            - phev
            - unknown
    vehicleInformation.salesDesignation:
        description: 'The sales designation of the model'
        example:
            data: {value: Package+}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.series:
        description: 'The vehicle model''s series'
        example:
            data: {value: A4}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
    vehicleInformation.timeformat:
        description: 'The timeformat on headunit'
        example:
            data: {value: twenty_four_h}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - twelve_h
            - twenty_four_h
    vehicleInformation.timeZone:
        description: 'Time zone setting in the vehicle.'
        example:
            data: {value: summertime}
            timestamp: '2024-07-15T12:28:16.738Z'
        type: string
        enum:
            - manual
            - summertime
            - utc
            - wintertime
    vehicleInformation.vehicleMass:
        description: 'Vehicle mass.'
        example:
            data: {value: 1635, unit: kilograms}
            timestamp: '2024-07-15T12:28:16.738Z'
    vehicleInformation:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            buildDate: {$ref: '#/definitions/vehicleInformation.buildDate'}
            colourName: {$ref: '#/definitions/vehicleInformation.colourName'}
            countryCode: {$ref: '#/definitions/vehicleInformation.countryCode'}
            dataQuality: {$ref: '#/definitions/vehicleInformation.dataQuality'}
            displayUnit: {$ref: '#/definitions/vehicleInformation.displayUnit'}
            drive: {$ref: '#/definitions/vehicleInformation.drive'}
            driverSeatLocation: {$ref: '#/definitions/vehicleInformation.driverSeatLocation'}
            engineMaxTorque: {$ref: '#/definitions/vehicleInformation.engineMaxTorque'}
            engineVolume: {$ref: '#/definitions/vehicleInformation.engineVolume'}
            equipments: {$ref: '#/definitions/vehicleInformation.equipments'}
            extraEquipmentCodes: {$ref: '#/definitions/vehicleInformation.extraEquipmentCodes'}
            fuelTankCapacity: {$ref: '#/definitions/vehicleInformation.fuelTankCapacity'}
            gearbox: {$ref: '#/definitions/vehicleInformation.gearbox'}
            language: {$ref: '#/definitions/vehicleInformation.language'}
            lastDataTransferDate: {$ref: '#/definitions/vehicleInformation.lastDataTransferDate'}
            licensePlate: {$ref: '#/definitions/vehicleInformation.licensePlate'}
            modelKey: {$ref: '#/definitions/vehicleInformation.modelKey'}
            modelName: {$ref: '#/definitions/vehicleInformation.modelName'}
            modelYear: {$ref: '#/definitions/vehicleInformation.modelYear'}
            name: {$ref: '#/definitions/vehicleInformation.name'}
            numberOfDoors: {$ref: '#/definitions/vehicleInformation.numberOfDoors'}
            numberOfSeats: {$ref: '#/definitions/vehicleInformation.numberOfSeats'}
            power: {$ref: '#/definitions/vehicleInformation.power'}
            powertrain: {$ref: '#/definitions/vehicleInformation.powertrain'}
            powertrainSecondary: {$ref: '#/definitions/vehicleInformation.powertrainSecondary'}
            salesDesignation: {$ref: '#/definitions/vehicleInformation.salesDesignation'}
            series: {$ref: '#/definitions/vehicleInformation.series'}
            timeformat: {$ref: '#/definitions/vehicleInformation.timeformat'}
            timeZone: {$ref: '#/definitions/vehicleInformation.timeZone'}
            vehicleMass: {$ref: '#/definitions/vehicleInformation.vehicleMass'}
    vehicleInformation.availability:
        type: object
        properties:
            buildDate: {$ref: '#/definitions/vehicleInformation.buildDate.availability'}
            colourName: {$ref: '#/definitions/vehicleInformation.colourName.availability'}
            countryCode: {$ref: '#/definitions/vehicleInformation.countryCode.availability'}
            dataQuality: {$ref: '#/definitions/vehicleInformation.dataQuality.availability'}
            displayUnit: {$ref: '#/definitions/vehicleInformation.displayUnit.availability'}
            drive: {$ref: '#/definitions/vehicleInformation.drive.availability'}
            driverSeatLocation: {$ref: '#/definitions/vehicleInformation.driverSeatLocation.availability'}
            engineMaxTorque: {$ref: '#/definitions/vehicleInformation.engineMaxTorque.availability'}
            engineVolume: {$ref: '#/definitions/vehicleInformation.engineVolume.availability'}
            equipments: {$ref: '#/definitions/vehicleInformation.equipments.availability'}
            extraEquipmentCodes: {$ref: '#/definitions/vehicleInformation.extraEquipmentCodes.availability'}
            fuelTankCapacity: {$ref: '#/definitions/vehicleInformation.fuelTankCapacity.availability'}
            gearbox: {$ref: '#/definitions/vehicleInformation.gearbox.availability'}
            language: {$ref: '#/definitions/vehicleInformation.language.availability'}
            lastDataTransferDate: {$ref: '#/definitions/vehicleInformation.lastDataTransferDate.availability'}
            licensePlate: {$ref: '#/definitions/vehicleInformation.licensePlate.availability'}
            modelKey: {$ref: '#/definitions/vehicleInformation.modelKey.availability'}
            modelName: {$ref: '#/definitions/vehicleInformation.modelName.availability'}
            modelYear: {$ref: '#/definitions/vehicleInformation.modelYear.availability'}
            name: {$ref: '#/definitions/vehicleInformation.name.availability'}
            numberOfDoors: {$ref: '#/definitions/vehicleInformation.numberOfDoors.availability'}
            numberOfSeats: {$ref: '#/definitions/vehicleInformation.numberOfSeats.availability'}
            power: {$ref: '#/definitions/vehicleInformation.power.availability'}
            powertrain: {$ref: '#/definitions/vehicleInformation.powertrain.availability'}
            powertrainSecondary: {$ref: '#/definitions/vehicleInformation.powertrainSecondary.availability'}
            salesDesignation: {$ref: '#/definitions/vehicleInformation.salesDesignation.availability'}
            series: {$ref: '#/definitions/vehicleInformation.series.availability'}
            timeformat: {$ref: '#/definitions/vehicleInformation.timeformat.availability'}
            timeZone: {$ref: '#/definitions/vehicleInformation.timeZone.availability'}
            vehicleMass: {$ref: '#/definitions/vehicleInformation.vehicleMass.availability'}
    vehicleLocation.altitude:
        description: 'Altitude above the WGS 84 reference ellipsoid'
        example:
            data: {value: 133.5, unit: meters}
            timestamp: '2024-07-15T12:28:16.739Z'
    vehicleLocation.altitude.availability:
        description: 'Altitude above the WGS 84 reference ellipsoid'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    vehicleLocation.coordinates:
        example:
            data: {latitude: {value: 52.520008}, longitude: {value: 13.404954}}
            timestamp: '2024-07-15T12:28:16.739Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    vehicleLocation.coordinates.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    vehicleLocation.fuzzyCoordinates:
        description: 'Fuzzy coordinates for the vehicle location.'
        example:
            data: {latitude: {value: 52.52}, longitude: {value: 13.4049}}
            timestamp: '2024-07-15T12:28:16.739Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    vehicleLocation.fuzzyCoordinates.availability:
        description: 'Fuzzy coordinates for the vehicle location.'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    vehicleLocation.gpsSignalStrength:
        description: 'GPS signal strength percentage between 0.0-1.0'
        example:
            data: {value: 0.8}
            timestamp: '2024-07-15T12:28:16.739Z'
        type: number
        format: double
    vehicleLocation.gpsSignalStrength.availability:
        description: 'GPS signal strength percentage between 0.0-1.0'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    vehicleLocation.gpsSource:
        description: 'Type of GPS source'
        example:
            data: {value: real}
            timestamp: '2024-07-15T12:28:16.739Z'
        type: string
        enum:
            - dead_reckoning
            - none
            - real
    vehicleLocation.gpsSource.availability:
        description: 'Type of GPS source'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - dead_reckoning
            - none
            - real
    vehicleLocation.heading:
        description: 'Heading angle'
        example:
            data: {value: 13.370123, unit: degrees}
            timestamp: '2024-07-15T12:28:16.739Z'
    vehicleLocation.heading.availability:
        description: 'Heading angle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    vehicleLocation.precision:
        example:
            data: {value: 500, unit: meters}
            timestamp: '2024-07-15T12:28:16.739Z'
    vehicleLocation.precision.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    vehicleLocation:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            altitude: {$ref: '#/definitions/vehicleLocation.altitude'}
            coordinates: {$ref: '#/definitions/vehicleLocation.coordinates'}
            fuzzyCoordinates: {$ref: '#/definitions/vehicleLocation.fuzzyCoordinates'}
            gpsSignalStrength: {$ref: '#/definitions/vehicleLocation.gpsSignalStrength'}
            gpsSource: {$ref: '#/definitions/vehicleLocation.gpsSource'}
            heading: {$ref: '#/definitions/vehicleLocation.heading'}
            precision: {$ref: '#/definitions/vehicleLocation.precision'}
    vehicleLocation.availability:
        type: object
        properties:
            altitude: {$ref: '#/definitions/vehicleLocation.altitude.availability'}
            coordinates: {$ref: '#/definitions/vehicleLocation.coordinates.availability'}
            fuzzyCoordinates: {$ref: '#/definitions/vehicleLocation.fuzzyCoordinates.availability'}
            gpsSignalStrength: {$ref: '#/definitions/vehicleLocation.gpsSignalStrength.availability'}
            gpsSource: {$ref: '#/definitions/vehicleLocation.gpsSource.availability'}
            heading: {$ref: '#/definitions/vehicleLocation.heading.availability'}
            precision: {$ref: '#/definitions/vehicleLocation.precision.availability'}
    vehicleStatus.states:
        description: 'The bytes of a Capability state'
        example:
            - {data: {doors: {locksState: {data: {value: unlocked}}, positions: [{data: {location: {value: front_left}, position: {value: open}}}, {data: {location: {value: rear_right}, position: {value: open}}}], timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2024-07-15T12:28:16.739Z'}
            - {data: {charging: {chargePortState: {data: {value: open}}, chargeMode: {data: {value: immediate}}, chargingRate: {data: {value: 35, unit: kilowatts}}, maxRange: {data: {value: 555, unit: kilometers}}, timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2024-07-15T12:28:16.739Z'}
        type: array
        items:
            type: capability_state
    vehicleStatus:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            states: {$ref: '#/definitions/vehicleStatus.states'}
    vehicleStatus.availability:
        type: object
        properties:
            states: {$ref: '#/definitions/vehicleStatus.states.availability'}
    vehicleTime.vehicleTime:
        description: 'Vehicle time in a 24h format'
        example:
            data: {hour: {value: 19}, minute: {value: 55}}
            timestamp: '2024-07-15T12:28:16.740Z'
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    vehicleTime.vehicleTime.availability:
        description: 'Vehicle time in a 24h format'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    vehicleTime:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            vehicleTime: {$ref: '#/definitions/vehicleTime.vehicleTime'}
    vehicleTime.availability:
        type: object
        properties:
            vehicleTime: {$ref: '#/definitions/vehicleTime.vehicleTime.availability'}
    videoHandover.screen:
        example:
            data: {value: rear}
            timestamp: '2024-07-15T12:28:16.740Z'
        type: string
        enum:
            - front
            - rear
    videoHandover.screen.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - front
            - rear
    videoHandover.startingTime:
        description: 'Start the video from the given time'
        example:
            data: {value: 2.5, unit: seconds}
            timestamp: '2024-07-15T12:28:16.740Z'
    videoHandover.startingTime.availability:
        description: 'Start the video from the given time'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
    videoHandover.url:
        description: 'URL string'
        example:
            data: {value: 'https://bit.ly/2obY7G5'}
            timestamp: '2024-07-15T12:28:16.740Z'
        type: string
    videoHandover.url.availability:
        description: 'URL string'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    wakeUp.status:
        example:
            data: {value: wake_up}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: string
        enum:
            - sleep
            - wake_up
    wakeUp.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - sleep
            - wake_up
    weatherConditions.rainIntensity:
        description: 'Measured raining intensity percentage, whereas 0% is no rain and 100% is maximum rain'
        example:
            data: {value: 1}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: number
        format: double
    weatherConditions.rainIntensity.availability:
        description: 'Measured raining intensity percentage, whereas 0% is no rain and 100% is maximum rain'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    weatherConditions:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            rainIntensity: {$ref: '#/definitions/weatherConditions.rainIntensity'}
    weatherConditions.availability:
        type: object
        properties:
            rainIntensity: {$ref: '#/definitions/weatherConditions.rainIntensity.availability'}
    wiFi.networkConnected:
        example:
            data: {value: connected}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: string
        enum:
            - connected
            - disconnected
    wiFi.networkConnected.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - connected
            - disconnected
    wiFi.networkSecurity:
        example:
            data: {value: wpa2_personal}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    wiFi.networkSecurity.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    wiFi.networkSSID:
        description: 'The network SSID'
        example:
            data: {value: HOME}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: string
    wiFi.networkSSID.availability:
        description: 'The network SSID'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    wiFi.password:
        description: 'The network password'
        example:
            data: {value: great_secret12}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: string
    wiFi.password.availability:
        description: 'The network password'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
    wiFi.status:
        example:
            data: {value: enabled}
            timestamp: '2024-07-15T12:28:16.741Z'
        type: string
        enum:
            - disabled
            - enabled
    wiFi.status.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - disabled
            - enabled
    wiFi:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            networkConnected: {$ref: '#/definitions/wiFi.networkConnected'}
            networkSecurity: {$ref: '#/definitions/wiFi.networkSecurity'}
            networkSSID: {$ref: '#/definitions/wiFi.networkSSID'}
            status: {$ref: '#/definitions/wiFi.status'}
    wiFi.availability:
        type: object
        properties:
            networkConnected: {$ref: '#/definitions/wiFi.networkConnected.availability'}
            networkSecurity: {$ref: '#/definitions/wiFi.networkSecurity.availability'}
            networkSSID: {$ref: '#/definitions/wiFi.networkSSID.availability'}
            status: {$ref: '#/definitions/wiFi.status.availability'}
    windows.openPercentages:
        example:
            - {data: {location: {value: front_left}, openPercentage: {value: 0.2}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: front_right}, openPercentage: {value: 0.5}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: rear_right}, openPercentage: {value: 0.5}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: rear_left}, openPercentage: {value: 0.1}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: hatch}, openPercentage: {value: 0.18}}, timestamp: '2024-07-15T12:28:16.742Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, hatch, rear_left, rear_right]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}
    windows.openPercentages.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, hatch, rear_left, rear_right]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}
    windows.positions:
        example:
            - {data: {location: {value: front_left}, position: {value: open}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: front_right}, position: {value: open}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: rear_right}, position: {value: closed}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: rear_left}, position: {value: open}}, timestamp: '2024-07-15T12:28:16.742Z'}
            - {data: {location: {value: hatch}, position: {value: open}}, timestamp: '2024-07-15T12:28:16.742Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, hatch, rear_left, rear_right]}, position: {type: string, enum: [closed, intermediate, open]}}
    windows.positions.availability:
        example:
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
            - {availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, hatch, rear_left, rear_right]}, position: {type: string, enum: [closed, intermediate, open]}}
    windows:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            openPercentages: {$ref: '#/definitions/windows.openPercentages'}
            positions: {$ref: '#/definitions/windows.positions'}
    windows.availability:
        type: object
        properties:
            openPercentages: {$ref: '#/definitions/windows.openPercentages.availability'}
            positions: {$ref: '#/definitions/windows.positions.availability'}
    windscreen.windscreenDamage:
        example:
            data: {value: impact_but_no_damage_detected}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: string
        enum:
            - damage_larger_than_1_inch
            - damage_smaller_than_1_inch
            - impact_but_no_damage_detected
            - no_impact_detected
    windscreen.windscreenDamage.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - damage_larger_than_1_inch
            - damage_smaller_than_1_inch
            - impact_but_no_damage_detected
            - no_impact_detected
    windscreen.windscreenDamageConfidence:
        description: 'Confidence of damage detection, 0% if no impact detected'
        example:
            data: {value: 0.95}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: number
        format: double
    windscreen.windscreenDamageConfidence.availability:
        description: 'Confidence of damage detection, 0% if no impact detected'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: number
        format: double
    windscreen.windscreenDamageDetectionTime:
        description: 'Windscreen damage detection date'
        example:
            data: {value: '2017-01-10T16:32:05.000Z'}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: string
        format: date-time
    windscreen.windscreenDamageDetectionTime.availability:
        description: 'Windscreen damage detection date'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        format: date-time
    windscreen.windscreenDamageZone:
        description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)'
        example:
            data: {horizontal: {value: 1}, vertical: {value: 2}}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenDamageZone.availability:
        description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenNeedsReplacement:
        example:
            data: {value: no_replacement_needed}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: string
        enum:
            - no_replacement_needed
            - replacement_needed
            - unknown
    windscreen.windscreenNeedsReplacement.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - no_replacement_needed
            - replacement_needed
            - unknown
    windscreen.windscreenZoneMatrix:
        description: 'Representing the size of the matrix, seen from the inside of the vehicle'
        example:
            data: {horizontal: {value: 4}, vertical: {value: 3}}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenZoneMatrix.availability:
        description: 'Representing the size of the matrix, seen from the inside of the vehicle'
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.wipersIntensity:
        example:
            data: {value: level_3}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: string
        enum:
            - level_0
            - level_1
            - level_2
            - level_3
    windscreen.wipersIntensity.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - level_0
            - level_1
            - level_2
            - level_3
    windscreen.wipersStatus:
        example:
            data: {value: automatic}
            timestamp: '2024-07-15T12:28:16.743Z'
        type: string
        enum:
            - active
            - automatic
            - inactive
    windscreen.wipersStatus.availability:
        example:
            availability: {updateRate: {value: trip_high}, rateLimit: {value: 64, unit: hertz}, appliesPer: {value: vehicle}}
        type: string
        enum:
            - active
            - automatic
            - inactive
    windscreen:
        type: object
        properties:
            brand: {$ref: '#/definitions/universalProperties.brand'}
            vin: {$ref: '#/definitions/universalProperties.vin'}
            windscreenDamage: {$ref: '#/definitions/windscreen.windscreenDamage'}
            windscreenDamageConfidence: {$ref: '#/definitions/windscreen.windscreenDamageConfidence'}
            windscreenDamageDetectionTime: {$ref: '#/definitions/windscreen.windscreenDamageDetectionTime'}
            windscreenDamageZone: {$ref: '#/definitions/windscreen.windscreenDamageZone'}
            windscreenNeedsReplacement: {$ref: '#/definitions/windscreen.windscreenNeedsReplacement'}
            windscreenZoneMatrix: {$ref: '#/definitions/windscreen.windscreenZoneMatrix'}
            wipersIntensity: {$ref: '#/definitions/windscreen.wipersIntensity'}
            wipersStatus: {$ref: '#/definitions/windscreen.wipersStatus'}
    windscreen.availability:
        type: object
        properties:
            windscreenDamage: {$ref: '#/definitions/windscreen.windscreenDamage.availability'}
            windscreenDamageConfidence: {$ref: '#/definitions/windscreen.windscreenDamageConfidence.availability'}
            windscreenDamageDetectionTime: {$ref: '#/definitions/windscreen.windscreenDamageDetectionTime.availability'}
            windscreenDamageZone: {$ref: '#/definitions/windscreen.windscreenDamageZone.availability'}
            windscreenNeedsReplacement: {$ref: '#/definitions/windscreen.windscreenNeedsReplacement.availability'}
            windscreenZoneMatrix: {$ref: '#/definitions/windscreen.windscreenZoneMatrix.availability'}
            wipersIntensity: {$ref: '#/definitions/windscreen.wipersIntensity.availability'}
            wipersStatus: {$ref: '#/definitions/windscreen.wipersStatus.availability'}
    universalProperties.brand:
        description: 'The vehicle brand'
        example:
            data: {value: bmw}
        type: string
        enum:
            - abarth
            - alfaromeo
            - alpine
            - audi
            - bmw
            - cadillac
            - chevrolet
            - chrysler
            - citroen
            - cupra
            - dacia
            - dodge
            - ds
            - fiat
            - ford
            - honda
            - hyundai
            - iveco
            - jaguar
            - jeep
            - kia
            - lancia
            - land_rover
            - lexus
            - man
            - maserati
            - mazda
            - mercedes_benz
            - mini
            - mitsubishi
            - nissan
            - opel
            - peugeot
            - porsche
            - renault
            - sandbox
            - seat
            - skoda
            - smart
            - subaru
            - tesla
            - toyota
            - unknown
            - volkswagen
            - volvo_cars
    universalProperties.vin:
        description: 'The unique Vehicle Identification Number'
        example:
            data: {value: JF2SHBDC7CH451869}
        type: string
    Error400:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 400}
            failureType: {type: string, enum: [incorrect_state, invalid_command, other], example: unsupported_capability}
            failureDescription: {type: string, example: 'Capability not supported by this vehicle', description: 'Failure description formatted in UTF-8'}
    Error401:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 401}
            failureType: {type: string, enum: [auth_header_missing, other], example: auth_header_missing}
            failureDescription: {type: string, example: 'Missing authentication header', description: 'Failure description formatted in UTF-8'}
    Error403:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 403}
            failureType: {type: string, enum: [auth_header_invalid, other], example: auth_header_invalid}
            failureDescription: {type: string, example: 'Invalid authentication header', description: 'Failure description formatted in UTF-8'}
    Error408:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 408}
            failureType: {type: string, enum: [charger_asleep, request_timeout, vehicle_asleep, other], example: vehicle_asleep}
            failureDescription: {type: string, example: 'Vehicle Asleep', description: 'Failure description formatted in UTF-8'}
paths:
    /adas:
        get:
            tags: [ADAS]
            summary: 'Get ADAS state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'ADAS State', schema: {$ref: '#/definitions/adas'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /adas/availability:
        get:
            tags: [ADAS]
            summary: 'Get ADAS availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=alertnessSystemStatus,status)', example: 'alertnessSystemStatus,status'}]
            responses: {'200': {description: 'ADAS Availability State', schema: {$ref: '#/definitions/adas.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /browser/load_url:
        put:
            tags: [Browser]
            summary: 'Load a URL in the headunit browser. A URL shortener can be used in other cases. Note that for the vehicle emulator the URL has to be for a secure site (HTTPS).'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {url: {description: 'The URL', example: 'https://about.high-mobility.com', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /capabilities:
        get:
            tags: [Capabilities]
            summary: 'Get Capabilities state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Capabilities State', schema: {$ref: '#/definitions/capabilities'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging:
        get:
            tags: [Charging]
            summary: 'Get Charging state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/availability:
        get:
            tags: [Charging]
            summary: 'Get Charging availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=batteryLevel,estimatedRange)', example: 'batteryLevel,estimatedRange'}]
            responses: {'200': {description: 'Charging Availability State', schema: {$ref: '#/definitions/charging.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/open_close_charging_port:
        put:
            tags: [Charging]
            summary: 'Open or close the charge port of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargePortState: {example: open, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charge_limit:
        put:
            tags: [Charging]
            summary: 'Set the charge limit, to which point the vehicle will charge itself.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeLimit: {description: 'Charge limit percentage between 0.0-1.0', example: 0.9, type: number, format: double}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charge_mode:
        put:
            tags: [Charging]
            summary: 'Set the charge mode of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeMode: {example: timer_based, type: string, enum: [conductive, immediate, inductive, push_button, timer_based]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charging_timers:
        put:
            tags: [Charging]
            summary: 'Set the charging timers of the vehicle. The command can include one of the different timer types or all.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {timers: {example: [{timerType: preferred_start_time, date: '2017-01-10T16:32:05.000Z'}, {timerType: preferred_end_time, date: '2017-01-10T16:36:05.000Z'}, {timerType: departure_date, date: '2017-01-10T16:36:05.000Z'}], type: array, items: {type: object, properties: {timerType: {type: string, enum: [departure_date, preferred_end_time, preferred_start_time]}, date: {description: 'Timer date', type: string, format: date-time}}}}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_reduction_of_charging_current_times:
        put:
            tags: [Charging]
            summary: 'Set the reduction of charging times of the vehicle. The command can include different values for start and stop.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {reductionTimes: {example: [{startStop: start, time: {hour: 17, minute: 33}}, {startStop: stop, time: {hour: 12, minute: 52}}], type: array, items: {type: object, properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}}}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/start_stop_charging:
        put:
            tags: [Charging]
            summary: 'Start or stop charging, which can only be controlled when the vehicle is plugged in.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: charging, type: string, enum: [cable_unplugged, charging, charging_complete, charging_error, charging_paused, conditioning, discharging, fast_charging, flap_open, foreign_object_detected, initialising, not_charging, ready_for_charging, slow_charging]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings:
        get:
            tags: ['Chassis Settings']
            summary: 'Get Chassis Settings state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/availability:
        get:
            tags: ['Chassis Settings']
            summary: 'Get Chassis Settings availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=drivingMode,sportChrono)', example: 'drivingMode,sportChrono'}]
            responses: {'200': {description: 'Chassis Settings Availability State', schema: {$ref: '#/definitions/chassisSettings.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_chassis_position:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the chassis position.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {currentChassisPosition: {description: 'The chassis position calculated from the lowest point', example: {millimeters: 25.4}}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_driving_mode:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the driving mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {drivingMode: {example: eco, type: string, enum: [comfort, eco, eco_plus, regular, sport, sport_plus]}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_spring_rates:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the spring rates.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {currentSpringRates: {description: 'The current values for the spring rates', example: [{axle: front, springRate: {newton_millimeters: 21}}, {axle: rear, springRate: {newton_millimeters: 23}}], type: array, items: {type: object, properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}}}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/start_stop_sports_chrono:
        put:
            tags: ['Chassis Settings']
            summary: 'Start/Stop sport chrono.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {sportChrono: {example: active, type: string, enum: [active, inactive, reset]}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate:
        get:
            tags: [Climate]
            summary: 'Get Climate state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/availability:
        get:
            tags: [Climate]
            summary: 'Get Climate availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=insideTemperature,outsideTemperature)', example: 'insideTemperature,outsideTemperature'}]
            responses: {'200': {description: 'Climate Availability State', schema: {$ref: '#/definitions/climate.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/change_starting_times:
        put:
            tags: [Climate]
            summary: 'Set the HVAC (Heating, ventilation, and air conditioning) automated starting times.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {hvacWeekdayStartingTimes: {example: [{weekday: monday, time: {hour: 16, minute: 0}}, {weekday: tuesday, time: {hour: 16, minute: 0}}, {weekday: wednesday, time: {hour: 16, minute: 0}}, {weekday: thursday, time: {hour: 16, minute: 0}}, {weekday: friday, time: {hour: 16, minute: 0}}, {weekday: saturday, time: {hour: 18, minute: 30}}, {weekday: sunday, time: {hour: 19, minute: 31}}, {weekday: automatic, time: {hour: 16, minute: 0}}], type: array, items: {type: object, properties: {weekday: {type: string, enum: [automatic, friday, monday, saturday, sunday, thursday, tuesday, wednesday]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}}}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/set_temperature_settings:
        put:
            tags: [Climate]
            summary: 'Set the preferred temperature settings.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {driverTemperatureSetting: {description: 'The driver temperature setting', example: {celsius: 21.5}}, passengerTemperatureSetting: {description: 'The passenger temperature setting', example: {celsius: 21.7}}, rearTemperatureSetting: {description: 'The rear temperature', example: {celsius: 21.6}}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_defogging:
        put:
            tags: [Climate]
            summary: 'Manually start or stop defogging.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {defoggingState: {example: inactive, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_defrosting:
        put:
            tags: [Climate]
            summary: 'Manually start or stop defrosting.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {defrostingState: {example: inactive, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_hvac:
        put:
            tags: [Climate]
            summary: 'Start or stop the HVAC system to reach driver and passenger set temperatures. The vehicle will use cooling, defrosting and defogging as appropriate.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {hvacState: {example: active, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_ionising:
        put:
            tags: [Climate]
            summary: 'Manually start or stop ionising.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {ionisingState: {example: inactive, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /crash:
        get:
            tags: [Crash]
            summary: 'Get Crash state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Crash State', schema: {$ref: '#/definitions/crash'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /crash/availability:
        get:
            tags: [Crash]
            summary: 'Get Crash availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=incidents,type)', example: 'incidents,type'}]
            responses: {'200': {description: 'Crash Availability State', schema: {$ref: '#/definitions/crash.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /cruise_control:
        get:
            tags: ['Cruise Control']
            summary: 'Get Cruise Control state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Cruise Control State', schema: {$ref: '#/definitions/cruiseControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /cruise_control/availability:
        get:
            tags: ['Cruise Control']
            summary: 'Get Cruise Control availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=cruiseControl,limiter)', example: 'cruiseControl,limiter'}]
            responses: {'200': {description: 'Cruise Control Availability State', schema: {$ref: '#/definitions/cruiseControl.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /cruise_control/activate_deactivate_cruise_control:
        put:
            tags: ['Cruise Control']
            summary: 'Activate or deactivate cruise control.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {cruiseControl: {example: active, type: string, enum: [active, inactive]}, targetSpeed: {description: 'The target speed', example: {kilometers_per_hour: 61}}}}}]
            responses: {'200': {description: 'Cruise Control State', schema: {$ref: '#/definitions/cruiseControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /dashboard_lights:
        get:
            tags: ['Dashboard Lights']
            summary: 'Get Dashboard Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Dashboard Lights State', schema: {$ref: '#/definitions/dashboardLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /dashboard_lights/availability:
        get:
            tags: ['Dashboard Lights']
            summary: 'Get Dashboard Lights availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=bulbFailures,dashboardLights)', example: 'bulbFailures,dashboardLights'}]
            responses: {'200': {description: 'Dashboard Lights Availability State', schema: {$ref: '#/definitions/dashboardLights.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /diagnostics:
        get:
            tags: [Diagnostics]
            summary: 'Get Diagnostics state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Diagnostics State', schema: {$ref: '#/definitions/diagnostics'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /diagnostics/availability:
        get:
            tags: [Diagnostics]
            summary: 'Get Diagnostics availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=engineOilTemperature,speed)', example: 'engineOilTemperature,speed'}]
            responses: {'200': {description: 'Diagnostics Availability State', schema: {$ref: '#/definitions/diagnostics.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors:
        get:
            tags: [Doors]
            summary: 'Get Doors state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Doors State', schema: {$ref: '#/definitions/doors'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors/availability:
        get:
            tags: [Doors]
            summary: 'Get Doors availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=insideLocks,locks)', example: 'insideLocks,locks'}]
            responses: {'200': {description: 'Doors Availability State', schema: {$ref: '#/definitions/doors.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors/lock_unlock_doors:
        put:
            tags: [Doors]
            summary: 'Attempt to lock or unlock all doors of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {locksState: {description: 'Locks state for the whole vehicle (combines all specific lock states if available)', example: unlocked, type: string, enum: [locked, unlocked]}}}}]
            responses: {'200': {description: 'Doors State', schema: {$ref: '#/definitions/doors'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /driver_fatigue:
        get:
            tags: ['Driver Fatigue']
            summary: 'Get Driver Fatigue state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Driver Fatigue State', schema: {$ref: '#/definitions/driverFatigue'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /driver_fatigue/availability:
        get:
            tags: ['Driver Fatigue']
            summary: 'Get Driver Fatigue availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=detectedFatigueLevel)', example: detectedFatigueLevel}]
            responses: {'200': {description: 'Driver Fatigue Availability State', schema: {$ref: '#/definitions/driverFatigue.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine:
        get:
            tags: [Engine]
            summary: 'Get Engine state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Engine State', schema: {$ref: '#/definitions/engine'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine/availability:
        get:
            tags: [Engine]
            summary: 'Get Engine availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=startStopState,status)', example: 'startStopState,status'}]
            responses: {'200': {description: 'Engine Availability State', schema: {$ref: '#/definitions/engine.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine/enable_disable_start_stop:
        put:
            tags: [Engine]
            summary: 'Activate or deactivate the Start-Stop system of the engine. When activated, this will automatically shut down and restart the internal combustion engine when the vehicle is stopped.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {startStopEnabled: {description: 'Indicates if the automatic start-stop system is enabled or not', example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Engine State', schema: {$ref: '#/definitions/engine'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine/turn_engine_on_off:
        put:
            tags: [Engine]
            summary: 'Attempt to turn the vehicle engine on or off.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: off, type: string, enum: [off, on]}}}}]
            responses: {'200': {description: 'Engine State', schema: {$ref: '#/definitions/engine'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /firmware_version:
        get:
            tags: ['Firmware Version']
            summary: 'Get Firmware Version state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Firmware Version State', schema: {$ref: '#/definitions/firmwareVersion'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling:
        get:
            tags: [Fueling]
            summary: 'Get Fueling state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Fueling State', schema: {$ref: '#/definitions/fueling'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling/availability:
        get:
            tags: [Fueling]
            summary: 'Get Fueling availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=gasFlapLock,gasFlapPosition)', example: 'gasFlapLock,gasFlapPosition'}]
            responses: {'200': {description: 'Fueling Availability State', schema: {$ref: '#/definitions/fueling.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling/control_gas_flap:
        put:
            tags: [Fueling]
            summary: 'Control the gas flap of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {gasFlapLock: {example: locked, type: string, enum: [locked, unlocked]}, gasFlapPosition: {example: closed, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Fueling State', schema: {$ref: '#/definitions/fueling'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /graphics/display_image:
        put:
            tags: [Graphics]
            summary: 'Display an image in the headunit by providing the image URL.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {imageURL: {description: 'The image URL', example: 'https://about.high-mobility.com/assets/images/hm-logo.svg', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /heart_rate/send_heart_rate:
        put:
            tags: ['Heart Rate']
            summary: 'Send the driver heart rate to the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {heartRate: {example: {times_per_minute: 64}}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /historical/get_charging_sessions:
        put:
            tags: [Historical]
            summary: 'Request history of charging sessions for the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {startDate: {description: 'Start date for historical data query', example: '2019-10-07T13:04:32.000Z', type: string, format: date-time}, endDate: {description: 'End date for historical data query', example: '2019-09-27T08:42:30.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Historical State', schema: {$ref: '#/definitions/historical'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /historical/get_trips:
        put:
            tags: [Historical]
            summary: 'Request history of trips travelled with the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {startDate: {description: 'Start date for historical data query', example: '2019-10-07T13:04:32.000Z', type: string, format: date-time}, endDate: {description: 'End date for historical data query', example: '2019-09-27T08:42:30.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Historical State', schema: {$ref: '#/definitions/historical'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /historical/request_states:
        put:
            tags: [Historical]
            summary: 'Request historical states.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {capabilityID: {description: 'The identifier of the Capability', example: 96, type: number, format: integer}, startDate: {description: 'Start date for historical data query', example: '2019-10-07T13:04:32.000Z', type: string, format: date-time}, endDate: {description: 'End date for historical data query', example: '2019-09-27T08:42:30.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Historical State', schema: {$ref: '#/definitions/historical'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger:
        get:
            tags: ['Home Charger']
            summary: 'Get Home Charger state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/availability:
        get:
            tags: ['Home Charger']
            summary: 'Get Home Charger availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=authenticationMechanism,chargingStatus)', example: 'authenticationMechanism,chargingStatus'}]
            responses: {'200': {description: 'Home Charger Availability State', schema: {$ref: '#/definitions/homeCharger.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/activate_deactivate_solar_charging:
        put:
            tags: ['Home Charger']
            summary: 'Activate or deactivate charging from solar power.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {solarCharging: {example: active, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/authenticate_expire:
        put:
            tags: ['Home Charger']
            summary: 'Authenticate or expire the charging session. Only if the session is authenticated can the charging be started by the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {authenticationState: {example: authenticated, type: string, enum: [authenticated, unauthenticated]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/enable_disable_wi_fi_hotspot:
        put:
            tags: ['Home Charger']
            summary: 'Enable or disable the Wi-Fi Hotspot.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {wifiHotspotEnabled: {example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/set_charge_current:
        put:
            tags: ['Home Charger']
            summary: 'Set the charge current of the home charger.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeCurrent: {description: 'The charge current', example: {amperes: 0.5}}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/set_price_tariffs:
        put:
            tags: ['Home Charger']
            summary: 'Set the price tariffs of the home charger.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {priceTariffs: {example: [{pricingType: starting_fee, price: 4.5, currency: EUR}, {pricingType: per_minute, price: 0.3, currency: EUR}, {pricingType: per_kwh, price: 0.3, currency: Ripple}], type: array, items: {type: object, properties: {pricingType: {type: string, enum: [per_kwh, per_minute, starting_fee]}, price: {description: 'The price', type: number, format: double}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}}}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights:
        get:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Get Honk Horn & Flash Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/availability:
        get:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Get Honk Horn & Flash Lights availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=flashers,flashTimes)', example: 'flashers,flashTimes'}]
            responses: {'200': {description: 'Honk Horn & Flash Lights Availability State', schema: {$ref: '#/definitions/honkHornFlashLights.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/activate_deactivate_emergency_flasher:
        put:
            tags: ['Honk Horn & Flash Lights']
            summary: 'This activates or deactivates the emergency flashers of the vehicle, typically the blinkers to alarm other drivers.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {emergencyFlashersState: {example: active, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/honk_flash:
        put:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Honk the horn and/or flash the blinker lights. This can be done simultaneously or just one action at the time. It is also possible to pass in how many times the lights should be flashed and how many seconds the horn should be honked.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {honkTime: {description: 'Time to honk the horn', example: {seconds: 2}}, flashTimes: {description: 'Number of times to flash the lights', example: 5, type: number, format: integer}}}}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /hood:
        get:
            tags: [Hood]
            summary: 'Get Hood state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Hood State', schema: {$ref: '#/definitions/hood'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /hood/availability:
        get:
            tags: [Hood]
            summary: 'Get Hood availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=lock,position)', example: 'lock,position'}]
            responses: {'200': {description: 'Hood Availability State', schema: {$ref: '#/definitions/hood.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition:
        get:
            tags: [Ignition]
            summary: 'Get Ignition state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Ignition State', schema: {$ref: '#/definitions/ignition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition/availability:
        get:
            tags: [Ignition]
            summary: 'Get Ignition availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=state)', example: state}]
            responses: {'200': {description: 'Ignition Availability State', schema: {$ref: '#/definitions/ignition.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition/turn_ignition_on_off:
        put:
            tags: [Ignition]
            summary: 'Attempt to turn the vehicle engine ignition on or off. When the engine ignition is on, it is possible for the driver to turn on the engine and drive the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {state: {example: accessory, type: string, enum: [accessory, lock, off, on, start]}}}}]
            responses: {'200': {description: 'Ignition State', schema: {$ref: '#/definitions/ignition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /keyfob_position:
        get:
            tags: ['Keyfob Position']
            summary: 'Get Keyfob Position state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Keyfob Position State', schema: {$ref: '#/definitions/keyfobPosition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /keyfob_position/availability:
        get:
            tags: ['Keyfob Position']
            summary: 'Get Keyfob Position availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=location)', example: location}]
            responses: {'200': {description: 'Keyfob Position Availability State', schema: {$ref: '#/definitions/keyfobPosition.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /light_conditions:
        get:
            tags: ['Light Conditions']
            summary: 'Get Light Conditions state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Light Conditions State', schema: {$ref: '#/definitions/lightConditions'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /light_conditions/availability:
        get:
            tags: ['Light Conditions']
            summary: 'Get Light Conditions availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=insideLight,outsideLight)', example: 'insideLight,outsideLight'}]
            responses: {'200': {description: 'Light Conditions Availability State', schema: {$ref: '#/definitions/lightConditions.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights:
        get:
            tags: [Lights]
            summary: 'Get Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Lights State', schema: {$ref: '#/definitions/lights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights/availability:
        get:
            tags: [Lights]
            summary: 'Get Lights availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=frontExteriorLight,rearExteriorLight)', example: 'frontExteriorLight,rearExteriorLight'}]
            responses: {'200': {description: 'Lights Availability State', schema: {$ref: '#/definitions/lights.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights/control_lights:
        put:
            tags: [Lights]
            summary: 'Set the lights state.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {frontExteriorLight: {example: active_with_full_beam, type: string, enum: [active, active_with_full_beam, automatic, drl, inactive]}, rearExteriorLight: {example: active, type: string, enum: [active, inactive]}, ambientLightColour: {example: {red: 255, green: 0, blue: 0}, type: object, properties: {red: {description: 'The red component of RGB', type: number, format: integer}, green: {description: 'The green component of RGB', type: number, format: integer}, blue: {description: 'The blue component of RGB', type: number, format: integer}}}, fogLights: {example: [{location: front, state: inactive}, {location: rear, state: active}], type: array, items: {type: object, properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}}}, readingLamps: {example: [{location: front_left, state: active}, {location: front_right, state: active}, {location: rear_right, state: inactive}, {location: rear_left, state: inactive}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_left, rear_right]}, state: {type: string, enum: [active, inactive]}}}}, interiorLights: {example: [{location: front, state: inactive}, {location: rear, state: active}], type: array, items: {type: object, properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [active, inactive]}}}}}}}]
            responses: {'200': {description: 'Lights State', schema: {$ref: '#/definitions/lights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /maintenance:
        get:
            tags: [Maintenance]
            summary: 'Get Maintenance state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Maintenance State', schema: {$ref: '#/definitions/maintenance'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /maintenance/availability:
        get:
            tags: [Maintenance]
            summary: 'Get Maintenance availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=cbsReportsCount,teleserviceAvailability)', example: 'cbsReportsCount,teleserviceAvailability'}]
            responses: {'200': {description: 'Maintenance Availability State', schema: {$ref: '#/definitions/maintenance.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /messaging/message_received:
        put:
            tags: [Messaging]
            summary: 'Notify the vehicle that a message has been received. Depending on the vehicle system, it will display or read it loud to the driver.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'The text', example: 'Hey mom!', type: string}, handle: {description: 'The optional handle of message', example: Epp, type: string}}}}]
            responses: {'200': {description: 'Messaging State', schema: {$ref: '#/definitions/messaging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /mobile:
        get:
            tags: [Mobile]
            summary: 'Get Mobile state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Mobile State', schema: {$ref: '#/definitions/mobile'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /mobile/availability:
        get:
            tags: [Mobile]
            summary: 'Get Mobile availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=connection)', example: connection}]
            responses: {'200': {description: 'Mobile Availability State', schema: {$ref: '#/definitions/mobile.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /multi_command/multi_command:
        put:
            tags: ['Multi Command']
            summary: 'Send multiple commands at once.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {multiCommands: {description: 'The outgoing commands', example: {browser: {loadUrl: {url: 'https://about.high-mobility.com'}}, charging: {openCloseChargingPort: {chargePortState: open}, setChargeLimit: {chargeLimit: 0.9}}}, type: array, items: {type: capability_state}}}}}]
            responses: {'200': {description: 'Multi Command State', schema: {$ref: '#/definitions/multiCommand'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination:
        get:
            tags: ['Navi Destination']
            summary: 'Get Navi Destination state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Navi Destination State', schema: {$ref: '#/definitions/naviDestination'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination/availability:
        get:
            tags: ['Navi Destination']
            summary: 'Get Navi Destination availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=coordinates,destinationName)', example: 'coordinates,destinationName'}]
            responses: {'200': {description: 'Navi Destination Availability State', schema: {$ref: '#/definitions/naviDestination.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination/set_navi_destination:
        put:
            tags: ['Navi Destination']
            summary: 'Set the navigation destination. This will be forwarded to the navigation system of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {coordinates: {example: {latitude: 52.520008, longitude: 13.404954}, type: object, properties: {latitude: {description: Latitude, type: number, format: double}, longitude: {description: Longitude, type: number, format: double}}}, destinationName: {description: 'Destination name', example: Berlin, type: string}}}}]
            responses: {'200': {description: 'Navi Destination State', schema: {$ref: '#/definitions/naviDestination'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/action:
        put:
            tags: [Notifications]
            summary: 'Activate/choose a notification action.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {activatedAction: {description: 'Identifier of the activated action', example: 27, type: number, format: integer}}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/clear_notification:
        put:
            tags: [Notifications]
            summary: 'Clear the Notification in either the vehicle or device that has previously been sent, ignoring driver feedback.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/notification:
        put:
            tags: [Notifications]
            summary: 'Send a notification to the vehicle or smart device. The notification can have action items that the user can respond with.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'Text for the notification', example: 'Open Garage', type: string}, actionItems: {example: [{id: 27, name: Open}, {id: 28, name: Cancel}], type: array, items: {type: object, properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}}}}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /offroad:
        get:
            tags: [Offroad]
            summary: 'Get Offroad state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Offroad State', schema: {$ref: '#/definitions/offroad'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /offroad/availability:
        get:
            tags: [Offroad]
            summary: 'Get Offroad availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=routeIncline,wheelSuspension)', example: 'routeIncline,wheelSuspension'}]
            responses: {'200': {description: 'Offroad Availability State', schema: {$ref: '#/definitions/offroad.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake:
        get:
            tags: ['Parking Brake']
            summary: 'Get Parking Brake state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Parking Brake State', schema: {$ref: '#/definitions/parkingBrake'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake/availability:
        get:
            tags: ['Parking Brake']
            summary: 'Get Parking Brake availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=status)', example: status}]
            responses: {'200': {description: 'Parking Brake Availability State', schema: {$ref: '#/definitions/parkingBrake.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake/set_parking_brake:
        put:
            tags: ['Parking Brake']
            summary: 'Turn on or off the parking brake.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Parking Brake State', schema: {$ref: '#/definitions/parkingBrake'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket:
        get:
            tags: ['Parking Ticket']
            summary: 'Get Parking Ticket state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/availability:
        get:
            tags: ['Parking Ticket']
            summary: 'Get Parking Ticket availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=operatorName,status)', example: 'operatorName,status'}]
            responses: {'200': {description: 'Parking Ticket Availability State', schema: {$ref: '#/definitions/parkingTicket.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/end_parking:
        put:
            tags: ['Parking Ticket']
            summary: 'End parking. This updates the parking ticket information. If no end date was set, the current time is set as the ending time.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/start_parking:
        put:
            tags: ['Parking Ticket']
            summary: 'Start parking. This clears the last parking ticket information and starts a new one. The end time can be left unset depending on the operator.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {operatorTicketID: {description: 'Operator ticket ID', example: 6489AB4233, type: string}, ticketStartTime: {description: 'Parking ticket start time', example: '2017-01-10T19:34:22.000Z', type: string, format: date-time}, operatorName: {description: 'Operator name', example: 'Berlin Parking', type: string}, ticketEndTime: {description: 'Parking ticket end time', example: '2019-10-08T11:21:45.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff:
        get:
            tags: ['Power Take-Off']
            summary: 'Get Power Take-Off state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Power Take-Off State', schema: {$ref: '#/definitions/powerTakeoff'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff/availability:
        get:
            tags: ['Power Take-Off']
            summary: 'Get Power Take-Off availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=engaged,status)', example: 'engaged,status'}]
            responses: {'200': {description: 'Power Take-Off Availability State', schema: {$ref: '#/definitions/powerTakeoff.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff/activate_deactivate_power_takeoff:
        put:
            tags: ['Power Take-Off']
            summary: 'Activate or deactivate power take-off.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Power Take-Off State', schema: {$ref: '#/definitions/powerTakeoff'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /race:
        get:
            tags: [Race]
            summary: 'Get Race state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Race State', schema: {$ref: '#/definitions/race'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /race/availability:
        get:
            tags: [Race]
            summary: 'Get Race availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=accelerations,understeering)', example: 'accelerations,understeering'}]
            responses: {'200': {description: 'Race Availability State', schema: {$ref: '#/definitions/race.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /remote_control:
        get:
            tags: ['Remote Control']
            summary: 'Get Remote Control state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Remote Control State', schema: {$ref: '#/definitions/remoteControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /remote_control/availability:
        get:
            tags: ['Remote Control']
            summary: 'Get Remote Control availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=angle,controlMode)', example: 'angle,controlMode'}]
            responses: {'200': {description: 'Remote Control Availability State', schema: {$ref: '#/definitions/remoteControl.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /remote_control/control_command:
        put:
            tags: ['Remote Control']
            summary: 'To be sent every time the controls for the vehicle wants to be changed or once a second if the controls remain the same. If the vehicle does not receive the command every second it will stop the control mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {angle: {description: 'Wheel base angle', example: {degrees: 50}}, speed: {description: 'Target speed', example: {kilometers_per_hour: 5}}}}}]
            responses: {'200': {description: 'Remote Control State', schema: {$ref: '#/definitions/remoteControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /remote_control/start_control:
        put:
            tags: ['Remote Control']
            summary: 'Attempt to start the control mode of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Remote Control State', schema: {$ref: '#/definitions/remoteControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /remote_control/stop_control:
        put:
            tags: ['Remote Control']
            summary: 'Attempt to stop the control mode of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Remote Control State', schema: {$ref: '#/definitions/remoteControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control:
        get:
            tags: ['Rooftop Control']
            summary: 'Get Rooftop Control state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Rooftop Control State', schema: {$ref: '#/definitions/rooftopControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control/availability:
        get:
            tags: ['Rooftop Control']
            summary: 'Get Rooftop Control availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=dimming,position)', example: 'dimming,position'}]
            responses: {'200': {description: 'Rooftop Control Availability State', schema: {$ref: '#/definitions/rooftopControl.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control/control_rooftop:
        put:
            tags: ['Rooftop Control']
            summary: 'Set the rooftop state.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {dimming: {description: '1.0 (100%) is opaque, 0.0 (0%) is transparent', example: 1, type: number, format: double}, position: {description: '1.0 (100%) is fully open, 0.0 (0%) is closed', example: 0.5, type: number, format: double}, convertibleRoofState: {example: open, type: string, enum: [closed, closed_secured, emergency_locked, hard_top_mounted, intermediate_position, loading_position, loading_position_immediate, open, open_secured]}, sunroofTiltState: {example: half_tilted, type: string, enum: [closed, half_tilted, tilted]}, sunroofState: {example: open, type: string, enum: [closed, intermediate, open]}}}}]
            responses: {'200': {description: 'Rooftop Control State', schema: {$ref: '#/definitions/rooftopControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /seats:
        get:
            tags: [Seats]
            summary: 'Get Seats state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Seats State', schema: {$ref: '#/definitions/seats'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /seats/availability:
        get:
            tags: [Seats]
            summary: 'Get Seats availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=personsDetected,seatbeltsState)', example: 'personsDetected,seatbeltsState'}]
            responses: {'200': {description: 'Seats Availability State', schema: {$ref: '#/definitions/seats.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /tachograph:
        get:
            tags: [Tachograph]
            summary: 'Get Tachograph state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Tachograph State', schema: {$ref: '#/definitions/tachograph'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /tachograph/availability:
        get:
            tags: [Tachograph]
            summary: 'Get Tachograph availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=driversTimeStates,driversWorkingStates)', example: 'driversTimeStates,driversWorkingStates'}]
            responses: {'200': {description: 'Tachograph Availability State', schema: {$ref: '#/definitions/tachograph.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /text_input/text_input:
        put:
            tags: ['Text Input']
            summary: 'Send a keystroke or entire sentences as input to the vehicle headunit. This can act as an alternative to the input devices that the vehicle is equipped with.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'The text', example: 'Rendezvous with Rama', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm:
        get:
            tags: ['Theft Alarm']
            summary: 'Get Theft Alarm state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Theft Alarm State', schema: {$ref: '#/definitions/theftAlarm'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm/availability:
        get:
            tags: ['Theft Alarm']
            summary: 'Get Theft Alarm availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=interiorProtectionStatus,status)', example: 'interiorProtectionStatus,status'}]
            responses: {'200': {description: 'Theft Alarm Availability State', schema: {$ref: '#/definitions/theftAlarm.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm/set_theft_alarm:
        put:
            tags: ['Theft Alarm']
            summary: 'Unarm or arm the theft alarm of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: armed, type: string, enum: [armed, triggered, unarmed]}}}}]
            responses: {'200': {description: 'Theft Alarm State', schema: {$ref: '#/definitions/theftAlarm'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk:
        get:
            tags: [Trunk]
            summary: 'Get Trunk state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Trunk State', schema: {$ref: '#/definitions/trunk'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk/availability:
        get:
            tags: [Trunk]
            summary: 'Get Trunk availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=lock,position)', example: 'lock,position'}]
            responses: {'200': {description: 'Trunk Availability State', schema: {$ref: '#/definitions/trunk.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk/control_trunk:
        put:
            tags: [Trunk]
            summary: 'Unlock/Lock and Open/Close the trunk.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {lock: {example: unlocked, type: string, enum: [locked, unlocked]}, position: {example: open, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Trunk State', schema: {$ref: '#/definitions/trunk'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /usage:
        get:
            tags: [Usage]
            summary: 'Get Usage state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Usage State', schema: {$ref: '#/definitions/usage'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /usage/availability:
        get:
            tags: [Usage]
            summary: 'Get Usage availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=averageWeeklyDistance,averageWeeklyDistanceLongRun)', example: 'averageWeeklyDistance,averageWeeklyDistanceLongRun'}]
            responses: {'200': {description: 'Usage Availability State', schema: {$ref: '#/definitions/usage.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode:
        get:
            tags: ['Valet Mode']
            summary: 'Get Valet Mode state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Valet Mode State', schema: {$ref: '#/definitions/valetMode'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode/availability:
        get:
            tags: ['Valet Mode']
            summary: 'Get Valet Mode availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=status)', example: status}]
            responses: {'200': {description: 'Valet Mode Availability State', schema: {$ref: '#/definitions/valetMode.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode/activate_deactivate_valet_mode:
        put:
            tags: ['Valet Mode']
            summary: 'Activate or deactivate valet mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [active, inactive]}}}}]
            responses: {'200': {description: 'Valet Mode State', schema: {$ref: '#/definitions/valetMode'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_information:
        get:
            tags: ['Vehicle Information']
            summary: 'Get Vehicle Information state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Information State', schema: {$ref: '#/definitions/vehicleInformation'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_location:
        get:
            tags: ['Vehicle Location']
            summary: 'Get Vehicle Location state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Location State', schema: {$ref: '#/definitions/vehicleLocation'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_location/availability:
        get:
            tags: ['Vehicle Location']
            summary: 'Get Vehicle Location availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=coordinates,heading)', example: 'coordinates,heading'}]
            responses: {'200': {description: 'Vehicle Location Availability State', schema: {$ref: '#/definitions/vehicleLocation.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_status:
        get:
            tags: ['Vehicle Status']
            summary: 'Get Vehicle Status state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Status State', schema: {$ref: '#/definitions/vehicleStatus'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_time:
        get:
            tags: ['Vehicle Time']
            summary: 'Get Vehicle Time state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Time State', schema: {$ref: '#/definitions/vehicleTime'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_time/availability:
        get:
            tags: ['Vehicle Time']
            summary: 'Get Vehicle Time availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=vehicleTime)', example: vehicleTime}]
            responses: {'200': {description: 'Vehicle Time Availability State', schema: {$ref: '#/definitions/vehicleTime.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /video_handover/video_handover:
        put:
            tags: ['Video Handover']
            summary: 'Hand over a video from smart device to vehicle headunit to be shown in the vehicle display. The emulator supports HTML5 video player formats .mp4 and .webm.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {url: {description: 'URL string', example: 'https://bit.ly/2obY7G5', type: string}, startingTime: {description: 'Start the video from the given time', example: {seconds: 2.5}}, screen: {example: rear, type: string, enum: [front, rear]}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wake_up/wake_up:
        put:
            tags: ['Wake Up']
            summary: 'Wake up the vehicle. This is necessary when the vehicle has fallen asleep, in which case the vehicle responds with the Failure Message to all incoming messages. The vehicle is also waken up by the Lock/Unlock Doors message.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /weather_conditions:
        get:
            tags: ['Weather Conditions']
            summary: 'Get Weather Conditions state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Weather Conditions State', schema: {$ref: '#/definitions/weatherConditions'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /weather_conditions/availability:
        get:
            tags: ['Weather Conditions']
            summary: 'Get Weather Conditions availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=rainIntensity)', example: rainIntensity}]
            responses: {'200': {description: 'Weather Conditions Availability State', schema: {$ref: '#/definitions/weatherConditions.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi:
        get:
            tags: [Wi-Fi]
            summary: 'Get Wi-Fi state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/availability:
        get:
            tags: [Wi-Fi]
            summary: 'Get Wi-Fi availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=networkConnected,status)', example: 'networkConnected,status'}]
            responses: {'200': {description: 'Wi-Fi Availability State', schema: {$ref: '#/definitions/wiFi.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/connect_to_network:
        put:
            tags: [Wi-Fi]
            summary: 'Connect the vehicle to a Wi-Fi network.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {networkSSID: {description: 'The network SSID', example: HOME, type: string}, networkSecurity: {example: wpa2_personal, type: string, enum: [none, wep, wpa, wpa2_personal]}, password: {description: 'The network password', example: great_secret12, type: string}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/enable_disable_wi_fi:
        put:
            tags: [Wi-Fi]
            summary: 'Enable or disable Wi-Fi completely.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/forget_network:
        put:
            tags: [Wi-Fi]
            summary: 'Forget a network that the vehicle has previously connected to.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {networkSSID: {description: 'The network SSID', example: HOME, type: string}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows:
        get:
            tags: [Windows]
            summary: 'Get Windows state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Windows State', schema: {$ref: '#/definitions/windows'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows/availability:
        get:
            tags: [Windows]
            summary: 'Get Windows availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=openPercentages,positions)', example: 'openPercentages,positions'}]
            responses: {'200': {description: 'Windows Availability State', schema: {$ref: '#/definitions/windows.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows/control_windows:
        put:
            tags: [Windows]
            summary: 'Open or close the windows. Either one or all windows can be controlled with the same command.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {openPercentages: {example: [{location: front_left, openPercentage: 0.2}, {location: front_right, openPercentage: 0.5}, {location: rear_right, openPercentage: 0.5}, {location: rear_left, openPercentage: 0.1}, {location: hatch, openPercentage: 0.18}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, hatch, rear_left, rear_right]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}}}, positions: {example: [{location: front_left, position: open}, {location: front_right, position: open}, {location: rear_right, position: closed}, {location: rear_left, position: open}, {location: hatch, position: open}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, hatch, rear_left, rear_right]}, position: {type: string, enum: [closed, intermediate, open]}}}}}}}]
            responses: {'200': {description: 'Windows State', schema: {$ref: '#/definitions/windows'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen:
        get:
            tags: [Windscreen]
            summary: 'Get Windscreen state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/availability:
        get:
            tags: [Windscreen]
            summary: 'Get Windscreen availability'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: query, name: properties, type: string, description: 'Comma separated list of properties to request (?properties=wipersIntensity,wipersStatus)', example: 'wipersIntensity,wipersStatus'}]
            responses: {'200': {description: 'Windscreen Availability State', schema: {$ref: '#/definitions/windscreen.availability'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/control_wipers:
        put:
            tags: [Windscreen]
            summary: 'Control the wipers.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {wipersStatus: {example: automatic, type: string, enum: [active, automatic, inactive]}, wipersIntensity: {example: level_3, type: string, enum: [level_0, level_1, level_2, level_3]}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/set_windscreen_damage:
        put:
            tags: [Windscreen]
            summary: 'Set the windscreen damage. This is for instance used to reset the glass damage or correct it. Damage confidence percentage is automatically set to either 0% or 100%.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {windscreenDamage: {example: impact_but_no_damage_detected, type: string, enum: [damage_larger_than_1_inch, damage_smaller_than_1_inch, impact_but_no_damage_detected, no_impact_detected]}, windscreenDamageZone: {description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)', example: {horizontal: 1, vertical: 2}, type: object, properties: {horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}, vertical: {description: 'Vertical component of the matrix', type: number, format: integer}}}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/set_windscreen_replacement_needed:
        put:
            tags: [Windscreen]
            summary: 'Set if the windscreen needs replacement.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {windscreenNeedsReplacement: {example: no_replacement_needed, type: string, enum: [no_replacement_needed, replacement_needed, unknown]}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
