info:
    title: 'HM REST Auto API'
    version: 4.0.0
    description: 'High Mobility REST Auto API Level 12 specification'
swagger: '2.0'
host: sandbox.rest-api.high-mobility.com
basePath: /v4
parameters:
    authorizationParam:
        name: Authorization
        in: header
        required: true
        type: string
definitions:
    browser.url:
        description: 'The URL'
        example:
            data: {value: 'https://about.high-mobility.com'}
            timestamp: '2021-01-11T08:09:28.594Z'
        type: string
    capabilities.capabilities:
        example:
            - {data: {capabilityID: {value: 32}, supportedPropertyIDs: [2, 3, 4, 5, 6]}, timestamp: '2021-01-11T08:09:28.594Z'}
            - {data: {capabilityID: {value: 35}, supportedPropertyIDs: [2, 8, 17]}, timestamp: '2021-01-11T08:09:28.594Z'}
        type: array
        items:
            type: object
            properties: {capabilityID: {description: 'The identifier of the supported capability', type: number, format: integer}, supportedPropertyIDs: {description: 'Array of supported property identifiers', type: array, items: {type: number, format: integer}}}
    capabilities.webhooks:
        example:
            - {data: {available: {value: available}, event: {value: trip_started}}, timestamp: '2021-01-11T08:09:28.594Z'}
            - {data: {available: {value: available}, event: {value: trip_ended}}, timestamp: '2021-01-11T08:09:28.594Z'}
        type: array
        items:
            type: object
            properties: {available: {description: 'If the specified webhook is available.', type: string, enum: [unavailable, available]}, event: {type: string, enum: [ping, trip_started, trip_ended, vehicle_location_changed, authorization_changed, tire_pressure_changed]}}
    capabilities:
        type: object
        properties:
            capabilities: {$ref: '#/definitions/capabilities.capabilities'}
            webhooks: {$ref: '#/definitions/capabilities.webhooks'}
    charging.estimatedRange:
        description: 'Estimated range'
        example:
            data: {value: 432.1, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.594Z'
    charging.batteryLevel:
        description: 'Battery level percentage between 0.0-1.0'
        example:
            data: {value: 0.5}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: number
        format: double
    charging.batteryCurrentAC:
        description: 'Battery alternating current'
        example:
            data: {value: -0.6, unit: amperes}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.batteryCurrentDC:
        description: 'Battery direct current'
        example:
            data: {value: -0.6, unit: amperes}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.chargerVoltageAC:
        description: 'Charger voltage for alternating current'
        example:
            data: {value: 400, unit: volts}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.chargerVoltageDC:
        description: 'Charger voltage for direct current'
        example:
            data: {value: 400, unit: volts}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.chargeLimit:
        description: 'Charge limit percentage between 0.0-1.0'
        example:
            data: {value: 0.9}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: number
        format: double
    charging.timeToCompleteCharge:
        description: 'Time until charging completed'
        example:
            data: {value: 60, unit: minutes}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.chargingRateKW:
        description: 'Charging rate'
        example:
            data: {value: 3.5, unit: kilowatts}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.chargePortState:
        example:
            data: {value: open}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - closed
            - open
    charging.chargeMode:
        example:
            data: {value: timer_based}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - immediate
            - timer_based
            - inductive
    charging.maxChargingCurrent:
        description: 'Maximum charging current'
        example:
            data: {value: 25, unit: amperes}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.plugType:
        example:
            data: {value: type_2}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - type_1
            - type_2
            - ccs
            - chademo
    charging.chargingWindowChosen:
        example:
            data: {value: not_chosen}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - not_chosen
            - chosen
    charging.departureTimes:
        example:
            - {data: {state: {value: active}, time: {hour: {value: 16}, minute: {value: 32}}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {state: {value: inactive}, time: {hour: {value: 11}, minute: {value: 51}}}, timestamp: '2021-01-11T08:09:28.595Z'}
        type: array
        items:
            type: object
            properties: {state: {type: string, enum: [inactive, active]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.reductionTimes:
        example:
            - {data: {startStop: {value: start}, time: {hour: {value: 17}, minute: {value: 33}}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {startStop: {value: stop}, time: {hour: {value: 12}, minute: {value: 52}}}, timestamp: '2021-01-11T08:09:28.595Z'}
        type: array
        items:
            type: object
            properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.batteryTemperature:
        description: 'Battery temperature'
        example:
            data: {value: 38.4, unit: celsius}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.timers:
        example:
            - {data: {timerType: {value: preferred_start_time}, date: {value: '2017-01-10T16:32:05.000Z'}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {timerType: {value: preferred_end_time}, date: {value: '2017-01-10T16:36:05.000Z'}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {timerType: {value: departure_date}, date: {value: '2017-01-10T16:36:05.000Z'}}, timestamp: '2021-01-11T08:09:28.595Z'}
        type: array
        items:
            type: object
            properties: {timerType: {type: string, enum: [preferred_start_time, preferred_end_time, departure_date]}, date: {description: 'Timer date', type: string, format: date-time}}
    charging.pluggedIn:
        example:
            data: {value: plugged_in}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - disconnected
            - plugged_in
    charging.status:
        example:
            data: {value: charging}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - not_charging
            - charging
            - charging_complete
            - initialising
            - charging_paused
            - charging_error
            - cable_unplugged
            - slow_charging
            - fast_charging
            - discharging
            - foreign_object_detected
    charging.chargingRate:
        description: 'Charge rate when charging'
        example:
            data: {value: 150, unit: kilowatts}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.batteryCurrent:
        description: 'Battery current'
        example:
            data: {value: -0.6, unit: amperes}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.chargerVoltage:
        description: 'Charger voltage'
        example:
            data: {value: 400, unit: volts}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.currentType:
        description: 'Type of current in use'
        example:
            data: {value: alternating_current}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - alternating_current
            - direct_current
    charging.maxRange:
        description: 'Maximum electric range with 100% of battery'
        example:
            data: {value: 555, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.595Z'
    charging.starterBatteryState:
        description: 'State of the starter battery'
        example:
            data: {value: green}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - red
            - yellow
            - green
    charging.smartChargingStatus:
        description: 'Status of optimized/intelligent charging'
        example:
            data: {value: scc_is_active}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - wallbox_is_active
            - scc_is_active
            - peak_setting_active
    charging.batteryLevelAtDeparture:
        description: 'Battery charge level expected at time of departure'
        example:
            data: {value: 0.9}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: number
        format: double
    charging.preconditioningDepartureStatus:
        description: 'Status of preconditioning at departure time'
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - inactive
            - active
    charging.preconditioningImmediateStatus:
        description: 'Status of immediate preconditioning'
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - inactive
            - active
    charging.preconditioningDepartureEnabled:
        description: 'Preconditioning activation status at departure'
        example:
            data: {value: enabled}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - disabled
            - enabled
    charging.preconditioningError:
        description: 'Preconditioning error if one is encountered'
        example:
            data: {value: not_possible_low}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - no_change
            - not_possible_low
            - not_possible_finished
            - available_after_engine_restart
            - general_error
    charging:
        type: object
        properties:
            estimatedRange: {$ref: '#/definitions/charging.estimatedRange'}
            batteryLevel: {$ref: '#/definitions/charging.batteryLevel'}
            batteryCurrentAC: {$ref: '#/definitions/charging.batteryCurrentAC'}
            batteryCurrentDC: {$ref: '#/definitions/charging.batteryCurrentDC'}
            chargerVoltageAC: {$ref: '#/definitions/charging.chargerVoltageAC'}
            chargerVoltageDC: {$ref: '#/definitions/charging.chargerVoltageDC'}
            chargeLimit: {$ref: '#/definitions/charging.chargeLimit'}
            timeToCompleteCharge: {$ref: '#/definitions/charging.timeToCompleteCharge'}
            chargingRateKW: {$ref: '#/definitions/charging.chargingRateKW'}
            chargePortState: {$ref: '#/definitions/charging.chargePortState'}
            chargeMode: {$ref: '#/definitions/charging.chargeMode'}
            maxChargingCurrent: {$ref: '#/definitions/charging.maxChargingCurrent'}
            plugType: {$ref: '#/definitions/charging.plugType'}
            chargingWindowChosen: {$ref: '#/definitions/charging.chargingWindowChosen'}
            departureTimes: {$ref: '#/definitions/charging.departureTimes'}
            reductionTimes: {$ref: '#/definitions/charging.reductionTimes'}
            batteryTemperature: {$ref: '#/definitions/charging.batteryTemperature'}
            timers: {$ref: '#/definitions/charging.timers'}
            pluggedIn: {$ref: '#/definitions/charging.pluggedIn'}
            status: {$ref: '#/definitions/charging.status'}
            chargingRate: {$ref: '#/definitions/charging.chargingRate'}
            batteryCurrent: {$ref: '#/definitions/charging.batteryCurrent'}
            chargerVoltage: {$ref: '#/definitions/charging.chargerVoltage'}
            currentType: {$ref: '#/definitions/charging.currentType'}
            maxRange: {$ref: '#/definitions/charging.maxRange'}
            starterBatteryState: {$ref: '#/definitions/charging.starterBatteryState'}
            smartChargingStatus: {$ref: '#/definitions/charging.smartChargingStatus'}
            batteryLevelAtDeparture: {$ref: '#/definitions/charging.batteryLevelAtDeparture'}
            preconditioningDepartureStatus: {$ref: '#/definitions/charging.preconditioningDepartureStatus'}
            preconditioningImmediateStatus: {$ref: '#/definitions/charging.preconditioningImmediateStatus'}
            preconditioningDepartureEnabled: {$ref: '#/definitions/charging.preconditioningDepartureEnabled'}
            preconditioningError: {$ref: '#/definitions/charging.preconditioningError'}
    chassisSettings.drivingMode:
        example:
            data: {value: eco}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - regular
            - eco
            - sport
            - sport_plus
            - ecoPlus
            - comfort
    chassisSettings.sportChrono:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.595Z'
        type: string
        enum:
            - inactive
            - active
            - reset
    chassisSettings.currentSpringRates:
        description: 'The current values for the spring rates'
        example:
            - {data: {axle: {value: front}, springRate: {value: 21, unit: newton_millimeters}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {axle: {value: rear}, springRate: {value: 23, unit: newton_millimeters}}, timestamp: '2021-01-11T08:09:28.595Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.maximumSpringRates:
        description: 'The maximum possible values for the spring rates'
        example:
            - {data: {axle: {value: front}, springRate: {value: 37, unit: newton_millimeters}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {axle: {value: rear}, springRate: {value: 39, unit: newton_millimeters}}, timestamp: '2021-01-11T08:09:28.595Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.minimumSpringRates:
        description: 'The minimum possible values for the spring rates'
        example:
            - {data: {axle: {value: front}, springRate: {value: 16, unit: newton_millimeters}}, timestamp: '2021-01-11T08:09:28.595Z'}
            - {data: {axle: {value: rear}, springRate: {value: 18, unit: newton_millimeters}}, timestamp: '2021-01-11T08:09:28.595Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}
    chassisSettings.currentChassisPosition:
        description: 'The chassis position calculated from the lowest point'
        example:
            data: {value: 25.4, unit: millimeters}
            timestamp: '2021-01-11T08:09:28.595Z'
    chassisSettings.maximumChassisPosition:
        description: 'The maximum possible value for the chassis position'
        example:
            data: {value: 55.5, unit: millimeters}
            timestamp: '2021-01-11T08:09:28.596Z'
    chassisSettings.minimumChassisPosition:
        description: 'The minimum possible value for the chassis position'
        example:
            data: {value: -28.4, unit: millimeters}
            timestamp: '2021-01-11T08:09:28.596Z'
    chassisSettings:
        type: object
        properties:
            drivingMode: {$ref: '#/definitions/chassisSettings.drivingMode'}
            sportChrono: {$ref: '#/definitions/chassisSettings.sportChrono'}
            currentSpringRates: {$ref: '#/definitions/chassisSettings.currentSpringRates'}
            maximumSpringRates: {$ref: '#/definitions/chassisSettings.maximumSpringRates'}
            minimumSpringRates: {$ref: '#/definitions/chassisSettings.minimumSpringRates'}
            currentChassisPosition: {$ref: '#/definitions/chassisSettings.currentChassisPosition'}
            maximumChassisPosition: {$ref: '#/definitions/chassisSettings.maximumChassisPosition'}
            minimumChassisPosition: {$ref: '#/definitions/chassisSettings.minimumChassisPosition'}
    climate.insideTemperature:
        description: 'The inside temperature'
        example:
            data: {value: 19.1, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    climate.outsideTemperature:
        description: 'The outside temperature'
        example:
            data: {value: 12.2, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    climate.driverTemperatureSetting:
        description: 'The driver temperature setting'
        example:
            data: {value: 21.5, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    climate.passengerTemperatureSetting:
        description: 'The passenger temperature setting'
        example:
            data: {value: 21.7, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    climate.hvacState:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - inactive
            - active
    climate.defoggingState:
        example:
            data: {value: inactive}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - inactive
            - active
    climate.defrostingState:
        example:
            data: {value: inactive}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - inactive
            - active
    climate.ionisingState:
        example:
            data: {value: inactive}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - inactive
            - active
    climate.defrostingTemperatureSetting:
        description: 'The defrosting temperature setting'
        example:
            data: {value: 21.2, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    climate.hvacWeekdayStartingTimes:
        example:
            - {data: {weekday: {value: monday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: tuesday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: wednesday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: thursday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: friday}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: saturday}, time: {hour: {value: 18}, minute: {value: 30}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: sunday}, time: {hour: {value: 19}, minute: {value: 31}}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {weekday: {value: automatic}, time: {hour: {value: 16}, minute: {value: 0}}}, timestamp: '2021-01-11T08:09:28.596Z'}
        type: array
        items:
            type: object
            properties: {weekday: {type: string, enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday, automatic]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    climate.rearTemperatureSetting:
        description: 'The rear temperature'
        example:
            data: {value: 21.6, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    climate:
        type: object
        properties:
            insideTemperature: {$ref: '#/definitions/climate.insideTemperature'}
            outsideTemperature: {$ref: '#/definitions/climate.outsideTemperature'}
            driverTemperatureSetting: {$ref: '#/definitions/climate.driverTemperatureSetting'}
            passengerTemperatureSetting: {$ref: '#/definitions/climate.passengerTemperatureSetting'}
            hvacState: {$ref: '#/definitions/climate.hvacState'}
            defoggingState: {$ref: '#/definitions/climate.defoggingState'}
            defrostingState: {$ref: '#/definitions/climate.defrostingState'}
            ionisingState: {$ref: '#/definitions/climate.ionisingState'}
            defrostingTemperatureSetting: {$ref: '#/definitions/climate.defrostingTemperatureSetting'}
            hvacWeekdayStartingTimes: {$ref: '#/definitions/climate.hvacWeekdayStartingTimes'}
            rearTemperatureSetting: {$ref: '#/definitions/climate.rearTemperatureSetting'}
    dashboardLights.dashboardLights:
        example:
            - {data: {name: {value: high_beam}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: low_beam}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: hazard_warning}, state: {value: on}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: brake_failure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: hatch_open}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: fuel_level}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: engine_coolant_temperature}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: battery_charging_condition}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: engine_oil}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: position_lights}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: front_fog_light}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: rear_fog_light}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: park_heating}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: engine_indicator}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: service_call}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: transmission_fluid_temperature}, state: {value: on}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: transmission_failure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: anti_lock_brake_failure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: worn_brake_linings}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: windscreen_washer_fluid}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_failure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: engine_oil_level}, state: {value: on}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: engine_coolant_level}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: steering_failure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: esc_indication}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: brake_lights}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: adblue_level}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: fuel_filter_diff_pressure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: seat_belt}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: advanced_braking}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: acc}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: trailer_connected}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: airbag}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: esc_switched_off}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: lane_departure_warning_off}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: air_filter_minder}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: air_suspension_ride_control_fault}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: all_wheel_drive_disabled}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: anti_theft}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: blind_spot_detection}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: charge_system_fault}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: check_fuel_cap}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: check_fuel_fill_inlet}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: check_fuel_filter}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: dc_temp_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: dc_warning_status}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_engine_idle_shutdown}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_engine_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_exhaust_fluid_system_fault}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_exhaust_over_temp}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_exhaust_fluid_quality}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_filter_regeneration}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_particulate_filter}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: diesel_pre_heat}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: electric_trailer_brake_connection}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_cell_max_volt_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_cell_min_volt_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_charge_energy_storage_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_high_level_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_high_temperature_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_insulation_resist_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_jump_level_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_low_level_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_max_volt_veh_energy_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_min_volt_veh_energy_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_over_charge_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_poor_cell_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: ev_battery_temp_diff_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: forward_collision_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: fuel_door_open}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: hill_descent_control_fault}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: hill_start_assist_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: hv_interlocking_status_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: lighting_system_failure}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: malfunction_indicator}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: motor_controller_temp_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: park_aid_malfunction}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: passive_entry_passive_start}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: powertrain_malfunction}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: restraints_indicator_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: start_stop_engine_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: traction_control_disabled}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: traction_control_active}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: traction_motor_temp_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_pressure_monitor_system_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: water_in_fuel}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_warning_front_right}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_warning_front_left}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_warning_rear_right}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_warning_rear_left}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: tire_warning_system_error}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: battery_low_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {name: {value: brake_fluid_warning}, state: {value: off}}, timestamp: '2021-01-11T08:09:28.596Z'}
        type: array
        items:
            type: object
            properties: {name: {type: string, enum: [high_beam, low_beam, hazard_warning, brake_failure, hatch_open, fuel_level, engine_coolant_temperature, battery_charging_condition, engine_oil, position_lights, front_fog_light, rear_fog_light, park_heating, engine_indicator, service_call, transmission_fluid_temperature, transmission_failure, anti_lock_brake_failure, worn_brake_linings, windscreen_washer_fluid, tire_failure, engine_oil_level, engine_coolant_level, steering_failure, esc_indication, brake_lights, adblue_level, fuel_filter_diff_pressure, seat_belt, advanced_braking, acc, trailer_connected, airbag, esc_switched_off, lane_departure_warning_off, air_filter_minder, air_suspension_ride_control_fault, all_wheel_drive_disabled, anti_theft, blind_spot_detection, charge_system_fault, check_fuel_cap, check_fuel_fill_inlet, check_fuel_filter, dc_temp_warning, dc_warning_status, diesel_engine_idle_shutdown, diesel_engine_warning, diesel_exhaust_fluid_system_fault, diesel_exhaust_over_temp, diesel_exhaust_fluid_quality, diesel_filter_regeneration, diesel_particulate_filter, diesel_pre_heat, electric_trailer_brake_connection, ev_battery_cell_max_volt_warning, ev_battery_cell_min_volt_warning, ev_battery_charge_energy_storage_warning, ev_battery_high_level_warning, ev_battery_high_temperature_warning, ev_battery_insulation_resist_warning, ev_battery_jump_level_warning, ev_battery_low_level_warning, ev_battery_max_volt_veh_energy_warning, ev_battery_min_volt_veh_energy_warning, ev_battery_over_charge_warning, ev_battery_poor_cell_warning, ev_battery_temp_diff_warning, forward_collision_warning, fuel_door_open, hill_descent_control_fault, hill_start_assist_warning, hv_interlocking_status_warning, lighting_system_failure, malfunction_indicator, motor_controller_temp_warning, park_aid_malfunction, passive_entry_passive_start, powertrain_malfunction, restraints_indicator_warning, start_stop_engine_warning, traction_control_disabled, traction_control_active, traction_motor_temp_warning, tire_pressure_monitor_system_warning, water_in_fuel, tire_warning_front_right, tire_warning_front_left, tire_warning_rear_right, tire_warning_rear_left, tire_warning_system_error, battery_low_warning, brake_fluid_warning]}, state: {type: string, enum: [off, on]}}
    dashboardLights:
        type: object
        properties:
            dashboardLights: {$ref: '#/definitions/dashboardLights.dashboardLights'}
    diagnostics.mileage:
        description: 'The vehicle mileage (odometer)'
        example:
            data: {value: 150000, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.engineOilTemperature:
        description: 'Engine oil temperature'
        example:
            data: {value: 99.5, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.speed:
        description: 'The vehicle speed'
        example:
            data: {value: 60, unit: kilometers_per_hour}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.engineRPM:
        description: 'Engine RPM (revolutions per minute)'
        example:
            data: {value: 2500, unit: revolutions_per_minute}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.fuelLevel:
        description: 'Fuel level percentage between 0.0-1.0'
        example:
            data: {value: 0.9}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: number
        format: double
    diagnostics.estimatedRange:
        description: 'Estimated range (with combustion engine)'
        example:
            data: {value: 265, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.washerFluidLevel:
        example:
            data: {value: filled}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - low
            - filled
    diagnostics.batteryVoltage:
        description: 'Battery voltage'
        example:
            data: {value: 12.1, unit: volts}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.adBlueLevel:
        description: 'AdBlue level percentage between 0.0-1.0'
        example:
            data: {value: 0.9}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: number
        format: double
    diagnostics.distanceSinceReset:
        description: 'The distance driven since reset'
        example:
            data: {value: 1500.1, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.distanceSinceStart:
        description: 'The distance driven since trip start'
        example:
            data: {value: 12.4, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.fuelVolume:
        description: 'The fuel volume measured in liters'
        example:
            data: {value: 35.5, unit: liters}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.antiLockBraking:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - inactive
            - active
    diagnostics.engineCoolantTemperature:
        description: 'Engine coolant temperature'
        example:
            data: {value: 20, unit: celsius}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.engineTotalOperatingHours:
        description: 'The accumulated time of engine operation'
        example:
            data: {value: 1500.65, unit: hours}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.engineTotalFuelConsumption:
        description: 'The accumulated lifespan fuel consumption'
        example:
            data: {value: 27587, unit: liters}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.brakeFluidLevel:
        example:
            data: {value: low}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: string
        enum:
            - low
            - filled
    diagnostics.engineTorque:
        description: 'Current engine torque percentage between 0.0-1.0'
        example:
            data: {value: 0.2}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: number
        format: double
    diagnostics.engineLoad:
        description: 'Current engine load percentage between 0.0-1.0'
        example:
            data: {value: 0.1}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: number
        format: double
    diagnostics.wheelBasedSpeed:
        description: 'The vehicle speed measured at the wheel base'
        example:
            data: {value: 65, unit: kilometers_per_hour}
            timestamp: '2021-01-11T08:09:28.596Z'
    diagnostics.batteryLevel:
        description: 'Battery level in %, value between 0.0 and 1.0'
        example:
            data: {value: 0.56}
            timestamp: '2021-01-11T08:09:28.596Z'
        type: number
        format: double
    diagnostics.checkControlMessages:
        example:
            - {data: {ID: {value: 1}, remainingTime: {value: 105592, unit: minutes}, text: {value: 'Check engine'}, status: {value: Alert}}, timestamp: '2021-01-11T08:09:28.596Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Check Control Message identifier', type: number, format: integer}, remainingTime: {description: 'Remaining time of the message'}, text: {description: 'CCM text', type: string}, status: {description: 'CCM status', type: string}}
    diagnostics.tirePressures:
        example:
            - {data: {location: {value: front_left}, pressure: {value: 2.31, unit: bars}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: front_right}, pressure: {value: 2.31, unit: bars}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_right}, pressure: {value: 2.24, unit: bars}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_left}, pressure: {value: 2.24, unit: bars}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_right_outer}, pressure: {value: 2.25, unit: bars}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_left_outer}, pressure: {value: 2.25, unit: bars}}, timestamp: '2021-01-11T08:09:28.596Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_right_outer, rear_left_outer]}, pressure: {description: 'Tire pressure'}}
    diagnostics.tireTemperatures:
        example:
            - {data: {location: {value: front_left}, temperature: {value: 40.1, unit: celsius}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: front_right}, temperature: {value: 40.2, unit: celsius}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_right}, temperature: {value: 40.3, unit: celsius}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_left}, temperature: {value: 40.4, unit: celsius}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_right_outer}, temperature: {value: 40.5, unit: celsius}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_left_outer}, temperature: {value: 40.6, unit: celsius}}, timestamp: '2021-01-11T08:09:28.596Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_right_outer, rear_left_outer]}, temperature: {description: 'Tire temperature'}}
    diagnostics.wheelRPMs:
        example:
            - {data: {location: {value: front_left}, RPM: {value: 737, unit: revolutions_per_minute}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: front_right}, RPM: {value: 747, unit: revolutions_per_minute}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_right}, RPM: {value: 777, unit: revolutions_per_minute}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_left}, RPM: {value: 787, unit: revolutions_per_minute}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_right_outer}, RPM: {value: 797, unit: revolutions_per_minute}}, timestamp: '2021-01-11T08:09:28.596Z'}
            - {data: {location: {value: rear_left_outer}, RPM: {value: 807, unit: revolutions_per_minute}}, timestamp: '2021-01-11T08:09:28.596Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Wheel location', type: string, enum: [front_left, front_right, rear_right, rear_left, rear_right_outer, rear_left_outer]}, RPM: {description: 'The RPM measured at this wheel'}}
    diagnostics.troubleCodes:
        example:
            - {data: {occurrences: {value: 2}, ID: {value: C1116FA}, ecuID: {value: RDU_212FR}, status: {value: PENDING}, system: {value: unknown}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {occurrences: {value: 2}, ID: {value: C163AFA}, ecuID: {value: DTR212}, status: {value: PENDING}, system: {value: body}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {occurrences: {description: 'Number of occurrences', type: number, format: integer}, ID: {description: Identifier, type: string}, ecuID: {description: 'Electronic Control Unit identifier', type: string}, status: {description: Status, type: string}, system: {type: string, enum: [unknown, body, chassis, powertrain, network]}}
    diagnostics.mileageMeters:
        description: 'The vehicle mileage (odometer) in meters'
        example:
            data: {value: 150001, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.597Z'
    diagnostics.odometer:
        description: 'The vehicle odometer value in a given units.'
        example:
            data: {value: 6.4, unit: megameters}
            timestamp: '2021-01-11T08:09:28.597Z'
    diagnostics.engineTotalOperatingTime:
        description: 'The accumulated time of engine operation'
        example:
            data: {value: 1500.65, unit: hours}
            timestamp: '2021-01-11T08:09:28.597Z'
    diagnostics.tirePressureStatuses:
        example:
            - {data: {location: {value: front_left}, status: {value: normal}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: front_right}, status: {value: low}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_right}, status: {value: alert}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_left}, status: {value: normal}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_right_outer}, status: {value: normal}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_left_outer}, status: {value: normal}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_right_outer, rear_left_outer]}, status: {type: string, enum: [normal, low, alert]}}
    diagnostics.brakeLiningWearPreWarning:
        description: 'Status of brake lining wear pre-warning'
        example:
            data: {value: inactive}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - inactive
            - active
    diagnostics.engineOilLifeRemaining:
        description: 'Remaining life of engine oil which decreases over time'
        example:
            data: {value: 0.88}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: number
        format: double
    diagnostics.oemTroubleCodeValues:
        description: 'Additional OEM trouble codes'
        example:
            - {data: {ID: {value: 123ID}, keyValue: {key: {value: some_error}, value: {value: some_value}}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {ID: {value: 1B3C}, keyValue: {key: {value: important_error}, value: {value: 'system fault 32'}}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Identifier for the trouble code', type: string}, keyValue: {description: 'Key-value pair for the trouble code', type: object, properties: {key: {description: 'Key for the value', type: string}, value: {description: 'Value for the key', type: string}}}}
    diagnostics.dieselExhaustFluidRange:
        description: 'Distance remaining until diesel exhaust fluid is empty'
        example:
            data: {value: 2233, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.597Z'
    diagnostics.dieselParticulateFilterSootLevel:
        description: 'Level of soot in diesel exhaust particulate filter'
        example:
            data: {value: 0.16}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: number
        format: double
    diagnostics.confirmedTroubleCodes:
        example:
            - {data: {ID: {value: 801C10}, ecuAddress: {value: '16'}, ecuVariantName: {value: CAS}, status: {value: ACTIVE}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {ID: {value: D52C44}, ecuAddress: {value: '48'}, ecuVariantName: {value: CAS}, status: {value: ACTIVE}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: Identifier, type: string}, ecuAddress: {description: 'Electronic Control Unit address', type: string}, ecuVariantName: {description: 'Electronic Control Unit variant name', type: string}, status: {description: Status, type: string}}
    diagnostics.dieselExhaustFilterStatus:
        example:
            data: {status: {value: unknown}, component: {value: exhaust_filter}, cleaning: {value: unknown}}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: object
        properties:
            status: {type: string, enum: [unknown, normal_operation, overloaded, at_limit, over_limit]}
            component: {type: string, enum: [unknown, exhaust_filter, diesel_particulate_filter, overboost_code_regulator, off_board_regeneration]}
            cleaning: {type: string, enum: [unknown, in_progress, complete, interrupted]}
    diagnostics:
        type: object
        properties:
            mileage: {$ref: '#/definitions/diagnostics.mileage'}
            engineOilTemperature: {$ref: '#/definitions/diagnostics.engineOilTemperature'}
            speed: {$ref: '#/definitions/diagnostics.speed'}
            engineRPM: {$ref: '#/definitions/diagnostics.engineRPM'}
            fuelLevel: {$ref: '#/definitions/diagnostics.fuelLevel'}
            estimatedRange: {$ref: '#/definitions/diagnostics.estimatedRange'}
            washerFluidLevel: {$ref: '#/definitions/diagnostics.washerFluidLevel'}
            batteryVoltage: {$ref: '#/definitions/diagnostics.batteryVoltage'}
            adBlueLevel: {$ref: '#/definitions/diagnostics.adBlueLevel'}
            distanceSinceReset: {$ref: '#/definitions/diagnostics.distanceSinceReset'}
            distanceSinceStart: {$ref: '#/definitions/diagnostics.distanceSinceStart'}
            fuelVolume: {$ref: '#/definitions/diagnostics.fuelVolume'}
            antiLockBraking: {$ref: '#/definitions/diagnostics.antiLockBraking'}
            engineCoolantTemperature: {$ref: '#/definitions/diagnostics.engineCoolantTemperature'}
            engineTotalOperatingHours: {$ref: '#/definitions/diagnostics.engineTotalOperatingHours'}
            engineTotalFuelConsumption: {$ref: '#/definitions/diagnostics.engineTotalFuelConsumption'}
            brakeFluidLevel: {$ref: '#/definitions/diagnostics.brakeFluidLevel'}
            engineTorque: {$ref: '#/definitions/diagnostics.engineTorque'}
            engineLoad: {$ref: '#/definitions/diagnostics.engineLoad'}
            wheelBasedSpeed: {$ref: '#/definitions/diagnostics.wheelBasedSpeed'}
            batteryLevel: {$ref: '#/definitions/diagnostics.batteryLevel'}
            checkControlMessages: {$ref: '#/definitions/diagnostics.checkControlMessages'}
            tirePressures: {$ref: '#/definitions/diagnostics.tirePressures'}
            tireTemperatures: {$ref: '#/definitions/diagnostics.tireTemperatures'}
            wheelRPMs: {$ref: '#/definitions/diagnostics.wheelRPMs'}
            troubleCodes: {$ref: '#/definitions/diagnostics.troubleCodes'}
            mileageMeters: {$ref: '#/definitions/diagnostics.mileageMeters'}
            odometer: {$ref: '#/definitions/diagnostics.odometer'}
            engineTotalOperatingTime: {$ref: '#/definitions/diagnostics.engineTotalOperatingTime'}
            tirePressureStatuses: {$ref: '#/definitions/diagnostics.tirePressureStatuses'}
            brakeLiningWearPreWarning: {$ref: '#/definitions/diagnostics.brakeLiningWearPreWarning'}
            engineOilLifeRemaining: {$ref: '#/definitions/diagnostics.engineOilLifeRemaining'}
            oemTroubleCodeValues: {$ref: '#/definitions/diagnostics.oemTroubleCodeValues'}
            dieselExhaustFluidRange: {$ref: '#/definitions/diagnostics.dieselExhaustFluidRange'}
            dieselParticulateFilterSootLevel: {$ref: '#/definitions/diagnostics.dieselParticulateFilterSootLevel'}
            confirmedTroubleCodes: {$ref: '#/definitions/diagnostics.confirmedTroubleCodes'}
            dieselExhaustFilterStatus: {$ref: '#/definitions/diagnostics.dieselExhaustFilterStatus'}
    doors.insideLocks:
        description: 'Inside lock states for the given doors'
        example:
            - {data: {location: {value: front_left}, lockState: {value: locked}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: front_right}, lockState: {value: unlocked}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_right}, lockState: {value: unlocked}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_left}, lockState: {value: unlocked}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_right, rear_left]}, lockState: {description: 'Lock state for the door', type: string, enum: [unlocked, locked]}}
    doors.locks:
        description: 'Lock states for the given doors'
        example:
            - {data: {location: {value: front_left}, lockState: {value: unlocked}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: front_right}, lockState: {value: unlocked}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_right}, lockState: {value: locked}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_left}, lockState: {value: locked}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_right, rear_left]}, lockState: {description: 'Lock state for the door', type: string, enum: [unlocked, locked]}}
    doors.positions:
        description: 'Door positions for the given doors'
        example:
            - {data: {location: {value: front_left}, position: {value: open}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: front_right}, position: {value: closed}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_right}, position: {value: closed}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: rear_left}, position: {value: closed}}, timestamp: '2021-01-11T08:09:28.597Z'}
            - {data: {location: {value: all}, position: {value: closed}}, timestamp: '2021-01-11T08:09:28.597Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, all]}, position: {type: string, enum: [closed, open]}}
    doors.insideLocksState:
        description: 'Inside locks state for the whole vehicle (combines all specific lock states if available)'
        example:
            data: {value: locked}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - unlocked
            - locked
    doors.locksState:
        description: 'Locks state for the whole vehicle (combines all specific lock states if available)'
        example:
            data: {value: unlocked}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - unlocked
            - locked
    doors:
        type: object
        properties:
            insideLocks: {$ref: '#/definitions/doors.insideLocks'}
            locks: {$ref: '#/definitions/doors.locks'}
            positions: {$ref: '#/definitions/doors.positions'}
            insideLocksState: {$ref: '#/definitions/doors.insideLocksState'}
            locksState: {$ref: '#/definitions/doors.locksState'}
    engine.status:
        example:
            data: {value: off}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - off
            - on
    engine.startStopState:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - inactive
            - active
    engine:
        type: object
        properties:
            status: {$ref: '#/definitions/engine.status'}
            startStopState: {$ref: '#/definitions/engine.startStopState'}
    failureMessage.failedMessageID:
        description: 'Capability identifier of the failed message'
        example:
            data: {value: 33}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: number
        format: integer
    failureMessage.failedMessageType:
        description: 'Message type of the failed message'
        example:
            data: {value: 1}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: number
        format: integer
    failureMessage.failureReason:
        example:
            data: {value: unauthorised}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - unsupported_capability
            - unauthorised
            - incorrect_state
            - execution_timeout
            - vehicle_asleep
            - invalid_command
            - pending
            - rate_limit
            - oem_error
    failureMessage.failureDescription:
        description: 'Failure description'
        example:
            data: {value: 'Try again'}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
    failureMessage.failedPropertyIDs:
        description: 'Array of failed property identifiers'
        example:
            data: [1, 2]
            timestamp: '2021-01-11T08:09:28.597Z'
        type: array
        items:
            type: number
            format: integer
    failureMessage:
        type: object
        properties:
            failedMessageID: {$ref: '#/definitions/failureMessage.failedMessageID'}
            failedMessageType: {$ref: '#/definitions/failureMessage.failedMessageType'}
            failureReason: {$ref: '#/definitions/failureMessage.failureReason'}
            failureDescription: {$ref: '#/definitions/failureMessage.failureDescription'}
            failedPropertyIDs: {$ref: '#/definitions/failureMessage.failedPropertyIDs'}
    firmwareVersion.hmKitVersion:
        description: 'HMKit version'
        example:
            data: {major: {value: 1}, minor: {value: 15}, patch: {value: 33}}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: object
        properties:
            major: {description: 'HMKit version major number', type: number, format: integer}
            minor: {description: 'HMKit version minor number', type: number, format: integer}
            patch: {description: 'HMKit version patch number', type: number, format: integer}
    firmwareVersion.hmKitBuildName:
        description: 'HMKit version build name'
        example:
            data: {value: btstack-uart}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
    firmwareVersion.applicationVersion:
        description: 'Application version'
        example:
            data: {value: v1.5-prod}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
    firmwareVersion:
        type: object
        properties:
            hmKitVersion: {$ref: '#/definitions/firmwareVersion.hmKitVersion'}
            hmKitBuildName: {$ref: '#/definitions/firmwareVersion.hmKitBuildName'}
            applicationVersion: {$ref: '#/definitions/firmwareVersion.applicationVersion'}
    fueling.gasFlapLock:
        example:
            data: {value: locked}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - unlocked
            - locked
    fueling.gasFlapPosition:
        example:
            data: {value: closed}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
        enum:
            - closed
            - open
    fueling:
        type: object
        properties:
            gasFlapLock: {$ref: '#/definitions/fueling.gasFlapLock'}
            gasFlapPosition: {$ref: '#/definitions/fueling.gasFlapPosition'}
    graphics.imageURL:
        description: 'The image URL'
        example:
            data: {value: 'https://about.high-mobility.com/assets/images/hm-logo.svg'}
            timestamp: '2021-01-11T08:09:28.597Z'
        type: string
    historical.states:
        description: 'The bytes of a Capability state'
        example:
            - {data: {doors: {locksState: {data: {value: unlocked}}, positions: [{data: {location: {value: front_left}, position: {value: open}}}, {data: {location: {value: rear_right}, position: {value: open}}}], timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2021-01-11T08:09:28.598Z'}
            - {data: {charging: {chargePortState: {data: {value: open}}, chargeMode: {data: {value: immediate}}, chargingRate: {data: {value: 35, unit: kilowatts}}, maxRange: {data: {value: 555, unit: kilometers}}, timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2021-01-11T08:09:28.598Z'}
        type: array
        items:
            type: capability_state
    historical.capabilityID:
        description: 'The identifier of the Capability'
        example:
            data: {value: 96}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: number
        format: integer
    historical.startDate:
        description: 'Start date for historical data query'
        example:
            data: {value: '2019-10-07T13:04:32.000Z'}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        format: date-time
    historical.endDate:
        description: 'End date for historical data query'
        example:
            data: {value: '2019-09-27T08:42:30.000Z'}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        format: date-time
    historical:
        type: object
        properties:
            states: {$ref: '#/definitions/historical.states'}
    homeCharger.chargingStatus:
        example:
            data: {value: charging}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - disconnected
            - plugged_in
            - charging
    homeCharger.authenticationMechanism:
        example:
            data: {value: app}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - pin
            - app
    homeCharger.plugType:
        example:
            data: {value: type_2}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - type_1
            - type_2
            - ccs
            - chademo
    homeCharger.chargingPowerKW:
        description: 'Charging power'
        example:
            data: {value: 11.5, unit: kilowatts}
            timestamp: '2021-01-11T08:09:28.598Z'
    homeCharger.solarCharging:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - inactive
            - active
    homeCharger.wifiHotspotEnabled:
        example:
            data: {value: enabled}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - disabled
            - enabled
    homeCharger.wifiHotspotSSID:
        description: 'The Wi-Fi Hotspot SSID'
        example:
            data: {value: 'Charger 7612'}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
    homeCharger.wiFiHotspotSecurity:
        example:
            data: {value: wpa2_personal}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    homeCharger.wiFiHotspotPassword:
        description: 'The Wi-Fi Hotspot password'
        example:
            data: {value: ZW3vARNUBe}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
    homeCharger.authenticationState:
        example:
            data: {value: authenticated}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - unauthenticated
            - authenticated
    homeCharger.chargeCurrent:
        description: 'The charge current'
        example:
            data: {value: 0.5, unit: amperes}
            timestamp: '2021-01-11T08:09:28.598Z'
    homeCharger.maximumChargeCurrent:
        description: 'The maximum possible charge current'
        example:
            data: {value: 1, unit: amperes}
            timestamp: '2021-01-11T08:09:28.598Z'
    homeCharger.minimumChargeCurrent:
        description: 'The minimal possible charge current'
        example:
            data: {value: 0.1, unit: amperes}
            timestamp: '2021-01-11T08:09:28.598Z'
    homeCharger.coordinates:
        example:
            data: {latitude: {value: 52.520008}, longitude: {value: 13.404954}}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    homeCharger.priceTariffs:
        example:
            - {data: {pricingType: {value: starting_fee}, price: {value: 4.5}, currency: {value: EUR}}, timestamp: '2021-01-11T08:09:28.598Z'}
            - {data: {pricingType: {value: per_minute}, price: {value: 0.3}, currency: {value: EUR}}, timestamp: '2021-01-11T08:09:28.598Z'}
            - {data: {pricingType: {value: per_kwh}, price: {value: 0.3}, currency: {value: Ripple}}, timestamp: '2021-01-11T08:09:28.598Z'}
        type: array
        items:
            type: object
            properties: {pricingType: {type: string, enum: [starting_fee, per_minute, per_kwh]}, price: {description: 'The price', type: number, format: double}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}
    homeCharger.chargingPower:
        description: 'Charging power output from the charger'
        example:
            data: {value: 350, unit: kilowatts}
            timestamp: '2021-01-11T08:09:28.598Z'
    homeCharger:
        type: object
        properties:
            chargingStatus: {$ref: '#/definitions/homeCharger.chargingStatus'}
            authenticationMechanism: {$ref: '#/definitions/homeCharger.authenticationMechanism'}
            plugType: {$ref: '#/definitions/homeCharger.plugType'}
            chargingPowerKW: {$ref: '#/definitions/homeCharger.chargingPowerKW'}
            solarCharging: {$ref: '#/definitions/homeCharger.solarCharging'}
            wifiHotspotEnabled: {$ref: '#/definitions/homeCharger.wifiHotspotEnabled'}
            wifiHotspotSSID: {$ref: '#/definitions/homeCharger.wifiHotspotSSID'}
            wiFiHotspotSecurity: {$ref: '#/definitions/homeCharger.wiFiHotspotSecurity'}
            wiFiHotspotPassword: {$ref: '#/definitions/homeCharger.wiFiHotspotPassword'}
            authenticationState: {$ref: '#/definitions/homeCharger.authenticationState'}
            chargeCurrent: {$ref: '#/definitions/homeCharger.chargeCurrent'}
            maximumChargeCurrent: {$ref: '#/definitions/homeCharger.maximumChargeCurrent'}
            minimumChargeCurrent: {$ref: '#/definitions/homeCharger.minimumChargeCurrent'}
            coordinates: {$ref: '#/definitions/homeCharger.coordinates'}
            priceTariffs: {$ref: '#/definitions/homeCharger.priceTariffs'}
            chargingPower: {$ref: '#/definitions/homeCharger.chargingPower'}
    honkHornFlashLights.flashers:
        example:
            data: {value: left_flasher_active}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - inactive
            - emergency_flasher_active
            - left_flasher_active
            - right_flasher_active
    honkHornFlashLights.honkSeconds:
        description: 'Time to honk the horn'
        example:
            data: {value: 3, unit: seconds}
            timestamp: '2021-01-11T08:09:28.598Z'
    honkHornFlashLights.flashTimes:
        description: 'Number of times to flash the lights'
        example:
            data: {value: 5}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: number
        format: integer
    honkHornFlashLights.emergencyFlashersState:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.598Z'
        type: string
        enum:
            - inactive
            - active
    honkHornFlashLights.honkTime:
        description: 'Time to honk the horn'
        example:
            data: {value: 2, unit: seconds}
            timestamp: '2021-01-11T08:09:28.598Z'
    honkHornFlashLights:
        type: object
        properties:
            flashers: {$ref: '#/definitions/honkHornFlashLights.flashers'}
    hood.position:
        example:
            data: {value: open}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - closed
            - open
            - intermediate
    hood:
        type: object
        properties:
            position: {$ref: '#/definitions/hood.position'}
    ignition.status:
        example:
            data: {value: off}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - off
            - on
    ignition.accessoriesStatus:
        example:
            data: {value: on}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - off
            - on
    ignition.state:
        example:
            data: {value: accessory}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - lock
            - off
            - accessory
            - on
            - start
    ignition:
        type: object
        properties:
            status: {$ref: '#/definitions/ignition.status'}
            accessoriesStatus: {$ref: '#/definitions/ignition.accessoriesStatus'}
            state: {$ref: '#/definitions/ignition.state'}
    lightConditions.outsideLight:
        description: 'Measured outside illuminance'
        example:
            data: {value: 111000, unit: lux}
            timestamp: '2021-01-11T08:09:28.599Z'
    lightConditions.insideLight:
        description: 'Measured inside illuminance'
        example:
            data: {value: 0.25, unit: lux}
            timestamp: '2021-01-11T08:09:28.599Z'
    lightConditions:
        type: object
        properties:
            outsideLight: {$ref: '#/definitions/lightConditions.outsideLight'}
            insideLight: {$ref: '#/definitions/lightConditions.insideLight'}
    lights.frontExteriorLight:
        example:
            data: {value: active_with_full_beam}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - inactive
            - active
            - active_with_full_beam
            - drl
            - automatic
    lights.rearExteriorLight:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - inactive
            - active
    lights.ambientLightColour:
        example:
            data: {red: {value: 255}, green: {value: 0}, blue: {value: 0}}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: object
        properties:
            red: {description: 'The red component of RGB', type: number, format: integer}
            green: {description: 'The green component of RGB', type: number, format: integer}
            blue: {description: 'The blue component of RGB', type: number, format: integer}
    lights.reverseLight:
        example:
            data: {value: inactive}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - inactive
            - active
    lights.emergencyBrakeLight:
        example:
            data: {value: inactive}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - inactive
            - active
    lights.fogLights:
        example:
            - {data: {location: {value: front}, state: {value: inactive}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {location: {value: rear}, state: {value: active}}, timestamp: '2021-01-11T08:09:28.599Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}
    lights.readingLamps:
        example:
            - {data: {location: {value: front_left}, state: {value: active}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {location: {value: front_right}, state: {value: active}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {location: {value: rear_right}, state: {value: inactive}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {location: {value: rear_left}, state: {value: inactive}}, timestamp: '2021-01-11T08:09:28.599Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left]}, state: {type: string, enum: [inactive, active]}}
    lights.interiorLights:
        example:
            - {data: {location: {value: front}, state: {value: inactive}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {location: {value: rear}, state: {value: active}}, timestamp: '2021-01-11T08:09:28.599Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}
    lights.switchPosition:
        description: 'Position of the rotary light switch'
        example:
            data: {value: parking_light_right}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - automatic
            - dipped_headlights
            - parking_light_right
            - parking_light_left
            - sidelights
    lights:
        type: object
        properties:
            frontExteriorLight: {$ref: '#/definitions/lights.frontExteriorLight'}
            rearExteriorLight: {$ref: '#/definitions/lights.rearExteriorLight'}
            ambientLightColour: {$ref: '#/definitions/lights.ambientLightColour'}
            reverseLight: {$ref: '#/definitions/lights.reverseLight'}
            emergencyBrakeLight: {$ref: '#/definitions/lights.emergencyBrakeLight'}
            fogLights: {$ref: '#/definitions/lights.fogLights'}
            readingLamps: {$ref: '#/definitions/lights.readingLamps'}
            interiorLights: {$ref: '#/definitions/lights.interiorLights'}
            switchPosition: {$ref: '#/definitions/lights.switchPosition'}
    maintenance.daysToNextService:
        description: 'Time until next servicing of the car'
        example:
            data: {value: 501, unit: days}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.kilometersToNextService:
        description: 'The distance until next servicing of the vehicle'
        example:
            data: {value: 3681, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.cbsReportsCount:
        description: 'The number of CBS reports'
        example:
            data: {value: 3}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: number
        format: integer
    maintenance.monthsToExhaustInspection:
        description: 'Time until exhaust inspection'
        example:
            data: {value: 5, unit: months}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.teleserviceAvailability:
        example:
            data: {value: successful}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - pending
            - idle
            - successful
            - error
    maintenance.serviceDistanceThreshold:
        description: 'Distance threshold for service'
        example:
            data: {value: 5000, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.serviceTimeThreshold:
        description: 'Time threshold for service'
        example:
            data: {value: 4, unit: weeks}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.automaticTeleserviceCallDate:
        description: 'Automatic teleservice call date'
        example:
            data: {value: '2018-11-23T11:33:50.000Z'}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        format: date-time
    maintenance.teleserviceBatteryCallDate:
        description: 'Teleservice batter call date'
        example:
            data: {value: '2018-11-23T10:36:50.000Z'}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        format: date-time
    maintenance.nextInspectionDate:
        description: 'Next inspection date'
        example:
            data: {value: '2018-10-23T14:38:47.000Z'}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        format: date-time
    maintenance.conditionBasedServices:
        example:
            - {data: {year: {value: 2019}, month: {value: 5}, id: {value: 3}, dueStatus: {value: ok}, text: {value: 'Brake fluid'}, description: {value: 'Next change at specified date at the latest.'}}, timestamp: '2021-01-11T08:09:28.599Z'}
        type: array
        items:
            type: object
            properties: {year: {description: 'The year', type: number, format: integer}, month: {description: 'Value between 1 and 12', type: number, format: integer}, id: {description: 'CBS identifier', type: number, format: integer}, dueStatus: {type: string, enum: [ok, pending, overdue]}, text: {description: 'CBS text', type: string}, description: {description: Description, type: string}}
    maintenance.brakeFluidChangeDate:
        description: 'Brake fluid change date'
        example:
            data: {value: '2018-12-05T03:22:56.000Z'}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        format: date-time
    maintenance.timeToNextService:
        description: 'Time until next servicing of the vehicle'
        example:
            data: {value: 501, unit: days}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.distanceToNextService:
        description: 'The distance until next servicing of the vehicle'
        example:
            data: {value: 3681, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.timeToExhaustInspection:
        description: 'Time until exhaust inspection'
        example:
            data: {value: 5, unit: months}
            timestamp: '2021-01-11T08:09:28.599Z'
    maintenance.lastECall:
        description: 'Date-time of the last eCall'
        example:
            data: {value: '2018-12-05T03:22:56.000Z'}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        format: date-time
    maintenance:
        type: object
        properties:
            daysToNextService: {$ref: '#/definitions/maintenance.daysToNextService'}
            kilometersToNextService: {$ref: '#/definitions/maintenance.kilometersToNextService'}
            cbsReportsCount: {$ref: '#/definitions/maintenance.cbsReportsCount'}
            monthsToExhaustInspection: {$ref: '#/definitions/maintenance.monthsToExhaustInspection'}
            teleserviceAvailability: {$ref: '#/definitions/maintenance.teleserviceAvailability'}
            serviceDistanceThreshold: {$ref: '#/definitions/maintenance.serviceDistanceThreshold'}
            serviceTimeThreshold: {$ref: '#/definitions/maintenance.serviceTimeThreshold'}
            automaticTeleserviceCallDate: {$ref: '#/definitions/maintenance.automaticTeleserviceCallDate'}
            teleserviceBatteryCallDate: {$ref: '#/definitions/maintenance.teleserviceBatteryCallDate'}
            nextInspectionDate: {$ref: '#/definitions/maintenance.nextInspectionDate'}
            conditionBasedServices: {$ref: '#/definitions/maintenance.conditionBasedServices'}
            brakeFluidChangeDate: {$ref: '#/definitions/maintenance.brakeFluidChangeDate'}
            timeToNextService: {$ref: '#/definitions/maintenance.timeToNextService'}
            distanceToNextService: {$ref: '#/definitions/maintenance.distanceToNextService'}
            timeToExhaustInspection: {$ref: '#/definitions/maintenance.timeToExhaustInspection'}
            lastECall: {$ref: '#/definitions/maintenance.lastECall'}
    messaging.text:
        description: 'The text'
        example:
            data: {value: 'Hey mom!'}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
    messaging.handle:
        description: 'The optional handle of message'
        example:
            data: {value: Epp}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
    messaging:
        type: object
        properties:
            text: {$ref: '#/definitions/messaging.text'}
            handle: {$ref: '#/definitions/messaging.handle'}
    mobile.connection:
        example:
            data: {value: connected}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
        enum:
            - disconnected
            - connected
    mobile:
        type: object
        properties:
            connection: {$ref: '#/definitions/mobile.connection'}
    multiCommand.multiStates:
        description: 'The incoming states'
        example:
            - {data: {doors: {locksState: {data: {value: unlocked}}, positions: [{data: {location: {value: front_left}, position: {value: open}}}, {data: {location: {value: rear_right}, position: {value: open}}}], timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {charging: {chargePortState: {data: {value: open}}, chargeMode: {data: {value: immediate}}, chargingRate: {data: {value: 35, unit: kilowatts}}, maxRange: {data: {value: 555, unit: kilometers}}, timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2021-01-11T08:09:28.599Z'}
        type: array
        items:
            type: capability_state
    multiCommand.multiCommands:
        description: 'The outgoing commands'
        example:
            - {data: {doors: {insideLocksState: {data: {value: locked}}}}, timestamp: '2021-01-11T08:09:28.599Z'}
            - {data: {ignition: {status: {data: {value: off}}}}, timestamp: '2021-01-11T08:09:28.599Z'}
        type: array
        items:
            type: capability_state
    multiCommand:
        type: object
        properties:
            multiStates: {$ref: '#/definitions/multiCommand.multiStates'}
    naviDestination.coordinates:
        example:
            data: {latitude: {value: 52.520008}, longitude: {value: 13.404954}}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    naviDestination.destinationName:
        description: 'Destination name'
        example:
            data: {value: Berlin}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: string
    naviDestination.dataSlotsFree:
        description: 'Remaining number of POI data slots available.'
        example:
            data: {value: 14}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: number
        format: integer
    naviDestination.dataSlotsMax:
        description: 'Maximum number of POI data slots.'
        example:
            data: {value: 30}
            timestamp: '2021-01-11T08:09:28.599Z'
        type: number
        format: integer
    naviDestination.arrivalDuration:
        description: 'Remaining time until reaching the destination.'
        example:
            data: {value: 2.6, unit: hours}
            timestamp: '2021-01-11T08:09:28.599Z'
    naviDestination.distanceToDestination:
        description: 'Remaining distance to reach the destination.'
        example:
            data: {value: 1337, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.599Z'
    naviDestination:
        type: object
        properties:
            coordinates: {$ref: '#/definitions/naviDestination.coordinates'}
            destinationName: {$ref: '#/definitions/naviDestination.destinationName'}
            dataSlotsFree: {$ref: '#/definitions/naviDestination.dataSlotsFree'}
            dataSlotsMax: {$ref: '#/definitions/naviDestination.dataSlotsMax'}
            arrivalDuration: {$ref: '#/definitions/naviDestination.arrivalDuration'}
            distanceToDestination: {$ref: '#/definitions/naviDestination.distanceToDestination'}
    notifications.text:
        description: 'Text for the notification'
        example:
            data: {value: 'Open Garage'}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
    notifications.actionItems:
        example:
            - {data: {id: {value: 27}, name: {value: Open}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {id: {value: 28}, name: {value: Cancel}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}
    notifications.activatedAction:
        description: 'Identifier of the activated action'
        example:
            data: {value: 27}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: integer
    notifications.clear:
        example:
            data: {value: clear}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - clear
    notifications:
        type: object
        properties:
            text: {$ref: '#/definitions/notifications.text'}
            actionItems: {$ref: '#/definitions/notifications.actionItems'}
            activatedAction: {$ref: '#/definitions/notifications.activatedAction'}
            clear: {$ref: '#/definitions/notifications.clear'}
    offroad.routeIncline:
        description: 'The route elevation incline'
        example:
            data: {value: 10.1, unit: degrees}
            timestamp: '2021-01-11T08:09:28.600Z'
    offroad.wheelSuspension:
        description: 'The wheel suspension level percentage, whereas 0.0 is no suspension and 1.0 maximum suspension'
        example:
            data: {value: 0.5}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    offroad:
        type: object
        properties:
            routeIncline: {$ref: '#/definitions/offroad.routeIncline'}
            wheelSuspension: {$ref: '#/definitions/offroad.wheelSuspension'}
    parkingBrake.status:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    parkingBrake:
        type: object
        properties:
            status: {$ref: '#/definitions/parkingBrake.status'}
    parkingTicket.status:
        example:
            data: {value: ended}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - ended
            - started
    parkingTicket.operatorName:
        description: 'Operator name'
        example:
            data: {value: 'Berlin Parking'}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
    parkingTicket.operatorTicketID:
        description: 'Operator ticket ID'
        example:
            data: {value: 6489AB4233}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
    parkingTicket.ticketStartTime:
        description: 'Parking ticket start time'
        example:
            data: {value: '2017-01-10T19:34:22.000Z'}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        format: date-time
    parkingTicket.ticketEndTime:
        description: 'Parking ticket end time'
        example:
            data: {value: '2019-10-08T11:21:45.000Z'}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        format: date-time
    parkingTicket:
        type: object
        properties:
            status: {$ref: '#/definitions/parkingTicket.status'}
            operatorName: {$ref: '#/definitions/parkingTicket.operatorName'}
            operatorTicketID: {$ref: '#/definitions/parkingTicket.operatorTicketID'}
            ticketStartTime: {$ref: '#/definitions/parkingTicket.ticketStartTime'}
            ticketEndTime: {$ref: '#/definitions/parkingTicket.ticketEndTime'}
    powerTakeoff.status:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    powerTakeoff.engaged:
        example:
            data: {value: engaged}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - not_engaged
            - engaged
    powerTakeoff:
        type: object
        properties:
            status: {$ref: '#/definitions/powerTakeoff.status'}
            engaged: {$ref: '#/definitions/powerTakeoff.engaged'}
    race.accelerations:
        example:
            - {data: {direction: {value: longitudinal}, acceleration: {value: 0.864, unit: gravity}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {direction: {value: lateral}, acceleration: {value: -0.753, unit: gravity}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {direction: {value: front_lateral}, acceleration: {value: 0.753, unit: gravity}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {direction: {value: rear_lateral}, acceleration: {value: -0.864, unit: gravity}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {direction: {type: string, enum: [longitudinal, lateral, front_lateral, rear_lateral]}, acceleration: {description: 'The accelaration'}}
    race.understeering:
        description: 'The understeering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 0.3 (30%) marginal, over 30% critical'
        example:
            data: {value: 0.19}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    race.oversteering:
        description: 'The oversteering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 30% marginal, over 30% critical'
        example:
            data: {value: 0.05}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    race.gasPedalPosition:
        description: 'The gas pedal position between 0.0-1.0, whereas 1.0 (100%) is full throttle'
        example:
            data: {value: 0.98}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    race.steeringAngle:
        description: 'The steering angle, whereas 0.0 is straight ahead, positive number to the right and negative number to the left'
        example:
            data: {value: 10, unit: degrees}
            timestamp: '2021-01-11T08:09:28.600Z'
    race.brakePressure:
        description: 'Brake pressure'
        example:
            data: {value: 20, unit: bars}
            timestamp: '2021-01-11T08:09:28.600Z'
    race.yawRate:
        description: 'Yaw turning rate'
        example:
            data: {value: 6.66, unit: degrees_per_second}
            timestamp: '2021-01-11T08:09:28.600Z'
    race.rearSuspensionSteering:
        description: 'Rear suspension steering'
        example:
            data: {value: 3.3, unit: degrees}
            timestamp: '2021-01-11T08:09:28.600Z'
    race.electronicStabilityProgram:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    race.brakeTorqueVectorings:
        example:
            - {data: {axle: {value: front}, state: {value: active}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {axle: {value: rear}, state: {value: inactive}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}
    race.gearMode:
        example:
            data: {value: drive}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - manual
            - park
            - reverse
            - neutral
            - drive
            - low_gear
            - sport
    race.selectedGear:
        description: 'The selected gear value, if any'
        example:
            data: {value: 4}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: integer
    race.brakePedalPosition:
        description: 'The brake pedal position between 0.0-1.0, wheras 1.0 (100%) is full brakes'
        example:
            data: {value: 0.12}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    race.brakePedalSwitch:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    race.clutchPedalSwitch:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    race.acceleratorPedalIdleSwitch:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    race.acceleratorPedalKickdownSwitch:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - inactive
            - active
    race.vehicleMoving:
        example:
            data: {value: moving}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - not_moving
            - moving
    race:
        type: object
        properties:
            accelerations: {$ref: '#/definitions/race.accelerations'}
            understeering: {$ref: '#/definitions/race.understeering'}
            oversteering: {$ref: '#/definitions/race.oversteering'}
            gasPedalPosition: {$ref: '#/definitions/race.gasPedalPosition'}
            steeringAngle: {$ref: '#/definitions/race.steeringAngle'}
            brakePressure: {$ref: '#/definitions/race.brakePressure'}
            yawRate: {$ref: '#/definitions/race.yawRate'}
            rearSuspensionSteering: {$ref: '#/definitions/race.rearSuspensionSteering'}
            electronicStabilityProgram: {$ref: '#/definitions/race.electronicStabilityProgram'}
            brakeTorqueVectorings: {$ref: '#/definitions/race.brakeTorqueVectorings'}
            gearMode: {$ref: '#/definitions/race.gearMode'}
            selectedGear: {$ref: '#/definitions/race.selectedGear'}
            brakePedalPosition: {$ref: '#/definitions/race.brakePedalPosition'}
            brakePedalSwitch: {$ref: '#/definitions/race.brakePedalSwitch'}
            clutchPedalSwitch: {$ref: '#/definitions/race.clutchPedalSwitch'}
            acceleratorPedalIdleSwitch: {$ref: '#/definitions/race.acceleratorPedalIdleSwitch'}
            acceleratorPedalKickdownSwitch: {$ref: '#/definitions/race.acceleratorPedalKickdownSwitch'}
            vehicleMoving: {$ref: '#/definitions/race.vehicleMoving'}
    rooftopControl.dimming:
        description: '1.0 (100%) is opaque, 0.0 (0%) is transparent'
        example:
            data: {value: 1}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    rooftopControl.position:
        description: '1.0 (100%) is fully open, 0.0 (0%) is closed'
        example:
            data: {value: 0.5}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: number
        format: double
    rooftopControl.convertibleRoofState:
        example:
            data: {value: open}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - closed
            - open
            - emergency_locked
            - closed_secured
            - open_secured
            - hard_top_mounted
            - intermediate_position
            - loading_position
            - loading_position_immediate
    rooftopControl.sunroofTiltState:
        example:
            data: {value: half_tilted}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - closed
            - tilted
            - half_tilted
    rooftopControl.sunroofState:
        example:
            data: {value: open}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - closed
            - open
            - intermediate
    rooftopControl.sunroofRainEvent:
        description: 'Sunroof event happened in case of rain'
        example:
            data: {value: no_event}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - no_event
            - in_stroke_position_because_of_rain
            - automatically_in_stroke_position
    rooftopControl:
        type: object
        properties:
            dimming: {$ref: '#/definitions/rooftopControl.dimming'}
            position: {$ref: '#/definitions/rooftopControl.position'}
            convertibleRoofState: {$ref: '#/definitions/rooftopControl.convertibleRoofState'}
            sunroofTiltState: {$ref: '#/definitions/rooftopControl.sunroofTiltState'}
            sunroofState: {$ref: '#/definitions/rooftopControl.sunroofState'}
            sunroofRainEvent: {$ref: '#/definitions/rooftopControl.sunroofRainEvent'}
    seats.personsDetected:
        example:
            - {data: {location: {value: front_left}, detected: {value: detected}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: front_right}, detected: {value: not_detected}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: rear_right}, detected: {value: not_detected}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: rear_left}, detected: {value: not_detected}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: rear_center}, detected: {value: not_detected}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_center]}, detected: {type: string, enum: [not_detected, detected]}}
    seats.seatbeltsState:
        example:
            - {data: {location: {value: front_left}, fastenedState: {value: fastened}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: front_right}, fastenedState: {value: not_fastened}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: rear_right}, fastenedState: {value: not_fastened}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: rear_left}, fastenedState: {value: not_fastened}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {location: {value: rear_center}, fastenedState: {value: not_fastened}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_center]}, fastenedState: {type: string, enum: [not_fastened, fastened]}}
    seats:
        type: object
        properties:
            personsDetected: {$ref: '#/definitions/seats.personsDetected'}
            seatbeltsState: {$ref: '#/definitions/seats.seatbeltsState'}
    tachograph.driversWorkingStates:
        example:
            - {data: {driverNumber: {value: 1}, workingState: {value: working}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {driverNumber: {value: 2}, workingState: {value: resting}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, workingState: {type: string, enum: [resting, driver_available, working, driving]}}
    tachograph.driversTimeStates:
        example:
            - {data: {driverNumber: {value: 3}, timeState: {value: four_reached}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {driverNumber: {value: 4}, timeState: {value: fifteen_min_before_sixteen}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, timeState: {type: string, enum: [normal, fifteen_min_before_four, four_reached, fifteen_min_before_nine, nine_reached, fifteen_min_before_sixteen, sixteen_reached]}}
    tachograph.driversCardsPresent:
        example:
            - {data: {driverNumber: {value: 6}, cardPresent: {value: present}}, timestamp: '2021-01-11T08:09:28.600Z'}
            - {data: {driverNumber: {value: 7}, cardPresent: {value: not_present}}, timestamp: '2021-01-11T08:09:28.600Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, cardPresent: {type: string, enum: [not_present, present]}}
    tachograph.vehicleMotion:
        example:
            data: {value: detected}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - not_detected
            - detected
    tachograph.vehicleOverspeed:
        example:
            data: {value: no_overspeed}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - no_overspeed
            - overspeed
    tachograph.vehicleDirection:
        example:
            data: {value: forward}
            timestamp: '2021-01-11T08:09:28.600Z'
        type: string
        enum:
            - forward
            - reverse
    tachograph.vehicleSpeed:
        description: 'The tachograph vehicle speed'
        example:
            data: {value: 80, unit: kilometers_per_hour}
            timestamp: '2021-01-11T08:09:28.600Z'
    tachograph:
        type: object
        properties:
            driversWorkingStates: {$ref: '#/definitions/tachograph.driversWorkingStates'}
            driversTimeStates: {$ref: '#/definitions/tachograph.driversTimeStates'}
            driversCardsPresent: {$ref: '#/definitions/tachograph.driversCardsPresent'}
            vehicleMotion: {$ref: '#/definitions/tachograph.vehicleMotion'}
            vehicleOverspeed: {$ref: '#/definitions/tachograph.vehicleOverspeed'}
            vehicleDirection: {$ref: '#/definitions/tachograph.vehicleDirection'}
            vehicleSpeed: {$ref: '#/definitions/tachograph.vehicleSpeed'}
    textInput.text:
        description: 'The text'
        example:
            data: {value: 'Rendezvous with Rama'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
    theftAlarm.status:
        example:
            data: {value: armed}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - unarmed
            - armed
            - triggered
    theftAlarm.interiorProtectionStatus:
        description: 'Interior protection sensor status'
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - inactive_selected
            - inactive_not_selected
            - active
    theftAlarm.towProtectionStatus:
        description: 'Tow protection sensor status'
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - inactive_selected
            - inactive_not_selected
            - active
    theftAlarm.lastWarningReason:
        example:
            data: {value: hood}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - no_alarm
            - basis_alarm
            - door_front_left
            - door_front_right
            - door_rear_left
            - door_rear_right
            - hood
            - trunk
            - common_alm_in
            - panic
            - glovebox
            - center_box
            - rear_box
            - sensor_vta
            - its
            - its_slv
            - tps
            - horn
            - hold_com
            - remote
            - unknown
    theftAlarm.lastEvent:
        description: 'Last event happening date'
        example:
            data: {value: '2020-06-16T11:10:02.000Z'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        format: date-time
    theftAlarm.lastEventLevel:
        description: 'Level of impact for the last event'
        example:
            data: {value: low}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - low
            - medium
            - high
    theftAlarm.eventType:
        description: 'Position of the last even relative to the vehicle'
        example:
            data: {value: rear_right}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - idle
            - front_left
            - front_middle
            - front_right
            - right
            - rear_right
            - rear_middle
            - rear_left
            - left
            - unknown
    theftAlarm:
        type: object
        properties:
            status: {$ref: '#/definitions/theftAlarm.status'}
            interiorProtectionStatus: {$ref: '#/definitions/theftAlarm.interiorProtectionStatus'}
            towProtectionStatus: {$ref: '#/definitions/theftAlarm.towProtectionStatus'}
            lastWarningReason: {$ref: '#/definitions/theftAlarm.lastWarningReason'}
            lastEvent: {$ref: '#/definitions/theftAlarm.lastEvent'}
            lastEventLevel: {$ref: '#/definitions/theftAlarm.lastEventLevel'}
            eventType: {$ref: '#/definitions/theftAlarm.eventType'}
    trips.type:
        description: 'Type of the trip'
        example:
            data: {value: single}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - single
            - multi
    trips.driverName:
        description: 'Name of the driver of the trip'
        example:
            data: {value: 'Hari Seldon'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
    trips.description:
        description: 'Description of the trip'
        example:
            data: {value: 'To save humankind'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
    trips.startTime:
        description: 'Start time of the trip'
        example:
            data: {value: '2020-06-19T12:12:10.000Z'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        format: date-time
    trips.endTime:
        description: 'End time of the trip'
        example:
            data: {value: '2020-06-19T13:12:10.000Z'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        format: date-time
    trips.startAddress:
        description: 'Start address of the trip'
        example:
            data: {value: 'Skalitzer Straße 68, 10997 Berlin, Germany'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
    trips.endAddress:
        description: 'End address of the trip'
        example:
            data: {value: 'Skalitzer Straße 68, 10997 Berlin, Germany'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
    trips.startCoordinates:
        description: 'Start coordinates of the trip'
        example:
            data: {latitude: {value: 52.500276}, longitude: {value: 13.439719}}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    trips.endCoordinates:
        description: 'End coordinates of the trip'
        example:
            data: {latitude: {value: 52.500276}, longitude: {value: 13.439719}}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    trips.startOdometer:
        description: 'Odometer reading at the start of the trip'
        example:
            data: {value: 10500, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    trips.endOdometer:
        description: 'Odometer reading at the end of the trip'
        example:
            data: {value: 10543, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    trips.averageFuelConsumption:
        description: 'Average fuel consumption during the trip'
        example:
            data: {value: 7.34, unit: liters_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    trips.distance:
        description: 'Distance of the trip'
        example:
            data: {value: 43, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    trips.startAddressComponents:
        description: 'Start address components'
        example:
            - {data: {type: {value: city}, value: {value: Berlin}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: country}, value: {value: Germany}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: country_short}, value: {value: DE}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: district}, value: {value: Berlin}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: postal_code}, value: {value: '10117'}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: street}, value: {value: 'Skalitzer Straße 68'}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: state_province}, value: {value: Brandenburg}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: other}, value: {value: Germany}}, timestamp: '2021-01-11T08:09:28.601Z'}
        type: array
        items:
            type: object
            properties: {type: {description: 'Component type', type: string, enum: [city, country, country_short, district, postal_code, street, state_province, other]}, value: {description: 'Value for the component', type: string}}
    trips.endAddressComponents:
        description: 'End address components'
        example:
            - {data: {type: {value: city}, value: {value: Berlin}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: country}, value: {value: Germany}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: country_short}, value: {value: DE}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: district}, value: {value: Berlin}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: postal_code}, value: {value: '10117'}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: street}, value: {value: 'Skalitzer Straße 68'}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: state_province}, value: {value: Brandenburg}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {type: {value: other}, value: {value: Germany}}, timestamp: '2021-01-11T08:09:28.601Z'}
        type: array
        items:
            type: object
            properties: {type: {description: 'Component type', type: string, enum: [city, country, country_short, district, postal_code, street, state_province, other]}, value: {description: 'Value for the component', type: string}}
    trips:
        type: object
        properties:
            type: {$ref: '#/definitions/trips.type'}
            driverName: {$ref: '#/definitions/trips.driverName'}
            description: {$ref: '#/definitions/trips.description'}
            startTime: {$ref: '#/definitions/trips.startTime'}
            endTime: {$ref: '#/definitions/trips.endTime'}
            startAddress: {$ref: '#/definitions/trips.startAddress'}
            endAddress: {$ref: '#/definitions/trips.endAddress'}
            startCoordinates: {$ref: '#/definitions/trips.startCoordinates'}
            endCoordinates: {$ref: '#/definitions/trips.endCoordinates'}
            startOdometer: {$ref: '#/definitions/trips.startOdometer'}
            endOdometer: {$ref: '#/definitions/trips.endOdometer'}
            averageFuelConsumption: {$ref: '#/definitions/trips.averageFuelConsumption'}
            distance: {$ref: '#/definitions/trips.distance'}
            startAddressComponents: {$ref: '#/definitions/trips.startAddressComponents'}
            endAddressComponents: {$ref: '#/definitions/trips.endAddressComponents'}
    trunk.lock:
        example:
            data: {value: unlocked}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - unlocked
            - locked
    trunk.position:
        example:
            data: {value: open}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - closed
            - open
    trunk:
        type: object
        properties:
            lock: {$ref: '#/definitions/trunk.lock'}
            position: {$ref: '#/definitions/trunk.position'}
    usage.averageWeeklyDistance:
        description: 'Average weekly distance'
        example:
            data: {value: 666.6, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.averageWeeklyDistanceLongRun:
        description: 'Average weekyl distance over long term'
        example:
            data: {value: 777.7, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.accelerationEvaluation:
        description: 'Acceleration evaluation percentage'
        example:
            data: {value: 0.7}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.drivingStyleEvaluation:
        description: 'Driving style evaluation percentage'
        example:
            data: {value: 0.88}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.drivingModesActivationPeriods:
        example:
            - {data: {drivingMode: {value: regular}, period: {value: 0.2}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: eco}, period: {value: 0.3}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: sport}, period: {value: 0.1}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: sport_plus}, period: {value: 0.1}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: ecoPlus}, period: {value: 0.3}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: comfort}, period: {value: 0}}, timestamp: '2021-01-11T08:09:28.601Z'}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [regular, eco, sport, sport_plus, ecoPlus, comfort]}, period: {description: 'Percentage of the period used for a driving mode', type: number, format: double}}
    usage.drivingModesEnergyConsumptions:
        example:
            - {data: {drivingMode: {value: regular}, consumption: {value: 20.2, unit: kilowatt_hours}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: eco}, consumption: {value: 33.2, unit: kilowatt_hours}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: sport}, consumption: {value: 54.3, unit: kilowatt_hours}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: sport_plus}, consumption: {value: 64.8, unit: kilowatt_hours}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: ecoPlus}, consumption: {value: 18, unit: kilowatt_hours}}, timestamp: '2021-01-11T08:09:28.601Z'}
            - {data: {drivingMode: {value: comfort}, consumption: {value: 33.7, unit: kilowatt_hours}}, timestamp: '2021-01-11T08:09:28.601Z'}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [regular, eco, sport, sport_plus, ecoPlus, comfort]}, consumption: {description: 'Energy consumption in the driving mode'}}
    usage.lastTripEnergyConsumption:
        description: 'Energy consumption in the last trip'
        example:
            data: {value: 101.3, unit: kilowatt_hours}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.lastTripFuelConsumption:
        description: 'Fuel consumption in the last trip'
        example:
            data: {value: 22.5, unit: liters}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.mileageAfterLastTrip:
        description: 'Mileage after the last trip'
        example:
            data: {value: 95632, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.lastTripElectricPortion:
        description: 'Portion of the last trip used in electric mode'
        example:
            data: {value: 0.7}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.lastTripAverageEnergyRecuperation:
        description: 'Energy recuperation rate for last trip'
        example:
            data: {value: 5.68, unit: kwh_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.lastTripBatteryRemaining:
        description: 'Battery % remaining after last trip'
        example:
            data: {value: 0.5}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.lastTripDate:
        description: 'The last trip date'
        example:
            data: {value: '2018-10-17T12:34:58.000Z'}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        format: date-time
    usage.averageFuelConsumption:
        description: 'Average fuel consumption for current trip'
        example:
            data: {value: 6.5, unit: liters_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.currentFuelConsumption:
        description: 'Current fuel consumption'
        example:
            data: {value: 7.5, unit: liters_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.odometerAfterLastTrip:
        description: 'Odometer after the last trip'
        example:
            data: {value: 95632, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.safetyDrivingScore:
        description: 'Safety driving score as percentage'
        example:
            data: {value: 0.7}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.rapidAccelerationGrade:
        description: 'Grade given for rapid acceleration over time'
        example:
            data: {value: excellent}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.rapidDecelerationGrade:
        description: 'Grade given for rapid deceleration over time'
        example:
            data: {value: normal}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.lateNightGrade:
        description: 'Grade given for late night driving over time'
        example:
            data: {value: excellent}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: string
        enum:
            - excellent
            - normal
            - warning
    usage.distanceOverTime:
        description: 'Distance driven over a given time period'
        example:
            data: {distance: {value: 1500.88, unit: kilometers}, time: {value: 10, unit: weeks}}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: object
        properties:
            distance: {description: 'Distance driven'}
            time: {description: 'Duration of time for the given distance'}
    usage.electricConsumptionRateSinceStart:
        description: 'Electric energy consumption rate since the start of a trip'
        example:
            data: {value: 11.22, unit: kwh_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.electricConsumptionRateSinceReset:
        description: 'Electric energy consumption rate since a reset'
        example:
            data: {value: 22.33, unit: kwh_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.electricDistanceLastTrip:
        description: 'Distance travelled with electricity in last trip'
        example:
            data: {value: 111000, unit: meters}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.electricDistanceSinceReset:
        description: 'Distance travelled with electricity since reset'
        example:
            data: {value: 222000, unit: meters}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.electricDurationLastTrip:
        description: 'Duration of travelling using electricity during last trip'
        example:
            data: {value: 77, unit: minutes}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.electricDurationSinceReset:
        description: 'Duration of travelling using electricity since reset'
        example:
            data: {value: 88, unit: minutes}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.fuelConsumptionRateLastTrip:
        description: 'Liquid fuel consumption rate during last trip'
        example:
            data: {value: 5.4, unit: liters_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.fuelConsumptionRateSinceReset:
        description: 'Liquid fuel consumption rate since reset'
        example:
            data: {value: 5.3, unit: liters_per_100_kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.averageSpeedLastTrip:
        description: 'Average speed during last trip'
        example:
            data: {value: 44.2, unit: kilometers_per_hour}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.averageSpeedSinceReset:
        description: 'Average speed since reset'
        example:
            data: {value: 44.2, unit: kilometers_per_hour}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.fuelDistanceLastTrip:
        description: 'Distance travelled with (liquid) fuel during last trip'
        example:
            data: {value: 111000, unit: meters}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.fuelDistanceSinceReset:
        description: 'Distance travelled with (liquid) fuel since reset'
        example:
            data: {value: 222000, unit: meters}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.drivingDurationLastTrip:
        description: 'Duration of last trip'
        example:
            data: {value: 77, unit: minutes}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.drivingDurationSinceReset:
        description: 'Duration of travelling since reset'
        example:
            data: {value: 88, unit: minutes}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage.ecoScoreTotal:
        description: 'Overall eco-score rating'
        example:
            data: {value: 0.7}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.ecoScoreFreeWheel:
        description: 'Eco-score rating for free-wheeling'
        example:
            data: {value: 0.7}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.ecoScoreConstant:
        description: 'Eco-score rating constant'
        example:
            data: {value: 0.7}
            timestamp: '2021-01-11T08:09:28.601Z'
        type: number
        format: double
    usage.ecoScoreBonusRange:
        description: 'Eco-score bonus range'
        example:
            data: {value: 0.7, unit: kilometers}
            timestamp: '2021-01-11T08:09:28.601Z'
    usage:
        type: object
        properties:
            averageWeeklyDistance: {$ref: '#/definitions/usage.averageWeeklyDistance'}
            averageWeeklyDistanceLongRun: {$ref: '#/definitions/usage.averageWeeklyDistanceLongRun'}
            accelerationEvaluation: {$ref: '#/definitions/usage.accelerationEvaluation'}
            drivingStyleEvaluation: {$ref: '#/definitions/usage.drivingStyleEvaluation'}
            drivingModesActivationPeriods: {$ref: '#/definitions/usage.drivingModesActivationPeriods'}
            drivingModesEnergyConsumptions: {$ref: '#/definitions/usage.drivingModesEnergyConsumptions'}
            lastTripEnergyConsumption: {$ref: '#/definitions/usage.lastTripEnergyConsumption'}
            lastTripFuelConsumption: {$ref: '#/definitions/usage.lastTripFuelConsumption'}
            mileageAfterLastTrip: {$ref: '#/definitions/usage.mileageAfterLastTrip'}
            lastTripElectricPortion: {$ref: '#/definitions/usage.lastTripElectricPortion'}
            lastTripAverageEnergyRecuperation: {$ref: '#/definitions/usage.lastTripAverageEnergyRecuperation'}
            lastTripBatteryRemaining: {$ref: '#/definitions/usage.lastTripBatteryRemaining'}
            lastTripDate: {$ref: '#/definitions/usage.lastTripDate'}
            averageFuelConsumption: {$ref: '#/definitions/usage.averageFuelConsumption'}
            currentFuelConsumption: {$ref: '#/definitions/usage.currentFuelConsumption'}
            odometerAfterLastTrip: {$ref: '#/definitions/usage.odometerAfterLastTrip'}
            safetyDrivingScore: {$ref: '#/definitions/usage.safetyDrivingScore'}
            rapidAccelerationGrade: {$ref: '#/definitions/usage.rapidAccelerationGrade'}
            rapidDecelerationGrade: {$ref: '#/definitions/usage.rapidDecelerationGrade'}
            lateNightGrade: {$ref: '#/definitions/usage.lateNightGrade'}
            distanceOverTime: {$ref: '#/definitions/usage.distanceOverTime'}
            electricConsumptionRateSinceStart: {$ref: '#/definitions/usage.electricConsumptionRateSinceStart'}
            electricConsumptionRateSinceReset: {$ref: '#/definitions/usage.electricConsumptionRateSinceReset'}
            electricDistanceLastTrip: {$ref: '#/definitions/usage.electricDistanceLastTrip'}
            electricDistanceSinceReset: {$ref: '#/definitions/usage.electricDistanceSinceReset'}
            electricDurationLastTrip: {$ref: '#/definitions/usage.electricDurationLastTrip'}
            electricDurationSinceReset: {$ref: '#/definitions/usage.electricDurationSinceReset'}
            fuelConsumptionRateLastTrip: {$ref: '#/definitions/usage.fuelConsumptionRateLastTrip'}
            fuelConsumptionRateSinceReset: {$ref: '#/definitions/usage.fuelConsumptionRateSinceReset'}
            averageSpeedLastTrip: {$ref: '#/definitions/usage.averageSpeedLastTrip'}
            averageSpeedSinceReset: {$ref: '#/definitions/usage.averageSpeedSinceReset'}
            fuelDistanceLastTrip: {$ref: '#/definitions/usage.fuelDistanceLastTrip'}
            fuelDistanceSinceReset: {$ref: '#/definitions/usage.fuelDistanceSinceReset'}
            drivingDurationLastTrip: {$ref: '#/definitions/usage.drivingDurationLastTrip'}
            drivingDurationSinceReset: {$ref: '#/definitions/usage.drivingDurationSinceReset'}
            ecoScoreTotal: {$ref: '#/definitions/usage.ecoScoreTotal'}
            ecoScoreFreeWheel: {$ref: '#/definitions/usage.ecoScoreFreeWheel'}
            ecoScoreConstant: {$ref: '#/definitions/usage.ecoScoreConstant'}
            ecoScoreBonusRange: {$ref: '#/definitions/usage.ecoScoreBonusRange'}
    valetMode.status:
        example:
            data: {value: active}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - inactive
            - active
    valetMode:
        type: object
        properties:
            status: {$ref: '#/definitions/valetMode.status'}
    vehicleInformation.powertrain:
        example:
            data: {value: all_electric}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - unknown
            - all_electric
            - combustion_engine
            - phev
            - hydrogen
            - hydrogen_hybrid
    vehicleInformation.modelName:
        description: 'The vehicle model name'
        example:
            data: {value: 'Type X'}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
    vehicleInformation.name:
        description: 'The vehicle name (nickname)'
        example:
            data: {value: Speedy}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
    vehicleInformation.licensePlate:
        description: 'The license plate number'
        example:
            data: {value: ABC123}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
    vehicleInformation.salesDesignation:
        description: 'The sales designation of the model'
        example:
            data: {value: Package+}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
    vehicleInformation.modelYear:
        description: 'The vehicle model manufacturing year number'
        example:
            data: {value: 2019}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: number
        format: integer
    vehicleInformation.colourName:
        description: 'The colour name'
        example:
            data: {value: 'Estoril Blau'}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
    vehicleInformation.powerInKW:
        description: 'The power of the vehicle'
        example:
            data: {value: 220, unit: kilowatts}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleInformation.numberOfDoors:
        description: 'The number of doors'
        example:
            data: {value: 5}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: number
        format: integer
    vehicleInformation.numberOfSeats:
        description: 'The number of seats'
        example:
            data: {value: 5}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: number
        format: integer
    vehicleInformation.engineVolume:
        description: 'The engine volume displacement'
        example:
            data: {value: 2.5, unit: liters}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleInformation.engineMaxTorque:
        description: 'The maximum engine torque'
        example:
            data: {value: 245, unit: newton_meters}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleInformation.gearbox:
        example:
            data: {value: automatic}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - manual
            - automatic
            - semi_automatic
    vehicleInformation.displayUnit:
        example:
            data: {value: km}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - km
            - miles
    vehicleInformation.driverSeatLocation:
        example:
            data: {value: left}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - left
            - right
            - center
    vehicleInformation.equipments:
        description: 'Names of equipment the vehicle is equipped with'
        example:
            - {data: {value: 'Parking sensors'}, timestamp: '2021-01-11T08:09:28.602Z'}
            - {data: {value: 'Automatic wipers'}, timestamp: '2021-01-11T08:09:28.602Z'}
        type: array
        items:
            type: string
    vehicleInformation.power:
        description: 'The power of the vehicle'
        example:
            data: {value: 220, unit: kilowatts}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleInformation.language:
        description: 'The language on headunit'
        example:
            data: {value: estonian}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
    vehicleInformation.timeformat:
        description: 'The timeformat on headunit'
        example:
            data: {value: twenty_four_h}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - twelve_h
            - twenty_four_h
    vehicleInformation.drive:
        description: 'Wheels driven by the engine'
        example:
            data: {value: rwd}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: string
        enum:
            - fwd
            - rwd
            - four_wd
            - awd
    vehicleInformation:
        type: object
        properties:
            powertrain: {$ref: '#/definitions/vehicleInformation.powertrain'}
            modelName: {$ref: '#/definitions/vehicleInformation.modelName'}
            name: {$ref: '#/definitions/vehicleInformation.name'}
            licensePlate: {$ref: '#/definitions/vehicleInformation.licensePlate'}
            salesDesignation: {$ref: '#/definitions/vehicleInformation.salesDesignation'}
            modelYear: {$ref: '#/definitions/vehicleInformation.modelYear'}
            colourName: {$ref: '#/definitions/vehicleInformation.colourName'}
            powerInKW: {$ref: '#/definitions/vehicleInformation.powerInKW'}
            numberOfDoors: {$ref: '#/definitions/vehicleInformation.numberOfDoors'}
            numberOfSeats: {$ref: '#/definitions/vehicleInformation.numberOfSeats'}
            engineVolume: {$ref: '#/definitions/vehicleInformation.engineVolume'}
            engineMaxTorque: {$ref: '#/definitions/vehicleInformation.engineMaxTorque'}
            gearbox: {$ref: '#/definitions/vehicleInformation.gearbox'}
            displayUnit: {$ref: '#/definitions/vehicleInformation.displayUnit'}
            driverSeatLocation: {$ref: '#/definitions/vehicleInformation.driverSeatLocation'}
            equipments: {$ref: '#/definitions/vehicleInformation.equipments'}
            power: {$ref: '#/definitions/vehicleInformation.power'}
            language: {$ref: '#/definitions/vehicleInformation.language'}
            timeformat: {$ref: '#/definitions/vehicleInformation.timeformat'}
            drive: {$ref: '#/definitions/vehicleInformation.drive'}
    vehicleLocation.coordinates:
        example:
            data: {latitude: {value: 52.520008}, longitude: {value: 13.404954}}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    vehicleLocation.heading:
        description: 'Heading angle'
        example:
            data: {value: 13.370123, unit: degrees}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleLocation.altitude:
        description: 'Altitude above the WGS 84 reference ellipsoid'
        example:
            data: {value: 133.5, unit: meters}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleLocation.precision:
        example:
            data: {value: 500, unit: meters}
            timestamp: '2021-01-11T08:09:28.602Z'
    vehicleLocation:
        type: object
        properties:
            coordinates: {$ref: '#/definitions/vehicleLocation.coordinates'}
            heading: {$ref: '#/definitions/vehicleLocation.heading'}
            altitude: {$ref: '#/definitions/vehicleLocation.altitude'}
            precision: {$ref: '#/definitions/vehicleLocation.precision'}
    vehicleStatus.states:
        description: 'The bytes of a Capability state'
        example:
            - {data: {doors: {locksState: {data: {value: unlocked}}, positions: [{data: {location: {value: front_left}, position: {value: open}}}, {data: {location: {value: rear_right}, position: {value: open}}}], timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2021-01-11T08:09:28.602Z'}
            - {data: {charging: {chargePortState: {data: {value: open}}, chargeMode: {data: {value: immediate}}, chargingRate: {data: {value: 35, unit: kilowatts}}, maxRange: {data: {value: 555, unit: kilometers}}, timestamp: {data: {value: '2017-01-10T16:32:05.000Z'}}}}, timestamp: '2021-01-11T08:09:28.602Z'}
        type: array
        items:
            type: capability_state
    vehicleStatus:
        type: object
        properties:
            states: {$ref: '#/definitions/vehicleStatus.states'}
    vehicleTime.vehicleTime:
        description: 'Vehicle time in a 24h format'
        example:
            data: {hour: {value: 19}, minute: {value: 55}}
            timestamp: '2021-01-11T08:09:28.602Z'
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    vehicleTime:
        type: object
        properties:
            vehicleTime: {$ref: '#/definitions/vehicleTime.vehicleTime'}
    videoHandover.url:
        description: 'URL string'
        example:
            data: {value: 'https://bit.ly/2obY7G5'}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
    videoHandover.startingSecond:
        description: 'Start the video from the given time'
        example:
            data: {value: 3, unit: seconds}
            timestamp: '2021-01-11T08:09:28.604Z'
    videoHandover.screen:
        example:
            data: {value: rear}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
        enum:
            - front
            - rear
    videoHandover.startingTime:
        description: 'Start the video from the given time'
        example:
            data: {value: 2.5, unit: seconds}
            timestamp: '2021-01-11T08:09:28.604Z'
    wakeUp.status:
        example:
            data: {value: wake_up}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
        enum:
            - wake_up
            - sleep
    weatherConditions.rainIntensity:
        description: 'Measured raining intensity percentage, whereas 0% is no rain and 100% is maximum rain'
        example:
            data: {value: 1}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: number
        format: double
    weatherConditions:
        type: object
        properties:
            rainIntensity: {$ref: '#/definitions/weatherConditions.rainIntensity'}
    wiFi.status:
        example:
            data: {value: enabled}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
        enum:
            - disabled
            - enabled
    wiFi.networkConnected:
        example:
            data: {value: connected}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
        enum:
            - disconnected
            - connected
    wiFi.networkSSID:
        description: 'The network SSID'
        example:
            data: {value: HOME}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
    wiFi.networkSecurity:
        example:
            data: {value: wpa2_personal}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    wiFi.password:
        description: 'The network password'
        example:
            data: {value: great_secret12}
            timestamp: '2021-01-11T08:09:28.604Z'
        type: string
    wiFi:
        type: object
        properties:
            status: {$ref: '#/definitions/wiFi.status'}
            networkConnected: {$ref: '#/definitions/wiFi.networkConnected'}
            networkSSID: {$ref: '#/definitions/wiFi.networkSSID'}
            networkSecurity: {$ref: '#/definitions/wiFi.networkSecurity'}
    windows.openPercentages:
        example:
            - {data: {location: {value: front_left}, openPercentage: {value: 0.2}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: front_right}, openPercentage: {value: 0.5}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: rear_right}, openPercentage: {value: 0.5}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: rear_left}, openPercentage: {value: 0.1}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: hatch}, openPercentage: {value: 0.18}}, timestamp: '2021-01-11T08:09:28.605Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}
    windows.positions:
        example:
            - {data: {location: {value: front_left}, position: {value: open}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: front_right}, position: {value: open}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: rear_right}, position: {value: closed}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: rear_left}, position: {value: open}}, timestamp: '2021-01-11T08:09:28.605Z'}
            - {data: {location: {value: hatch}, position: {value: open}}, timestamp: '2021-01-11T08:09:28.605Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, position: {type: string, enum: [closed, open, intermediate]}}
    windows:
        type: object
        properties:
            openPercentages: {$ref: '#/definitions/windows.openPercentages'}
            positions: {$ref: '#/definitions/windows.positions'}
    windscreen.wipersStatus:
        example:
            data: {value: automatic}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: string
        enum:
            - inactive
            - active
            - automatic
    windscreen.wipersIntensity:
        example:
            data: {value: level_3}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: string
        enum:
            - level_0
            - level_1
            - level_2
            - level_3
    windscreen.windscreenDamage:
        example:
            data: {value: impact_but_no_damage_detected}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: string
        enum:
            - no_impact_detected
            - impact_but_no_damage_detected
            - damage_smaller_than_1_inch
            - damage_larger_than_1_inch
    windscreen.windscreenZoneMatrix:
        description: 'Representing the size of the matrix, seen from the inside of the vehicle'
        example:
            data: {horizontal: {value: 4}, vertical: {value: 3}}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenDamageZone:
        description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)'
        example:
            data: {horizontal: {value: 1}, vertical: {value: 2}}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenNeedsReplacement:
        example:
            data: {value: no_replacement_needed}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: string
        enum:
            - unknown
            - no_replacement_needed
            - replacement_needed
    windscreen.windscreenDamageConfidence:
        description: 'Confidence of damage detection, 0% if no impact detected'
        example:
            data: {value: 0.95}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: number
        format: double
    windscreen.windscreenDamageDetectionTime:
        description: 'Windscreen damage detection date'
        example:
            data: {value: '2017-01-10T16:32:05.000Z'}
            timestamp: '2021-01-11T08:09:28.605Z'
        type: string
        format: date-time
    windscreen:
        type: object
        properties:
            wipersStatus: {$ref: '#/definitions/windscreen.wipersStatus'}
            wipersIntensity: {$ref: '#/definitions/windscreen.wipersIntensity'}
            windscreenDamage: {$ref: '#/definitions/windscreen.windscreenDamage'}
            windscreenZoneMatrix: {$ref: '#/definitions/windscreen.windscreenZoneMatrix'}
            windscreenDamageZone: {$ref: '#/definitions/windscreen.windscreenDamageZone'}
            windscreenNeedsReplacement: {$ref: '#/definitions/windscreen.windscreenNeedsReplacement'}
            windscreenDamageConfidence: {$ref: '#/definitions/windscreen.windscreenDamageConfidence'}
            windscreenDamageDetectionTime: {$ref: '#/definitions/windscreen.windscreenDamageDetectionTime'}
    Error400:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 400}
            failureType: {type: string, enum: [unsupported_capability, incorrect_state, invalid_command, other], example: unsupported_capability}
            failureDescription: {type: string, example: 'Capability not supported by this vehicle', description: 'Failure description formatted in UTF-8'}
    Error401:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 401}
            failureType: {type: string, enum: [auth_header_missing, other], example: auth_header_missing}
            failureDescription: {type: string, example: 'Missing authentication header', description: 'Failure description formatted in UTF-8'}
    Error403:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 403}
            failureType: {type: string, enum: [auth_header_invalid, other], example: auth_header_invalid}
            failureDescription: {type: string, example: 'Invalid authentication header', description: 'Failure description formatted in UTF-8'}
    Error408:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 408}
            failureType: {type: string, enum: [request_timeout, vehicle_asleep, charger_asleep, other], example: vehicle_asleep}
            failureDescription: {type: string, example: 'Vehicle Asleep', description: 'Failure description formatted in UTF-8'}
paths:
    /browser/load_url:
        put:
            tags: [Browser]
            summary: 'Load a URL in the headunit browser. A URL shortener can be used in other cases. Note that for the vehicle emulator the URL has to be for a secure site (HTTPS).'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {url: {description: 'The URL', example: 'https://about.high-mobility.com', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /capabilities:
        get:
            tags: [Capabilities]
            summary: 'Get Capabilities state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Capabilities State', schema: {$ref: '#/definitions/capabilities'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging:
        get:
            tags: [Charging]
            summary: 'Get Charging state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/start_stop_charging:
        put:
            tags: [Charging]
            summary: 'Start or stop charging, which can only be controlled when the vehicle is plugged in.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: charging, type: string, enum: [not_charging, charging, charging_complete, initialising, charging_paused, charging_error, cable_unplugged, slow_charging, fast_charging, discharging, foreign_object_detected]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charge_limit:
        put:
            tags: [Charging]
            summary: 'Set the charge limit, to which point the vehicle will charge itself.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeLimit: {description: 'Charge limit percentage between 0.0-1.0', example: 0.9, type: number, format: double}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/open_close_charging_port:
        put:
            tags: [Charging]
            summary: 'Open or close the charge port of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargePortState: {example: open, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charge_mode:
        put:
            tags: [Charging]
            summary: 'Set the charge mode of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeMode: {example: timer_based, type: string, enum: [immediate, timer_based, inductive]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charging_timers:
        put:
            tags: [Charging]
            summary: 'Set the charging timers of the vehicle. The command can include one of the different timer types or all.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {timers: {example: [{timerType: preferred_start_time, date: '2017-01-10T16:32:05.000Z'}, {timerType: preferred_end_time, date: '2017-01-10T16:36:05.000Z'}, {timerType: departure_date, date: '2017-01-10T16:36:05.000Z'}], type: array, items: {type: object, properties: {timerType: {type: string, enum: [preferred_start_time, preferred_end_time, departure_date]}, date: {description: 'Timer date', type: string, format: date-time}}}}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_reduction_of_charging_current_times:
        put:
            tags: [Charging]
            summary: 'Set the reduction of charging times of the vehicle. The command can include different values for start and stop.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {reductionTimes: {example: [{startStop: start, time: {hour: 17, minute: 33}}, {startStop: stop, time: {hour: 12, minute: 52}}], type: array, items: {type: object, properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}}}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings:
        get:
            tags: ['Chassis Settings']
            summary: 'Get Chassis Settings state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_driving_mode:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the driving mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {drivingMode: {example: eco, type: string, enum: [regular, eco, sport, sport_plus, ecoPlus, comfort]}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/start_stop_sports_chrono:
        put:
            tags: ['Chassis Settings']
            summary: 'Start/Stop sport chrono.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {sportChrono: {example: active, type: string, enum: [inactive, active, reset]}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_spring_rates:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the spring rates.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {currentSpringRates: {description: 'The current values for the spring rates', example: [{axle: front, springRate: {newton_millimeters: 21}}, {axle: rear, springRate: {newton_millimeters: 23}}], type: array, items: {type: object, properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate'}}}}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_chassis_position:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the chassis position.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {currentChassisPosition: {description: 'The chassis position calculated from the lowest point', example: {millimeters: 25.4}}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate:
        get:
            tags: [Climate]
            summary: 'Get Climate state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/change_starting_times:
        put:
            tags: [Climate]
            summary: 'Set the HVAC (Heating, ventilation, and air conditioning) automated starting times.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {hvacWeekdayStartingTimes: {example: [{weekday: monday, time: {hour: 16, minute: 0}}, {weekday: tuesday, time: {hour: 16, minute: 0}}, {weekday: wednesday, time: {hour: 16, minute: 0}}, {weekday: thursday, time: {hour: 16, minute: 0}}, {weekday: friday, time: {hour: 16, minute: 0}}, {weekday: saturday, time: {hour: 18, minute: 30}}, {weekday: sunday, time: {hour: 19, minute: 31}}, {weekday: automatic, time: {hour: 16, minute: 0}}], type: array, items: {type: object, properties: {weekday: {type: string, enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday, automatic]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}}}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_hvac:
        put:
            tags: [Climate]
            summary: 'Start or stop the HVAC system to reach driver and passenger set temperatures. The vehicle will use cooling, defrosting and defogging as appropriate.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {hvacState: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_defogging:
        put:
            tags: [Climate]
            summary: 'Manually start or stop defogging.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {defoggingState: {example: inactive, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_defrosting:
        put:
            tags: [Climate]
            summary: 'Manually start or stop defrosting.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {defrostingState: {example: inactive, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_ionising:
        put:
            tags: [Climate]
            summary: 'Manually start or stop ionising.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {ionisingState: {example: inactive, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/set_temperature_settings:
        put:
            tags: [Climate]
            summary: 'Set the preferred temperature settings.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {driverTemperatureSetting: {description: 'The driver temperature setting', example: {celsius: 21.5}}, passengerTemperatureSetting: {description: 'The passenger temperature setting', example: {celsius: 21.7}}, rearTemperatureSetting: {description: 'The rear temperature', example: {celsius: 21.6}}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /dashboard_lights:
        get:
            tags: ['Dashboard Lights']
            summary: 'Get Dashboard Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Dashboard Lights State', schema: {$ref: '#/definitions/dashboardLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /diagnostics:
        get:
            tags: [Diagnostics]
            summary: 'Get Diagnostics state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Diagnostics State', schema: {$ref: '#/definitions/diagnostics'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors:
        get:
            tags: [Doors]
            summary: 'Get Doors state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Doors State', schema: {$ref: '#/definitions/doors'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors/lock_unlock_doors:
        put:
            tags: [Doors]
            summary: 'Attempt to lock or unlock all doors of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {locksState: {description: 'Locks state for the whole vehicle (combines all specific lock states if available)', example: unlocked, type: string, enum: [unlocked, locked]}}}}]
            responses: {'200': {description: 'Doors State', schema: {$ref: '#/definitions/doors'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine:
        get:
            tags: [Engine]
            summary: 'Get Engine state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Engine State', schema: {$ref: '#/definitions/engine'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine/turn_engine_on_off:
        put:
            tags: [Engine]
            summary: 'Attempt to turn the vehicle engine on or off.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: off, type: string, enum: [off, on]}}}}]
            responses: {'200': {description: 'Engine State', schema: {$ref: '#/definitions/engine'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine/activate_deactivate_start_stop:
        put:
            tags: [Engine]
            summary: 'Activate or deactivate the Start-Stop system of the engine. When activated, this will automatically shut down and restart the internal combustion engine when the vehicle is stopped.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {startStopState: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Engine State', schema: {$ref: '#/definitions/engine'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /firmware_version:
        get:
            tags: ['Firmware Version']
            summary: 'Get Firmware Version state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Firmware Version State', schema: {$ref: '#/definitions/firmwareVersion'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling:
        get:
            tags: [Fueling]
            summary: 'Get Fueling state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Fueling State', schema: {$ref: '#/definitions/fueling'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling/control_gas_flap:
        put:
            tags: [Fueling]
            summary: 'Control the gas flap of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {gasFlapLock: {example: locked, type: string, enum: [unlocked, locked]}, gasFlapPosition: {example: closed, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Fueling State', schema: {$ref: '#/definitions/fueling'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /graphics/display_image:
        put:
            tags: [Graphics]
            summary: 'Display an image in the headunit by providing the image URL.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {imageURL: {description: 'The image URL', example: 'https://about.high-mobility.com/assets/images/hm-logo.svg', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /historical/request_states:
        put:
            tags: [Historical]
            summary: 'Request historical states.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {capabilityID: {description: 'The identifier of the Capability', example: 96, type: number, format: integer}, startDate: {description: 'Start date for historical data query', example: '2019-10-07T13:04:32.000Z', type: string, format: date-time}, endDate: {description: 'End date for historical data query', example: '2019-09-27T08:42:30.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Historical State', schema: {$ref: '#/definitions/historical'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /historical/get_trips:
        put:
            tags: [Historical]
            summary: 'Request history of trips travelled with the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {startDate: {description: 'Start date for historical data query', example: '2019-10-07T13:04:32.000Z', type: string, format: date-time}, endDate: {description: 'End date for historical data query', example: '2019-09-27T08:42:30.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Historical State', schema: {$ref: '#/definitions/historical'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger:
        get:
            tags: ['Home Charger']
            summary: 'Get Home Charger state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/set_charge_current:
        put:
            tags: ['Home Charger']
            summary: 'Set the charge current of the home charger.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeCurrent: {description: 'The charge current', example: {amperes: 0.5}}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/set_price_tariffs:
        put:
            tags: ['Home Charger']
            summary: 'Set the price tariffs of the home charger.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {priceTariffs: {example: [{pricingType: starting_fee, price: 4.5, currency: EUR}, {pricingType: per_minute, price: 0.3, currency: EUR}, {pricingType: per_kwh, price: 0.3, currency: Ripple}], type: array, items: {type: object, properties: {pricingType: {type: string, enum: [starting_fee, per_minute, per_kwh]}, price: {description: 'The price', type: number, format: double}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}}}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/activate_deactivate_solar_charging:
        put:
            tags: ['Home Charger']
            summary: 'Activate or deactivate charging from solar power.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {solarCharging: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/enable_disable_wi_fi_hotspot:
        put:
            tags: ['Home Charger']
            summary: 'Enable or disable the Wi-Fi Hotspot.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {wifiHotspotEnabled: {example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/authenticate_expire:
        put:
            tags: ['Home Charger']
            summary: 'Authenticate or expire the charging session. Only if the session is authenticated can the charging be started by the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {authenticationState: {example: authenticated, type: string, enum: [unauthenticated, authenticated]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights:
        get:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Get Honk Horn & Flash Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/honk_flash:
        put:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Honk the horn and/or flash the blinker lights. This can be done simultaneously or just one action at the time. It is also possible to pass in how many times the lights should be flashed and how many seconds the horn should be honked.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {honkTime: {description: 'Time to honk the horn', example: {seconds: 2}}, flashTimes: {description: 'Number of times to flash the lights', example: 5, type: number, format: integer}}}}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/activate_deactivate_emergency_flasher:
        put:
            tags: ['Honk Horn & Flash Lights']
            summary: 'This activates or deactivates the emergency flashers of the vehicle, typically the blinkers to alarm other drivers.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {emergencyFlashersState: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /hood:
        get:
            tags: [Hood]
            summary: 'Get Hood state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Hood State', schema: {$ref: '#/definitions/hood'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition:
        get:
            tags: [Ignition]
            summary: 'Get Ignition state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Ignition State', schema: {$ref: '#/definitions/ignition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition/turn_ignition_on_off:
        put:
            tags: [Ignition]
            summary: 'Attempt to turn the vehicle engine ignition on or off. When the engine ignition is on, it is possible for the driver to turn on the engine and drive the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: off, type: string, enum: [off, on]}}}}]
            responses: {'200': {description: 'Ignition State', schema: {$ref: '#/definitions/ignition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /light_conditions:
        get:
            tags: ['Light Conditions']
            summary: 'Get Light Conditions state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Light Conditions State', schema: {$ref: '#/definitions/lightConditions'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights:
        get:
            tags: [Lights]
            summary: 'Get Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Lights State', schema: {$ref: '#/definitions/lights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights/control_lights:
        put:
            tags: [Lights]
            summary: 'Set the lights state.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {frontExteriorLight: {example: active_with_full_beam, type: string, enum: [inactive, active, active_with_full_beam, drl, automatic]}, rearExteriorLight: {example: active, type: string, enum: [inactive, active]}, ambientLightColour: {example: {red: 255, green: 0, blue: 0}, type: object, properties: {red: {description: 'The red component of RGB', type: number, format: integer}, green: {description: 'The green component of RGB', type: number, format: integer}, blue: {description: 'The blue component of RGB', type: number, format: integer}}}, fogLights: {example: [{location: front, state: inactive}, {location: rear, state: active}], type: array, items: {type: object, properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}}}, readingLamps: {example: [{location: front_left, state: active}, {location: front_right, state: active}, {location: rear_right, state: inactive}, {location: rear_left, state: inactive}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left]}, state: {type: string, enum: [inactive, active]}}}}, interiorLights: {example: [{location: front, state: inactive}, {location: rear, state: active}], type: array, items: {type: object, properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}}}}}}]
            responses: {'200': {description: 'Lights State', schema: {$ref: '#/definitions/lights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /maintenance:
        get:
            tags: [Maintenance]
            summary: 'Get Maintenance state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Maintenance State', schema: {$ref: '#/definitions/maintenance'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /messaging/message_received:
        put:
            tags: [Messaging]
            summary: 'Notify the vehicle that a message has been received. Depending on the vehicle system, it will display or read it loud to the driver.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'The text', example: 'Hey mom!', type: string}, handle: {description: 'The optional handle of message', example: Epp, type: string}}}}]
            responses: {'200': {description: 'Messaging State', schema: {$ref: '#/definitions/messaging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /mobile:
        get:
            tags: [Mobile]
            summary: 'Get Mobile state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Mobile State', schema: {$ref: '#/definitions/mobile'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /multi_command/multi_command:
        put:
            tags: ['Multi Command']
            summary: 'Send mutliple commands at once.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {multiCommands: {description: 'The outgoing commands', example: [{doors: {inside_locks_state: locked}}, {ignition: {status: off}}], type: array, items: {type: capability_state}}}}}]
            responses: {'200': {description: 'Multi Command State', schema: {$ref: '#/definitions/multiCommand'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination:
        get:
            tags: ['Navi Destination']
            summary: 'Get Navi Destination state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Navi Destination State', schema: {$ref: '#/definitions/naviDestination'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination/set_navi_destination:
        put:
            tags: ['Navi Destination']
            summary: 'Set the navigation destination. This will be forwarded to the navigation system of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {coordinates: {example: {latitude: 52.520008, longitude: 13.404954}, type: object, properties: {latitude: {description: Latitude, type: number, format: double}, longitude: {description: Longitude, type: number, format: double}}}, destinationName: {description: 'Destination name', example: Berlin, type: string}}}}]
            responses: {'200': {description: 'Navi Destination State', schema: {$ref: '#/definitions/naviDestination'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/notification:
        put:
            tags: [Notifications]
            summary: 'Send a notification to the vehicle or smart device. The notification can have action items that the user can respond with.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'Text for the notification', example: 'Open Garage', type: string}, actionItems: {example: [{id: 27, name: Open}, {id: 28, name: Cancel}], type: array, items: {type: object, properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}}}}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/action:
        put:
            tags: [Notifications]
            summary: 'Activate/choose a notification action.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {activatedAction: {description: 'Identifier of the activated action', example: 27, type: number, format: integer}}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/clear_notification:
        put:
            tags: [Notifications]
            summary: 'Clear the Notification in either the vehicle or device that has previously been sent, ignoring driver feedback.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /offroad:
        get:
            tags: [Offroad]
            summary: 'Get Offroad state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Offroad State', schema: {$ref: '#/definitions/offroad'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake:
        get:
            tags: ['Parking Brake']
            summary: 'Get Parking Brake state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Parking Brake State', schema: {$ref: '#/definitions/parkingBrake'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake/set_parking_brake:
        put:
            tags: ['Parking Brake']
            summary: 'Turn on or off the parking brake.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Parking Brake State', schema: {$ref: '#/definitions/parkingBrake'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket:
        get:
            tags: ['Parking Ticket']
            summary: 'Get Parking Ticket state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/start_parking:
        put:
            tags: ['Parking Ticket']
            summary: 'Start parking. This clears the last parking ticket information and starts a new one. The end time can be left unset depending on the operator.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {operatorTicketID: {description: 'Operator ticket ID', example: 6489AB4233, type: string}, ticketStartTime: {description: 'Parking ticket start time', example: '2017-01-10T19:34:22.000Z', type: string, format: date-time}, operatorName: {description: 'Operator name', example: 'Berlin Parking', type: string}, ticketEndTime: {description: 'Parking ticket end time', example: '2019-10-08T11:21:45.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/end_parking:
        put:
            tags: ['Parking Ticket']
            summary: 'End parking. This updates the parking ticket information. If no end date was set, the current time is set as the ending time.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff:
        get:
            tags: ['Power Take-Off']
            summary: 'Get Power Take-Off state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Power Take-Off State', schema: {$ref: '#/definitions/powerTakeoff'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff/activate_deactivate_power_takeoff:
        put:
            tags: ['Power Take-Off']
            summary: 'Activate or deactivate power take-off.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Power Take-Off State', schema: {$ref: '#/definitions/powerTakeoff'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /race:
        get:
            tags: [Race]
            summary: 'Get Race state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Race State', schema: {$ref: '#/definitions/race'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control:
        get:
            tags: ['Rooftop Control']
            summary: 'Get Rooftop Control state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Rooftop Control State', schema: {$ref: '#/definitions/rooftopControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control/control_rooftop:
        put:
            tags: ['Rooftop Control']
            summary: 'Set the rooftop state.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {dimming: {description: '1.0 (100%) is opaque, 0.0 (0%) is transparent', example: 1, type: number, format: double}, position: {description: '1.0 (100%) is fully open, 0.0 (0%) is closed', example: 0.5, type: number, format: double}, convertibleRoofState: {example: open, type: string, enum: [closed, open, emergency_locked, closed_secured, open_secured, hard_top_mounted, intermediate_position, loading_position, loading_position_immediate]}, sunroofTiltState: {example: half_tilted, type: string, enum: [closed, tilted, half_tilted]}, sunroofState: {example: open, type: string, enum: [closed, open, intermediate]}}}}]
            responses: {'200': {description: 'Rooftop Control State', schema: {$ref: '#/definitions/rooftopControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /seats:
        get:
            tags: [Seats]
            summary: 'Get Seats state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Seats State', schema: {$ref: '#/definitions/seats'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /tachograph:
        get:
            tags: [Tachograph]
            summary: 'Get Tachograph state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Tachograph State', schema: {$ref: '#/definitions/tachograph'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /text_input/text_input:
        put:
            tags: ['Text Input']
            summary: 'Send a keystroke or entire sentences as input to the vehicle headunit. This can act as an alternative to the input devices that the vehicle is equipped with.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'The text', example: 'Rendezvous with Rama', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm:
        get:
            tags: ['Theft Alarm']
            summary: 'Get Theft Alarm state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Theft Alarm State', schema: {$ref: '#/definitions/theftAlarm'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm/set_theft_alarm:
        put:
            tags: ['Theft Alarm']
            summary: 'Unarm or arm the theft alarm of the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: armed, type: string, enum: [unarmed, armed, triggered]}}}}]
            responses: {'200': {description: 'Theft Alarm State', schema: {$ref: '#/definitions/theftAlarm'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk:
        get:
            tags: [Trunk]
            summary: 'Get Trunk state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Trunk State', schema: {$ref: '#/definitions/trunk'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk/control_trunk:
        put:
            tags: [Trunk]
            summary: 'Unlock/Lock and Open/Close the trunk.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {lock: {example: unlocked, type: string, enum: [unlocked, locked]}, position: {example: open, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Trunk State', schema: {$ref: '#/definitions/trunk'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /usage:
        get:
            tags: [Usage]
            summary: 'Get Usage state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Usage State', schema: {$ref: '#/definitions/usage'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode:
        get:
            tags: ['Valet Mode']
            summary: 'Get Valet Mode state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Valet Mode State', schema: {$ref: '#/definitions/valetMode'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode/activate_deactivate_valet_mode:
        put:
            tags: ['Valet Mode']
            summary: 'Activate or deactivate valet mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Valet Mode State', schema: {$ref: '#/definitions/valetMode'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_information:
        get:
            tags: ['Vehicle Information']
            summary: 'Get Vehicle Information state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Information State', schema: {$ref: '#/definitions/vehicleInformation'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_location:
        get:
            tags: ['Vehicle Location']
            summary: 'Get Vehicle Location state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Location State', schema: {$ref: '#/definitions/vehicleLocation'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_status:
        get:
            tags: ['Vehicle Status']
            summary: 'Get Vehicle Status state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Status State', schema: {$ref: '#/definitions/vehicleStatus'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_time:
        get:
            tags: ['Vehicle Time']
            summary: 'Get Vehicle Time state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Time State', schema: {$ref: '#/definitions/vehicleTime'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /video_handover/video_handover:
        put:
            tags: ['Video Handover']
            summary: 'Hand over a video from smart device to vehicle headunit to be shown in the vehicle display. The emulator supports HTML5 video player formats .mp4 and .webm.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {url: {description: 'URL string', example: 'https://bit.ly/2obY7G5', type: string}, startingTime: {description: 'Start the video from the given time', example: {seconds: 2.5}}, screen: {example: rear, type: string, enum: [front, rear]}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wake_up/wake_up:
        put:
            tags: ['Wake Up']
            summary: 'Wake up the vehicle. This is necessary when the vehicle has fallen asleep, in which case the vehicle responds with the Failure Message to all incoming messages. The vehicle is also waken up by the Lock/Unlock Doors message.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /weather_conditions:
        get:
            tags: ['Weather Conditions']
            summary: 'Get Weather Conditions state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Weather Conditions State', schema: {$ref: '#/definitions/weatherConditions'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi:
        get:
            tags: [Wi-Fi]
            summary: 'Get Wi-Fi state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/connect_to_network:
        put:
            tags: [Wi-Fi]
            summary: 'Connect the vehicle to a Wi-Fi network.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {networkSSID: {description: 'The network SSID', example: HOME, type: string}, networkSecurity: {example: wpa2_personal, type: string, enum: [none, wep, wpa, wpa2_personal]}, password: {description: 'The network password', example: great_secret12, type: string}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/forget_network:
        put:
            tags: [Wi-Fi]
            summary: 'Forget a network that the vehicle has previously connected to.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {networkSSID: {description: 'The network SSID', example: HOME, type: string}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/enable_disable_wi_fi:
        put:
            tags: [Wi-Fi]
            summary: 'Enable or disable Wi-Fi completely.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows:
        get:
            tags: [Windows]
            summary: 'Get Windows state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Windows State', schema: {$ref: '#/definitions/windows'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows/control_windows:
        put:
            tags: [Windows]
            summary: 'Open or close the windows. Either one or all windows can be controlled with the same command.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {openPercentages: {example: [{location: front_left, openPercentage: 0.2}, {location: front_right, openPercentage: 0.5}, {location: rear_right, openPercentage: 0.5}, {location: rear_left, openPercentage: 0.1}, {location: hatch, openPercentage: 0.18}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}}}, positions: {example: [{location: front_left, position: open}, {location: front_right, position: open}, {location: rear_right, position: closed}, {location: rear_left, position: open}, {location: hatch, position: open}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, position: {type: string, enum: [closed, open, intermediate]}}}}}}}]
            responses: {'200': {description: 'Windows State', schema: {$ref: '#/definitions/windows'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen:
        get:
            tags: [Windscreen]
            summary: 'Get Windscreen state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/set_windscreen_damage:
        put:
            tags: [Windscreen]
            summary: 'Set the windscreen damage. This is for instance used to reset the glass damage or correct it. Damage confidence percentage is automatically set to either 0% or 100%.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {windscreenDamage: {example: impact_but_no_damage_detected, type: string, enum: [no_impact_detected, impact_but_no_damage_detected, damage_smaller_than_1_inch, damage_larger_than_1_inch]}, windscreenDamageZone: {description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)', example: {horizontal: 1, vertical: 2}, type: object, properties: {horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}, vertical: {description: 'Vertical component of the matrix', type: number, format: integer}}}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/set_windscreen_replacement_needed:
        put:
            tags: [Windscreen]
            summary: 'Set if the windscreen needs replacement.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {windscreenNeedsReplacement: {example: no_replacement_needed, type: string, enum: [unknown, no_replacement_needed, replacement_needed]}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/control_wipers:
        put:
            tags: [Windscreen]
            summary: 'Control the wipers.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {wipersStatus: {example: automatic, type: string, enum: [inactive, active, automatic]}, wipersIntensity: {example: level_3, type: string, enum: [level_0, level_1, level_2, level_3]}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
