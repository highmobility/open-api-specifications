info:
  title: HM REST Auto API
  description: "High Mobility REST Auto API Level 11 specification"
  version: 3.0.0

swagger: "2.0"

host: sandbox.rest-api.high-mobility.com

basePath: /v3

parameters:
    authorizationParam:
        name: Authorization
        in: header
        required: true
        type: string
definitions:
    browser.url:
        description: 'The URL'
        example:
            value: 'https://about.high-mobility.com'
            timestamp: '2020-02-26T09:59:40.289Z'
        type: string
    capabilities.capabilities:
        example:
            - {value: {capability_id: 32, supported_property_ids: [2, 3, 4, 5, 6]}, timestamp: '2020-02-26T09:59:40.289Z'}
            - {value: {capability_id: 35, supported_property_ids: [2, 8, 17]}, timestamp: '2020-02-26T09:59:40.289Z'}
        type: array
        items:
            type: object
            properties: {capabilityID: {description: 'The identifier of the supported capability', type: number, format: integer}, supportedPropertyIDs: {description: 'Array of supported property identifiers', type: array, items: {type: number, format: integer}}}
    capabilities:
        type: object
        properties:
            capabilities: {$ref: '#/definitions/capabilities.capabilities'}
    charging.estimatedRange:
        description: 'Estimated range in km'
        example:
            value: 432
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: integer
    charging.batteryLevel:
        description: 'Battery level percentage between 0.0-1.0'
        example:
            value: 0.5
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: double
    charging.batteryCurrentAC:
        description: 'Battery active current'
        example:
            value: -0.6
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.batteryCurrentDC:
        description: 'Battery direct current'
        example:
            value: -0.6
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.chargerVoltageAC:
        description: 'Charger voltage'
        example:
            value: 400
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.chargerVoltageDC:
        description: 'Charger voltage'
        example:
            value: 400
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.chargeLimit:
        description: 'Charge limit percentage between 0.0-1.0'
        example:
            value: 0.9
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: double
    charging.timeToCompleteCharge:
        description: 'Time until charging completed in minutes'
        example:
            value: 60
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: integer
    charging.chargingRateKW:
        description: 'Charge rate in kW when charging'
        example:
            value: 3.5
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.chargePortState:
        example:
            value: open
            timestamp: '2020-02-26T09:59:40.289Z'
        type: string
        enum:
            - closed
            - open
    charging.chargeMode:
        example:
            value: timer_based
            timestamp: '2020-02-26T09:59:40.289Z'
        type: string
        enum:
            - immediate
            - timer_based
            - inductive
    charging.maxChargingCurrent:
        description: 'Maximum charging current'
        example:
            value: 25
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.plugType:
        example:
            value: type_2
            timestamp: '2020-02-26T09:59:40.289Z'
        type: string
        enum:
            - type_1
            - type_2
            - ccs
            - chademo
    charging.chargingWindowChosen:
        example:
            value: not_chosen
            timestamp: '2020-02-26T09:59:40.289Z'
        type: string
        enum:
            - not_chosen
            - chosen
    charging.departureTimes:
        example:
            - {value: {state: active, time: {hour: 16, minute: 32}}, timestamp: '2020-02-26T09:59:40.289Z'}
            - {value: {state: inactive, time: {hour: 11, minute: 51}}, timestamp: '2020-02-26T09:59:40.289Z'}
        type: array
        items:
            type: object
            properties: {state: {type: string, enum: [inactive, active]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.reductionTimes:
        example:
            - {value: {start_stop: start, time: {hour: 17, minute: 33}}, timestamp: '2020-02-26T09:59:40.289Z'}
            - {value: {start_stop: stop, time: {hour: 12, minute: 52}}, timestamp: '2020-02-26T09:59:40.289Z'}
        type: array
        items:
            type: object
            properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    charging.batteryTemperature:
        description: 'Battery temperature in Celsius'
        example:
            value: 38.4
            timestamp: '2020-02-26T09:59:40.289Z'
        type: number
        format: float
    charging.timers:
        example:
            - {value: {timer_type: preferred_start_time, date: '2017-01-10T16:32:05.000Z'}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {timer_type: preferred_end_time, date: '2017-01-10T16:36:05.000Z'}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {timer_type: departure_date, date: '2017-01-10T16:36:05.000Z'}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {timerType: {type: string, enum: [preferred_start_time, preferred_end_time, departure_date]}, date: {description: 'Milliseconds since UNIX Epoch time', type: string, format: date-time}}
    charging.pluggedIn:
        example:
            value: plugged_in
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - disconnected
            - plugged_in
    charging.status:
        example:
            value: charging
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - not_charging
            - charging
            - charging_complete
            - initialising
            - charging_paused
            - charging_error
    charging:
        type: object
        properties:
            estimatedRange: {$ref: '#/definitions/charging.estimatedRange'}
            batteryLevel: {$ref: '#/definitions/charging.batteryLevel'}
            batteryCurrentAC: {$ref: '#/definitions/charging.batteryCurrentAC'}
            batteryCurrentDC: {$ref: '#/definitions/charging.batteryCurrentDC'}
            chargerVoltageAC: {$ref: '#/definitions/charging.chargerVoltageAC'}
            chargerVoltageDC: {$ref: '#/definitions/charging.chargerVoltageDC'}
            chargeLimit: {$ref: '#/definitions/charging.chargeLimit'}
            timeToCompleteCharge: {$ref: '#/definitions/charging.timeToCompleteCharge'}
            chargingRateKW: {$ref: '#/definitions/charging.chargingRateKW'}
            chargePortState: {$ref: '#/definitions/charging.chargePortState'}
            chargeMode: {$ref: '#/definitions/charging.chargeMode'}
            maxChargingCurrent: {$ref: '#/definitions/charging.maxChargingCurrent'}
            plugType: {$ref: '#/definitions/charging.plugType'}
            chargingWindowChosen: {$ref: '#/definitions/charging.chargingWindowChosen'}
            departureTimes: {$ref: '#/definitions/charging.departureTimes'}
            reductionTimes: {$ref: '#/definitions/charging.reductionTimes'}
            batteryTemperature: {$ref: '#/definitions/charging.batteryTemperature'}
            timers: {$ref: '#/definitions/charging.timers'}
            pluggedIn: {$ref: '#/definitions/charging.pluggedIn'}
            status: {$ref: '#/definitions/charging.status'}
    chassisSettings.drivingMode:
        example:
            value: eco
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - regular
            - eco
            - sport
            - sport_plus
            - ecoPlus
            - comfort
    chassisSettings.sportChrono:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
            - reset
    chassisSettings.currentSpringRates:
        description: 'The current values for the spring rates'
        example:
            - {value: {axle: front, spring_rate: 21}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {axle: rear, spring_rate: 23}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate in N/mm', type: number, format: integer}}
    chassisSettings.maximumSpringRates:
        description: 'The maximum possible values for the spring rates'
        example:
            - {value: {axle: front, spring_rate: 37}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {axle: rear, spring_rate: 39}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate in N/mm', type: number, format: integer}}
    chassisSettings.minimumSpringRates:
        description: 'The minimum possible values for the spring rates'
        example:
            - {value: {axle: front, spring_rate: 16}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {axle: rear, spring_rate: 18}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate in N/mm', type: number, format: integer}}
    chassisSettings.currentChassisPosition:
        description: 'The chassis position in mm calculated from the lowest point'
        example:
            value: 25
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    chassisSettings.maximumChassisPosition:
        description: 'The maximum possible value for the chassis position'
        example:
            value: 55
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    chassisSettings.minimumChassisPosition:
        description: 'The minimum possible value for the chassis position'
        example:
            value: -28
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    chassisSettings:
        type: object
        properties:
            drivingMode: {$ref: '#/definitions/chassisSettings.drivingMode'}
            sportChrono: {$ref: '#/definitions/chassisSettings.sportChrono'}
            currentSpringRates: {$ref: '#/definitions/chassisSettings.currentSpringRates'}
            maximumSpringRates: {$ref: '#/definitions/chassisSettings.maximumSpringRates'}
            minimumSpringRates: {$ref: '#/definitions/chassisSettings.minimumSpringRates'}
            currentChassisPosition: {$ref: '#/definitions/chassisSettings.currentChassisPosition'}
            maximumChassisPosition: {$ref: '#/definitions/chassisSettings.maximumChassisPosition'}
            minimumChassisPosition: {$ref: '#/definitions/chassisSettings.minimumChassisPosition'}
    climate.insideTemperature:
        description: 'The inside temperature in celsius'
        example:
            value: 19
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    climate.outsideTemperature:
        description: 'The outside temperature in celsius'
        example:
            value: 12
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    climate.driverTemperatureSetting:
        description: 'The driver temperature setting in celsius'
        example:
            value: 21.5
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    climate.passengerTemperatureSetting:
        description: 'The passenger temperature setting in celsius'
        example:
            value: 21.5
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    climate.hvacState:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
    climate.defoggingState:
        example:
            value: inactive
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
    climate.defrostingState:
        example:
            value: inactive
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
    climate.ionisingState:
        example:
            value: inactive
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
    climate.defrostingTemperatureSetting:
        description: 'The defrosting temperature setting in celsius'
        example:
            value: 21.5
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    climate.hvacWeekdayStartingTimes:
        example:
            - {value: {weekday: monday, time: {hour: 16, minute: 0}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: tuesday, time: {hour: 16, minute: 0}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: wednesday, time: {hour: 16, minute: 0}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: thursday, time: {hour: 16, minute: 0}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: friday, time: {hour: 16, minute: 0}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: saturday, time: {hour: 18, minute: 30}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: sunday, time: {hour: 19, minute: 31}}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {weekday: automatic, time: {hour: 16, minute: 0}}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {weekday: {type: string, enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday, automatic]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}
    climate.rearTemperatureSetting:
        description: 'The rear temperature in celsius'
        example:
            value: 21.5
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    climate:
        type: object
        properties:
            insideTemperature: {$ref: '#/definitions/climate.insideTemperature'}
            outsideTemperature: {$ref: '#/definitions/climate.outsideTemperature'}
            driverTemperatureSetting: {$ref: '#/definitions/climate.driverTemperatureSetting'}
            passengerTemperatureSetting: {$ref: '#/definitions/climate.passengerTemperatureSetting'}
            hvacState: {$ref: '#/definitions/climate.hvacState'}
            defoggingState: {$ref: '#/definitions/climate.defoggingState'}
            defrostingState: {$ref: '#/definitions/climate.defrostingState'}
            ionisingState: {$ref: '#/definitions/climate.ionisingState'}
            defrostingTemperatureSetting: {$ref: '#/definitions/climate.defrostingTemperatureSetting'}
            hvacWeekdayStartingTimes: {$ref: '#/definitions/climate.hvacWeekdayStartingTimes'}
            rearTemperatureSetting: {$ref: '#/definitions/climate.rearTemperatureSetting'}
    dashboardLights.dashboardLights:
        example:
            - {value: {name: high_beam, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: low_beam, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: hazard_warning, state: info}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: brake_failure, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: hatch_open, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: fuel_level, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: engine_coolant_temperature, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: battery_charging_condition, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: engine_oil, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: position_lights, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: front_fog_light, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: rear_fog_light, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: park_heating, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: engine_indicator, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: service_call, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: transmission_fluid_temperature, state: red}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: transmission_failure, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: anti_lock_brake_failure, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: worn_brake_linings, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: windscreen_washer_fluid, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: tire_failure, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: engine_oil_level, state: yellow}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: engine_coolant_level, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: steering_failure, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: esc_indication, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: brake_lights, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: adblue_level, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: fuel_filter_diff_pressure, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: seat_belt, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: advanced_braking, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: acc, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: trailer_connected, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: airbag, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: esc_switched_off, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {name: lane_departure_warning_off, state: inactive}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {name: {type: string, enum: [high_beam, low_beam, hazard_warning, brake_failure, hatch_open, fuel_level, engine_coolant_temperature, battery_charging_condition, engine_oil, position_lights, front_fog_light, rear_fog_light, park_heating, engine_indicator, service_call, transmission_fluid_temperature, transmission_failure, anti_lock_brake_failure, worn_brake_linings, windscreen_washer_fluid, tire_failure, engine_oil_level, engine_coolant_level, steering_failure, esc_indication, brake_lights, adblue_level, fuel_filter_diff_pressure, seat_belt, advanced_braking, acc, trailer_connected, airbag, esc_switched_off, lane_departure_warning_off]}, state: {type: string, enum: [inactive, info, yellow, red]}}
    dashboardLights:
        type: object
        properties:
            dashboardLights: {$ref: '#/definitions/dashboardLights.dashboardLights'}
    diagnostics.mileage:
        description: 'The car mileage (odometer) in km'
        example:
            value: 150000
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.engineOilTemperature:
        description: 'Engine oil temperature in Celsius, whereas can be negative'
        example:
            value: 99
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.speed:
        description: 'The vehicle speed in km/h, whereas can be negative'
        example:
            value: 60
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.engineRPM:
        description: 'Engine RPM (revolutions per minute)'
        example:
            value: 2500
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.fuelLevel:
        description: 'Fuel level percentage between 0.0-1.0'
        example:
            value: 0.9
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: double
    diagnostics.estimatedRange:
        description: 'Estimated range (with combustion engine)'
        example:
            value: 265
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.washerFluidLevel:
        example:
            value: filled
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - low
            - filled
    diagnostics.batteryVoltage:
        description: 'Battery voltage'
        example:
            value: 12
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    diagnostics.adBlueLevel:
        description: 'AdBlue level in liters'
        example:
            value: 0.5
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    diagnostics.distanceSinceReset:
        description: 'The distance driven in km since reset'
        example:
            value: 1500
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.distanceSinceStart:
        description: 'The distance driven in km since trip start'
        example:
            value: 10
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.fuelVolume:
        description: 'The fuel volume measured in liters'
        example:
            value: 35.5
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    diagnostics.antiLockBraking:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
    diagnostics.engineCoolantTemperature:
        description: 'Engine coolant temperature in Celsius, whereas can be negative'
        example:
            value: 20
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.engineTotalOperatingHours:
        description: 'The accumulated time of engine operation'
        example:
            value: 1500.65
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    diagnostics.engineTotalFuelConsumption:
        description: 'The accumulated lifespan fuel consumption in liters'
        example:
            value: 27587
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: float
    diagnostics.brakeFluidLevel:
        example:
            value: low
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - low
            - filled
    diagnostics.engineTorque:
        description: 'Current engine torque percentage between 0.0-1.0'
        example:
            value: 0.2
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: double
    diagnostics.engineLoad:
        description: 'Current engine load percentage between 0.0-1.0'
        example:
            value: 0.1
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: double
    diagnostics.wheelBasedSpeed:
        description: 'The vehicle speed in km/h measured at the wheel base, whereas can be negative'
        example:
            value: 65
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics.batteryLevel:
        description: 'Battery level in %, value between 0.0 and 1.0'
        example:
            value: 0.56
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: double
    diagnostics.checkControlMessages:
        example:
            - {value: {id: 1, remaining_minutes: 105592, text: 'Check engine', status: Alert}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {ID: {description: 'Check Control Message identifier', type: number, format: integer}, remainingMinutes: {description: 'Remaining time of the message in minutes', type: number, format: integer}, text: {description: 'CCM text', type: string}, status: {description: 'CCM status', type: string}}
    diagnostics.tirePressures:
        example:
            - {value: {location: front_left, pressure: 2.31}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: front_right, pressure: 2.31}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_right, pressure: 2.24}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_left, pressure: 2.24}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left]}, pressure: {description: 'Tire pressure in BAR', type: number, format: float}}
    diagnostics.tireTemperatures:
        example:
            - {value: {location: front_left, temperature: 40}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: front_right, temperature: 40}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_right, temperature: 40}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_left, temperature: 40}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left]}, temperature: {description: 'Tire temperature in Celsius', type: number, format: float}}
    diagnostics.wheelRPMs:
        example:
            - {value: {location: front_left, rpm: 746}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: front_right, rpm: 746}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_right, rpm: 746}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_left, rpm: 746}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Wheel location', type: string, enum: [front_left, front_right, rear_right, rear_left]}, RPM: {description: 'The RPM measured at this wheel', type: number, format: integer}}
    diagnostics.troubleCodes:
        example:
            - {value: {occurences: 2, id: C1116FA, ecu_id: RDU_212FR, status: PENDING}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {occurences: 2, id: C163AFA, ecu_id: DTR212, status: PENDING}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {occurences: {description: 'Number of occurences', type: number, format: integer}, ID: {description: Identifier, type: string}, ecuID: {description: 'Electronic Control Unit identifier', type: string}, status: {description: Status, type: string}}
    diagnostics.mileageMeters:
        description: 'The car mileage (odometer) in meters'
        example:
            value: 150001
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    diagnostics:
        type: object
        properties:
            mileage: {$ref: '#/definitions/diagnostics.mileage'}
            engineOilTemperature: {$ref: '#/definitions/diagnostics.engineOilTemperature'}
            speed: {$ref: '#/definitions/diagnostics.speed'}
            engineRPM: {$ref: '#/definitions/diagnostics.engineRPM'}
            fuelLevel: {$ref: '#/definitions/diagnostics.fuelLevel'}
            estimatedRange: {$ref: '#/definitions/diagnostics.estimatedRange'}
            washerFluidLevel: {$ref: '#/definitions/diagnostics.washerFluidLevel'}
            batteryVoltage: {$ref: '#/definitions/diagnostics.batteryVoltage'}
            adBlueLevel: {$ref: '#/definitions/diagnostics.adBlueLevel'}
            distanceSinceReset: {$ref: '#/definitions/diagnostics.distanceSinceReset'}
            distanceSinceStart: {$ref: '#/definitions/diagnostics.distanceSinceStart'}
            fuelVolume: {$ref: '#/definitions/diagnostics.fuelVolume'}
            antiLockBraking: {$ref: '#/definitions/diagnostics.antiLockBraking'}
            engineCoolantTemperature: {$ref: '#/definitions/diagnostics.engineCoolantTemperature'}
            engineTotalOperatingHours: {$ref: '#/definitions/diagnostics.engineTotalOperatingHours'}
            engineTotalFuelConsumption: {$ref: '#/definitions/diagnostics.engineTotalFuelConsumption'}
            brakeFluidLevel: {$ref: '#/definitions/diagnostics.brakeFluidLevel'}
            engineTorque: {$ref: '#/definitions/diagnostics.engineTorque'}
            engineLoad: {$ref: '#/definitions/diagnostics.engineLoad'}
            wheelBasedSpeed: {$ref: '#/definitions/diagnostics.wheelBasedSpeed'}
            batteryLevel: {$ref: '#/definitions/diagnostics.batteryLevel'}
            checkControlMessages: {$ref: '#/definitions/diagnostics.checkControlMessages'}
            tirePressures: {$ref: '#/definitions/diagnostics.tirePressures'}
            tireTemperatures: {$ref: '#/definitions/diagnostics.tireTemperatures'}
            wheelRPMs: {$ref: '#/definitions/diagnostics.wheelRPMs'}
            troubleCodes: {$ref: '#/definitions/diagnostics.troubleCodes'}
            mileageMeters: {$ref: '#/definitions/diagnostics.mileageMeters'}
    doors.insideLocks:
        description: 'Inside lock states for the given doors'
        example:
            - {value: {location: front_left, lock_state: locked}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: front_right, lock_state: unlocked}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_right, lock_state: unlocked}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_left, lock_state: unlocked}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_right, rear_left]}, lockState: {description: 'Lock state for the door', type: string, enum: [unlocked, locked]}}
    doors.locks:
        description: 'Lock states for the given doors'
        example:
            - {value: {location: front_left, lock_state: unlocked}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: front_right, lock_state: unlocked}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_right, lock_state: locked}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_left, lock_state: locked}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {location: {description: 'Door location', type: string, enum: [front_left, front_right, rear_right, rear_left]}, lockState: {description: 'Lock state for the door', type: string, enum: [unlocked, locked]}}
    doors.positions:
        description: 'Door positions for the given doors'
        example:
            - {value: {location: front_left, position: open}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: front_right, position: closed}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_right, position: closed}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: rear_left, position: closed}, timestamp: '2020-02-26T09:59:40.290Z'}
            - {value: {location: all, position: closed}, timestamp: '2020-02-26T09:59:40.290Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, all]}, position: {type: string, enum: [closed, open]}}
    doors.insideLocksState:
        description: 'Inside locks state for the whole car (combines all specific lock states if available)'
        example:
            value: locked
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - unlocked
            - locked
    doors.locksState:
        description: 'Locks state for the whole car (combines all specific lock states if available)'
        example:
            value: unlocked
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - unlocked
            - locked
    doors:
        type: object
        properties:
            insideLocks: {$ref: '#/definitions/doors.insideLocks'}
            locks: {$ref: '#/definitions/doors.locks'}
            positions: {$ref: '#/definitions/doors.positions'}
            insideLocksState: {$ref: '#/definitions/doors.insideLocksState'}
            locksState: {$ref: '#/definitions/doors.locksState'}
    engineStartStop.status:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - inactive
            - active
    engineStartStop:
        type: object
        properties:
            status: {$ref: '#/definitions/engineStartStop.status'}
    failureMessage.failedMessageID:
        description: 'Capability identifier of the failed message'
        example:
            value: 33
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    failureMessage.failedMessageType:
        description: 'Message type of the failed message'
        example:
            value: 1
            timestamp: '2020-02-26T09:59:40.290Z'
        type: number
        format: integer
    failureMessage.failureReason:
        example:
            value: unauthorised
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
        enum:
            - unsupported_capability
            - unauthorised
            - incorrect_state
            - execution_timeout
            - vehicle_asleep
            - invalid_command
            - pending
            - rate_limit
    failureMessage.failureDescription:
        description: 'Failure description'
        example:
            value: 'Try again'
            timestamp: '2020-02-26T09:59:40.290Z'
        type: string
    failureMessage.failedPropertyIDs:
        description: 'Array of failed property identifiers'
        example:
            value: [1, 2]
            timestamp: '2020-02-26T09:59:40.290Z'
        type: array
        items:
            type: number
            format: integer
    failureMessage:
        type: object
        properties:
            failedMessageID: {$ref: '#/definitions/failureMessage.failedMessageID'}
            failedMessageType: {$ref: '#/definitions/failureMessage.failedMessageType'}
            failureReason: {$ref: '#/definitions/failureMessage.failureReason'}
            failureDescription: {$ref: '#/definitions/failureMessage.failureDescription'}
            failedPropertyIDs: {$ref: '#/definitions/failureMessage.failedPropertyIDs'}
    firmwareVersion.hmKitVersion:
        description: 'HMKit version'
        example:
            value: {major: 1, minor: 15, patch: 33}
            timestamp: '2020-02-26T09:59:40.290Z'
        type: object
        properties:
            major: {description: 'HMKit version major number', type: number, format: integer}
            minor: {description: 'HMKit version minor number', type: number, format: integer}
            patch: {description: 'HMKit version patch number', type: number, format: integer}
    firmwareVersion.hmKitBuildName:
        description: 'HMKit version build name'
        example:
            value: btstack-uart
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
    firmwareVersion.applicationVersion:
        description: 'Application version'
        example:
            value: v1.5-prod
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
    firmwareVersion:
        type: object
        properties:
            hmKitVersion: {$ref: '#/definitions/firmwareVersion.hmKitVersion'}
            hmKitBuildName: {$ref: '#/definitions/firmwareVersion.hmKitBuildName'}
            applicationVersion: {$ref: '#/definitions/firmwareVersion.applicationVersion'}
    fueling.gasFlapLock:
        example:
            value: locked
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - unlocked
            - locked
    fueling.gasFlapPosition:
        example:
            value: closed
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - closed
            - open
    fueling:
        type: object
        properties:
            gasFlapLock: {$ref: '#/definitions/fueling.gasFlapLock'}
            gasFlapPosition: {$ref: '#/definitions/fueling.gasFlapPosition'}
    graphics.imageURL:
        description: 'The image URL'
        example:
            value: 'https://about.high-mobility.com/assets/images/hm-logo.svg'
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
    historical.states:
        description: 'The bytes of a Capability state'
        example:
            - {value: {doors: {positions: {location: front_left, position: open}, locks_state: unlocked}}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {charging: {charging_rate_kw: 3.5, charge_port_state: open}}, timestamp: '2020-02-26T09:59:40.291Z'}
        type: array
        items:
            type: capability_state
    historical.capabilityID:
        description: 'The identifier of the Capability'
        example:
            value: 96
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    historical.startDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2019-10-07T13:04:32.000Z'
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        format: date-time
    historical.endDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2019-09-27T08:42:30.000Z'
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        format: date-time
    historical:
        type: object
        properties:
            states: {$ref: '#/definitions/historical.states'}
    homeCharger.chargingStatus:
        example:
            value: charging
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - disconnected
            - plugged_in
            - charging
    homeCharger.authenticationMechanism:
        example:
            value: app
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - pin
            - app
    homeCharger.plugType:
        example:
            value: type_2
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - type_1
            - type_2
            - ccs
            - chademo
    homeCharger.chargingPowerKW:
        description: 'Charging power in kW'
        example:
            value: 11.5
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: float
    homeCharger.solarCharging:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - active
    homeCharger.wifiHotspotEnabled:
        example:
            value: enabled
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - disabled
            - enabled
    homeCharger.wifiHotspotSSID:
        description: 'The Wi-Fi Hotspot SSID'
        example:
            value: 'Charger 7612'
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
    homeCharger.wiFiHotspotSecurity:
        example:
            value: wpa2_personal
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    homeCharger.wiFiHotspotPassword:
        description: 'The Wi-Fi Hotspot password'
        example:
            value: ZW3vARNUBe
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
    homeCharger.authenticationState:
        example:
            value: authenticated
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - unauthenticated
            - authenticated
    homeCharger.chargeCurrentDC:
        description: 'The charge direct current'
        example:
            value: 0.5
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: float
    homeCharger.maximumChargeCurrent:
        description: 'The maximum possible charge current'
        example:
            value: 1
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: float
    homeCharger.minimumChargeCurrent:
        description: 'The minimal possible charge current'
        example:
            value: null
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: float
    homeCharger.coordinates:
        example:
            value: {latitude: 52.520008, longitude: 13.404954}
            timestamp: '2020-02-26T09:59:40.291Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    homeCharger.priceTariffs:
        example:
            - {value: {pricing_type: starting_fee, price: 4.5, currency: EUR}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {pricing_type: per_minute, price: 0.3, currency: EUR}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {pricing_type: per_kwh, price: 0.3, currency: Ripple}, timestamp: '2020-02-26T09:59:40.291Z'}
        type: array
        items:
            type: object
            properties: {pricingType: {type: string, enum: [starting_fee, per_minute, per_kwh]}, price: {description: 'The price', type: number, format: float}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}
    homeCharger:
        type: object
        properties:
            chargingStatus: {$ref: '#/definitions/homeCharger.chargingStatus'}
            authenticationMechanism: {$ref: '#/definitions/homeCharger.authenticationMechanism'}
            plugType: {$ref: '#/definitions/homeCharger.plugType'}
            chargingPowerKW: {$ref: '#/definitions/homeCharger.chargingPowerKW'}
            solarCharging: {$ref: '#/definitions/homeCharger.solarCharging'}
            wifiHotspotEnabled: {$ref: '#/definitions/homeCharger.wifiHotspotEnabled'}
            wifiHotspotSSID: {$ref: '#/definitions/homeCharger.wifiHotspotSSID'}
            wiFiHotspotSecurity: {$ref: '#/definitions/homeCharger.wiFiHotspotSecurity'}
            wiFiHotspotPassword: {$ref: '#/definitions/homeCharger.wiFiHotspotPassword'}
            authenticationState: {$ref: '#/definitions/homeCharger.authenticationState'}
            chargeCurrentDC: {$ref: '#/definitions/homeCharger.chargeCurrentDC'}
            maximumChargeCurrent: {$ref: '#/definitions/homeCharger.maximumChargeCurrent'}
            minimumChargeCurrent: {$ref: '#/definitions/homeCharger.minimumChargeCurrent'}
            coordinates: {$ref: '#/definitions/homeCharger.coordinates'}
            priceTariffs: {$ref: '#/definitions/homeCharger.priceTariffs'}
    honkHornFlashLights.flashers:
        example:
            value: left_flasher_active
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - emergency_flasher_active
            - left_flasher_active
            - right_flasher_active
    honkHornFlashLights.honkSeconds:
        description: 'Number of seconds to honk the horn'
        example:
            value: 3
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    honkHornFlashLights.flashTimes:
        description: 'Number of times to flash the lights'
        example:
            value: 5
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    honkHornFlashLights.emergencyFlashersState:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - active
    honkHornFlashLights:
        type: object
        properties:
            flashers: {$ref: '#/definitions/honkHornFlashLights.flashers'}
    hood.position:
        example:
            value: open
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - closed
            - open
            - intermediate
    hood:
        type: object
        properties:
            position: {$ref: '#/definitions/hood.position'}
    ignition.status:
        example:
            value: off
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - off
            - on
    ignition.accessoriesStatus:
        example:
            value: on
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - off
            - on
    ignition:
        type: object
        properties:
            status: {$ref: '#/definitions/ignition.status'}
            accessoriesStatus: {$ref: '#/definitions/ignition.accessoriesStatus'}
    lightConditions.outsideLight:
        description: 'Measured outside illuminance in lux'
        example:
            value: 111000
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: float
    lightConditions.insideLight:
        description: 'Measured inside illuminance in lux'
        example:
            value: 0.25
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: float
    lightConditions:
        type: object
        properties:
            outsideLight: {$ref: '#/definitions/lightConditions.outsideLight'}
            insideLight: {$ref: '#/definitions/lightConditions.insideLight'}
    lights.frontExteriorLight:
        example:
            value: active_with_full_beam
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - active
            - active_with_full_beam
            - drl
            - automatic
    lights.rearExteriorLight:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - active
    lights.ambientLightColour:
        example:
            value: {red: 255, green: 0, blue: 0}
            timestamp: '2020-02-26T09:59:40.291Z'
        type: object
        properties:
            red: {description: 'The red component of RGB', type: number, format: integer}
            green: {description: 'The green component of RGB', type: number, format: integer}
            blue: {description: 'The blue component of RGB', type: number, format: integer}
    lights.reverseLight:
        example:
            value: inactive
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - active
    lights.emergencyBrakeLight:
        example:
            value: inactive
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - inactive
            - active
    lights.fogLights:
        example:
            - {value: {location: front, state: inactive}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {location: rear, state: active}, timestamp: '2020-02-26T09:59:40.291Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}
    lights.readingLamps:
        example:
            - {value: {location: front_left, state: active}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {location: front_right, state: active}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {location: rear_right, state: inactive}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {location: rear_left, state: inactive}, timestamp: '2020-02-26T09:59:40.291Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left]}, state: {type: string, enum: [inactive, active]}}
    lights.interiorLights:
        example:
            - {value: {location: front, state: inactive}, timestamp: '2020-02-26T09:59:40.291Z'}
            - {value: {location: rear, state: active}, timestamp: '2020-02-26T09:59:40.291Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}
    lights:
        type: object
        properties:
            frontExteriorLight: {$ref: '#/definitions/lights.frontExteriorLight'}
            rearExteriorLight: {$ref: '#/definitions/lights.rearExteriorLight'}
            ambientLightColour: {$ref: '#/definitions/lights.ambientLightColour'}
            reverseLight: {$ref: '#/definitions/lights.reverseLight'}
            emergencyBrakeLight: {$ref: '#/definitions/lights.emergencyBrakeLight'}
            fogLights: {$ref: '#/definitions/lights.fogLights'}
            readingLamps: {$ref: '#/definitions/lights.readingLamps'}
            interiorLights: {$ref: '#/definitions/lights.interiorLights'}
    maintenance.daysToNextService:
        description: 'Number of days until next servicing of the car, whereas negative is overdue'
        example:
            value: 501
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    maintenance.kilometersToNextService:
        description: 'The amount of kilometers until next servicing of the car'
        example:
            value: 3681
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    maintenance.cbsReportsCount:
        description: 'The number of CBS reports'
        example:
            value: 3
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    maintenance.monthsToExhaustInspection:
        description: 'Number of months until exhaust inspection'
        example:
            value: 5
            timestamp: '2020-02-26T09:59:40.291Z'
        type: number
        format: integer
    maintenance.teleserviceAvailability:
        example:
            value: successful
            timestamp: '2020-02-26T09:59:40.291Z'
        type: string
        enum:
            - pending
            - idle
            - successful
            - error
    maintenance.serviceDistanceThreshold:
        description: 'Distance threshold for Service'
        example:
            value: 500
            timestamp: '2020-02-26T09:59:40.292Z'
        type: number
        format: integer
    maintenance.serviceTimeThreshold:
        description: 'Time threshold, in weeks, for Service'
        example:
            value: 4
            timestamp: '2020-02-26T09:59:40.292Z'
        type: number
        format: integer
    maintenance.automaticTeleserviceCallDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2018-11-23T11:33:50.000Z'
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
        format: date-time
    maintenance.teleserviceBatteryCallDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2018-11-23T10:36:50.000Z'
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
        format: date-time
    maintenance.nextInspectionDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2018-10-23T14:38:47.000Z'
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
        format: date-time
    maintenance.conditionBasedServices:
        example:
            - {value: {year: 2019, month: 5, id: 3, due_status: ok, text: 'Brake fluid', description: 'Next change at specified date at the latest.'}, timestamp: '2020-02-26T09:59:40.292Z'}
        type: array
        items:
            type: object
            properties: {year: {description: 'The year', type: number, format: integer}, month: {description: 'Value between 1 and 12', type: number, format: integer}, id: {description: 'CBS identifier', type: number, format: integer}, dueStatus: {type: string, enum: [ok, pending, overdue]}, text: {description: 'CBS text', type: string}, description: {description: Description, type: string}}
    maintenance.brakeFluidChangeDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2018-12-05T03:22:56.000Z'
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
        format: date-time
    maintenance:
        type: object
        properties:
            daysToNextService: {$ref: '#/definitions/maintenance.daysToNextService'}
            kilometersToNextService: {$ref: '#/definitions/maintenance.kilometersToNextService'}
            cbsReportsCount: {$ref: '#/definitions/maintenance.cbsReportsCount'}
            monthsToExhaustInspection: {$ref: '#/definitions/maintenance.monthsToExhaustInspection'}
            teleserviceAvailability: {$ref: '#/definitions/maintenance.teleserviceAvailability'}
            serviceDistanceThreshold: {$ref: '#/definitions/maintenance.serviceDistanceThreshold'}
            serviceTimeThreshold: {$ref: '#/definitions/maintenance.serviceTimeThreshold'}
            automaticTeleserviceCallDate: {$ref: '#/definitions/maintenance.automaticTeleserviceCallDate'}
            teleserviceBatteryCallDate: {$ref: '#/definitions/maintenance.teleserviceBatteryCallDate'}
            nextInspectionDate: {$ref: '#/definitions/maintenance.nextInspectionDate'}
            conditionBasedServices: {$ref: '#/definitions/maintenance.conditionBasedServices'}
            brakeFluidChangeDate: {$ref: '#/definitions/maintenance.brakeFluidChangeDate'}
    messaging.text:
        description: 'The text'
        example:
            value: 'Hey mom!'
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
    messaging.handle:
        description: 'The optional handle of message'
        example:
            value: Epp
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
    messaging:
        type: object
        properties:
            text: {$ref: '#/definitions/messaging.text'}
            handle: {$ref: '#/definitions/messaging.handle'}
    mobile.connection:
        example:
            value: connected
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
        enum:
            - disconnected
            - connected
    mobile:
        type: object
        properties:
            connection: {$ref: '#/definitions/mobile.connection'}
    multiCommand.multiStates:
        description: 'The incoming states'
        example:
            - {value: {doors: {positions: {location: front_left, position: open}, locks_state: unlocked}}, timestamp: '2020-02-26T09:59:40.292Z'}
            - {value: {charging: {charging_rate_kw: 3.5, charge_port_state: open}}, timestamp: '2020-02-26T09:59:40.292Z'}
        type: array
        items:
            type: capability_state
    multiCommand.multiCommands:
        description: 'The outgoing commands'
        example:
            - {value: {doors: {inside_locks_state: locked}}, timestamp: '2020-02-26T09:59:40.292Z'}
            - {value: {ignition: {status: off}}, timestamp: '2020-02-26T09:59:40.292Z'}
        type: array
        items:
            type: capability_state
    multiCommand:
        type: object
        properties:
            multiStates: {$ref: '#/definitions/multiCommand.multiStates'}
    naviDestination.coordinates:
        example:
            value: {latitude: 52.520008, longitude: 13.404954}
            timestamp: '2020-02-26T09:59:40.292Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    naviDestination.destinationName:
        description: 'Destination name'
        example:
            value: Berlin
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
    naviDestination.dataSlotsFree:
        description: 'Remaining number of POI data slots available.'
        example:
            value: 14
            timestamp: '2020-02-26T09:59:40.292Z'
        type: number
        format: integer
    naviDestination.dataSlotsMax:
        description: 'Maximum number of POI data slots.'
        example:
            value: 30
            timestamp: '2020-02-26T09:59:40.292Z'
        type: number
        format: integer
    naviDestination.arrivalDuration:
        description: 'Remaining time until reaching the destination.'
        example:
            value: {hour: 2, minute: 32}
            timestamp: '2020-02-26T09:59:40.292Z'
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    naviDestination.distanceToDestination:
        description: 'Remaining distance to reach the destination.'
        example:
            value: 1337
            timestamp: '2020-02-26T09:59:40.292Z'
        type: number
        format: integer
    naviDestination:
        type: object
        properties:
            coordinates: {$ref: '#/definitions/naviDestination.coordinates'}
            destinationName: {$ref: '#/definitions/naviDestination.destinationName'}
            dataSlotsFree: {$ref: '#/definitions/naviDestination.dataSlotsFree'}
            dataSlotsMax: {$ref: '#/definitions/naviDestination.dataSlotsMax'}
            arrivalDuration: {$ref: '#/definitions/naviDestination.arrivalDuration'}
            distanceToDestination: {$ref: '#/definitions/naviDestination.distanceToDestination'}
    notifications.text:
        description: 'Text for the notification'
        example:
            value: 'Open Garage'
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
    notifications.actionItems:
        example:
            - {value: {id: 27, name: Open}, timestamp: '2020-02-26T09:59:40.292Z'}
            - {value: {id: 28, name: Cancel}, timestamp: '2020-02-26T09:59:40.292Z'}
        type: array
        items:
            type: object
            properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}
    notifications.activatedAction:
        description: 'Identifier of the activated action'
        example:
            value: 27
            timestamp: '2020-02-26T09:59:40.292Z'
        type: number
        format: integer
    notifications.clear:
        example:
            value: clear
            timestamp: '2020-02-26T09:59:40.292Z'
        type: string
        enum:
            - clear
    notifications:
        type: object
        properties:
            text: {$ref: '#/definitions/notifications.text'}
            actionItems: {$ref: '#/definitions/notifications.actionItems'}
            activatedAction: {$ref: '#/definitions/notifications.activatedAction'}
            clear: {$ref: '#/definitions/notifications.clear'}
    offroad.routeIncline:
        description: 'The route elevation incline in degrees, which is a negative number for decline'
        example:
            value: 10
            timestamp: '2020-02-26T09:59:40.293Z'
        type: number
        format: integer
    offroad.wheelSuspension:
        description: 'The wheel suspension level percentage, whereas 0.0 is no suspension and 1.0 maximum suspension'
        example:
            value: 0.5
            timestamp: '2020-02-26T09:59:40.293Z'
        type: number
        format: double
    offroad:
        type: object
        properties:
            routeIncline: {$ref: '#/definitions/offroad.routeIncline'}
            wheelSuspension: {$ref: '#/definitions/offroad.wheelSuspension'}
    parkingBrake.status:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    parkingBrake:
        type: object
        properties:
            status: {$ref: '#/definitions/parkingBrake.status'}
    parkingTicket.status:
        example:
            value: ended
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - ended
            - started
    parkingTicket.operatorName:
        description: 'Operator name'
        example:
            value: 'Berlin Parking'
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
    parkingTicket.operatorTicketID:
        description: 'Operator ticket ID'
        example:
            value: '64894233'
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
    parkingTicket.ticketStartTime:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2017-01-10T19:34:22.000Z'
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        format: date-time
    parkingTicket.ticketEndTime:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2019-10-08T11:21:45.000Z'
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        format: date-time
    parkingTicket:
        type: object
        properties:
            status: {$ref: '#/definitions/parkingTicket.status'}
            operatorName: {$ref: '#/definitions/parkingTicket.operatorName'}
            operatorTicketID: {$ref: '#/definitions/parkingTicket.operatorTicketID'}
            ticketStartTime: {$ref: '#/definitions/parkingTicket.ticketStartTime'}
            ticketEndTime: {$ref: '#/definitions/parkingTicket.ticketEndTime'}
    powerTakeoff.status:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    powerTakeoff.engaged:
        example:
            value: engaged
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - not_engaged
            - engaged
    powerTakeoff:
        type: object
        properties:
            status: {$ref: '#/definitions/powerTakeoff.status'}
            engaged: {$ref: '#/definitions/powerTakeoff.engaged'}
    race.accelerations:
        example:
            - {value: {direction: longitudinal, g_force: 0.864}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {direction: lateral, g_force: -0.753}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {direction: front_lateral, g_force: -0.753}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {direction: rear_lateral, g_force: -0.753}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {direction: {type: string, enum: [longitudinal, lateral, front_lateral, rear_lateral]}, gForce: {description: 'The accelaration in g-force', type: number, format: float}}
    race.understeering:
        description: 'The understeering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 0.3 (30%) marginal, over 30% critical'
        example:
            value: 0.19
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: double
    race.oversteering:
        description: 'The oversteering percentage between 0.0-1.0 whereas up to 0.2 (20%) is considered OK, up to 30% marginal, over 30% critical'
        example:
            value: 0.05
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: double
    race.gasPedalPosition:
        description: 'The gas pedal position between 0.0-1.0, whereas 1.0 (100%) is full throttle'
        example:
            value: 0.98
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: double
    race.steeringAngle:
        description: 'The steering angle in degrees, whereas 0° is straight ahead, positive number to the right and negative number to the left'
        example:
            value: 10
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: integer
    race.brakePressure:
        description: 'Brake pressure in bar, whereas 100 bar is max value, full brake'
        example:
            value: 20
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: float
    race.yawRate:
        description: 'Yaw rate in degrees per second [°/s]'
        example:
            value: 6.66
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: float
    race.rearSuspensionSteering:
        description: 'Rear suspension steering in degrees'
        example:
            value: 3
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: integer
    race.electronicStabilityProgram:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    race.brakeTorqueVectorings:
        example:
            - {value: {axle: front, state: active}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {axle: rear, state: inactive}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {axle: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}
    race.gearMode:
        example:
            value: drive
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - manual
            - park
            - reverse
            - neutral
            - drive
            - low_gear
            - sport
    race.selectedGear:
        description: 'The selected gear value, if any'
        example:
            value: 4
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: integer
    race.brakePedalPosition:
        description: 'The brake pedal position between 0.0-1.0, wheras 1.0 (100%) is full brakes'
        example:
            value: 0.12
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: double
    race.brakePedalSwitch:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    race.clutchPedalSwitch:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    race.acceleratorPedalIdleSwitch:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    race.acceleratorPedalKickdownSwitch:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - inactive
            - active
    race.vehicleMoving:
        example:
            value: moving
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - not_moving
            - moving
    race:
        type: object
        properties:
            accelerations: {$ref: '#/definitions/race.accelerations'}
            understeering: {$ref: '#/definitions/race.understeering'}
            oversteering: {$ref: '#/definitions/race.oversteering'}
            gasPedalPosition: {$ref: '#/definitions/race.gasPedalPosition'}
            steeringAngle: {$ref: '#/definitions/race.steeringAngle'}
            brakePressure: {$ref: '#/definitions/race.brakePressure'}
            yawRate: {$ref: '#/definitions/race.yawRate'}
            rearSuspensionSteering: {$ref: '#/definitions/race.rearSuspensionSteering'}
            electronicStabilityProgram: {$ref: '#/definitions/race.electronicStabilityProgram'}
            brakeTorqueVectorings: {$ref: '#/definitions/race.brakeTorqueVectorings'}
            gearMode: {$ref: '#/definitions/race.gearMode'}
            selectedGear: {$ref: '#/definitions/race.selectedGear'}
            brakePedalPosition: {$ref: '#/definitions/race.brakePedalPosition'}
            brakePedalSwitch: {$ref: '#/definitions/race.brakePedalSwitch'}
            clutchPedalSwitch: {$ref: '#/definitions/race.clutchPedalSwitch'}
            acceleratorPedalIdleSwitch: {$ref: '#/definitions/race.acceleratorPedalIdleSwitch'}
            acceleratorPedalKickdownSwitch: {$ref: '#/definitions/race.acceleratorPedalKickdownSwitch'}
            vehicleMoving: {$ref: '#/definitions/race.vehicleMoving'}
    rooftopControl.dimming:
        description: '1.0 (100%) is opaque, 0.0 (0%) is transparent'
        example:
            value: 1
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: double
    rooftopControl.position:
        description: '1.0 (100%) is fully open, 0.0 (0%) is closed'
        example:
            value: 0.5
            timestamp: '2020-02-26T09:59:40.294Z'
        type: number
        format: double
    rooftopControl.convertibleRoofState:
        example:
            value: open
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - closed
            - open
            - emergency_locked
            - closed_secured
            - open_secured
            - hard_top_mounted
            - intermediate_position
            - loading_position
            - loading_position_immediate
    rooftopControl.sunroofTiltState:
        example:
            value: half_tilted
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - closed
            - tilted
            - half_tilted
    rooftopControl.sunroofState:
        example:
            value: open
            timestamp: '2020-02-26T09:59:40.294Z'
        type: string
        enum:
            - closed
            - open
            - intermediate
    rooftopControl:
        type: object
        properties:
            dimming: {$ref: '#/definitions/rooftopControl.dimming'}
            position: {$ref: '#/definitions/rooftopControl.position'}
            convertibleRoofState: {$ref: '#/definitions/rooftopControl.convertibleRoofState'}
            sunroofTiltState: {$ref: '#/definitions/rooftopControl.sunroofTiltState'}
            sunroofState: {$ref: '#/definitions/rooftopControl.sunroofState'}
    seats.personsDetected:
        example:
            - {value: {location: front_left, detected: detected}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: front_right, detected: not_detected}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: rear_right, detected: not_detected}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: rear_left, detected: not_detected}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: rear_center, detected: not_detected}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_center]}, detected: {type: string, enum: [not_detected, detected]}}
    seats.seatbeltsState:
        example:
            - {value: {location: front_left, fastened_state: fastened}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: front_right, fastened_state: not_fastened}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: rear_right, fastened_state: not_fastened}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: rear_left, fastened_state: not_fastened}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {location: rear_center, fastened_state: not_fastened}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, rear_center]}, fastenedState: {type: string, enum: [not_fastened, fastened]}}
    seats:
        type: object
        properties:
            personsDetected: {$ref: '#/definitions/seats.personsDetected'}
            seatbeltsState: {$ref: '#/definitions/seats.seatbeltsState'}
    tachograph.driversWorkingStates:
        example:
            - {value: {driver_number: 1, working_state: working}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {driver_number: 2, working_state: resting}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, workingState: {type: string, enum: [resting, driver_available, working, driving]}}
    tachograph.driversTimeStates:
        example:
            - {value: {driver_number: 3, time_state: four_reached}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {driver_number: 4, time_state: fifteen_min_before_sixteen}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, timeState: {type: string, enum: [normal, fifteen_min_before_four, four_reached, fifteen_min_before_nine, nine_reached, fifteen_min_before_sixteen, sixteen_reached]}}
    tachograph.driversCardsPresent:
        example:
            - {value: {driver_number: 6, card_present: present}, timestamp: '2020-02-26T09:59:40.294Z'}
            - {value: {driver_number: 7, card_present: not_present}, timestamp: '2020-02-26T09:59:40.294Z'}
        type: array
        items:
            type: object
            properties: {driverNumber: {description: 'The driver number', type: number, format: integer}, cardPresent: {type: string, enum: [not_present, present]}}
    tachograph.vehicleMotion:
        example:
            value: detected
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - not_detected
            - detected
    tachograph.vehicleOverspeed:
        example:
            value: no_overspeed
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - no_overspeed
            - overspeed
    tachograph.vehicleDirection:
        example:
            value: forward
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - forward
            - reverse
    tachograph.vehicleSpeed:
        description: 'The tachograph vehicle speed in km/h'
        example:
            value: 80
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: integer
    tachograph:
        type: object
        properties:
            driversWorkingStates: {$ref: '#/definitions/tachograph.driversWorkingStates'}
            driversTimeStates: {$ref: '#/definitions/tachograph.driversTimeStates'}
            driversCardsPresent: {$ref: '#/definitions/tachograph.driversCardsPresent'}
            vehicleMotion: {$ref: '#/definitions/tachograph.vehicleMotion'}
            vehicleOverspeed: {$ref: '#/definitions/tachograph.vehicleOverspeed'}
            vehicleDirection: {$ref: '#/definitions/tachograph.vehicleDirection'}
            vehicleSpeed: {$ref: '#/definitions/tachograph.vehicleSpeed'}
    textInput.text:
        description: 'The text'
        example:
            value: 'Rendezvous with Rama'
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
    theftAlarm.status:
        example:
            value: armed
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - unarmed
            - armed
            - triggered
    theftAlarm:
        type: object
        properties:
            status: {$ref: '#/definitions/theftAlarm.status'}
    trunk.lock:
        example:
            value: unlocked
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - unlocked
            - locked
    trunk.position:
        example:
            value: open
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - closed
            - open
    trunk:
        type: object
        properties:
            lock: {$ref: '#/definitions/trunk.lock'}
            position: {$ref: '#/definitions/trunk.position'}
    usage.averageWeeklyDistance:
        description: 'Average weekly distance in km'
        example:
            value: 666
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: integer
    usage.averageWeeklyDistanceLongRun:
        description: 'Average weekyl distance, over long term, in km'
        example:
            value: 668
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: integer
    usage.accelerationEvaluation:
        description: 'Acceleration evaluation percentage'
        example:
            value: 0.7
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: double
    usage.drivingStyleEvaluation:
        description: 'Driving style evaluation percentage'
        example:
            value: 0.88
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: double
    usage.drivingModesActivationPeriods:
        example:
            - {value: {driving_mode: regular, period: 0.2}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: eco, period: 0.3}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: sport, period: 0.1}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: sport_plus, period: 0.1}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: ecoPlus, period: 0.3}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: comfort, period: 0}, timestamp: '2020-02-26T09:59:40.295Z'}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [regular, eco, sport, sport_plus, ecoPlus, comfort]}, period: {description: 'Percentage of the period used for a driving mode', type: number, format: double}}
    usage.drivingModesEnergyConsumptions:
        example:
            - {value: {driving_mode: regular, consumption: 20.2}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: eco, consumption: 33.2}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: sport, consumption: 54}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: sport_plus, consumption: 64.8}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: ecoPlus, consumption: 18}, timestamp: '2020-02-26T09:59:40.295Z'}
            - {value: {driving_mode: comfort, consumption: 33.6}, timestamp: '2020-02-26T09:59:40.295Z'}
        type: array
        items:
            type: object
            properties: {drivingMode: {type: string, enum: [regular, eco, sport, sport_plus, ecoPlus, comfort]}, consumption: {description: 'Energy consumption in the driving mode in kWh', type: number, format: float}}
    usage.lastTripEnergyConsumption:
        description: 'Energy consumption in the last trip in kWh'
        example:
            value: 101.3
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: float
    usage.lastTripFuelConsumption:
        description: 'Fuel consumption in the last trip in L'
        example:
            value: 22.5
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: float
    usage.mileageAfterLastTrip:
        description: 'Mileage after the last trip in km'
        example:
            value: 95632
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: integer
    usage.lastTripElectricPortion:
        description: 'Portion of the last trip used in electric mode'
        example:
            value: 0.7
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: double
    usage.lastTripAverageEnergyRecuperation:
        description: 'Energy recuperation rate for last trip, in kWh / 100 km'
        example:
            value: 5.68
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: float
    usage.lastTripBatteryRemaining:
        description: 'Battery % remaining after last trip'
        example:
            value: 0.5
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: double
    usage.lastTripDate:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2018-10-17T12:34:58.000Z'
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        format: date-time
    usage.averageFuelConsumption:
        description: 'Average fuel consumption for current trip in liters / 100 km'
        example:
            value: 6.5
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: float
    usage.currentFuelConsumption:
        description: 'Current fuel consumption in liters / 100 km'
        example:
            value: 7.5
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: float
    usage:
        type: object
        properties:
            averageWeeklyDistance: {$ref: '#/definitions/usage.averageWeeklyDistance'}
            averageWeeklyDistanceLongRun: {$ref: '#/definitions/usage.averageWeeklyDistanceLongRun'}
            accelerationEvaluation: {$ref: '#/definitions/usage.accelerationEvaluation'}
            drivingStyleEvaluation: {$ref: '#/definitions/usage.drivingStyleEvaluation'}
            drivingModesActivationPeriods: {$ref: '#/definitions/usage.drivingModesActivationPeriods'}
            drivingModesEnergyConsumptions: {$ref: '#/definitions/usage.drivingModesEnergyConsumptions'}
            lastTripEnergyConsumption: {$ref: '#/definitions/usage.lastTripEnergyConsumption'}
            lastTripFuelConsumption: {$ref: '#/definitions/usage.lastTripFuelConsumption'}
            mileageAfterLastTrip: {$ref: '#/definitions/usage.mileageAfterLastTrip'}
            lastTripElectricPortion: {$ref: '#/definitions/usage.lastTripElectricPortion'}
            lastTripAverageEnergyRecuperation: {$ref: '#/definitions/usage.lastTripAverageEnergyRecuperation'}
            lastTripBatteryRemaining: {$ref: '#/definitions/usage.lastTripBatteryRemaining'}
            lastTripDate: {$ref: '#/definitions/usage.lastTripDate'}
            averageFuelConsumption: {$ref: '#/definitions/usage.averageFuelConsumption'}
            currentFuelConsumption: {$ref: '#/definitions/usage.currentFuelConsumption'}
    valetMode.status:
        example:
            value: active
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - inactive
            - active
    valetMode:
        type: object
        properties:
            status: {$ref: '#/definitions/valetMode.status'}
    vehicleLocation.coordinates:
        example:
            value: {latitude: 52.520008, longitude: 13.404954}
            timestamp: '2020-02-26T09:59:40.295Z'
        type: object
        properties:
            latitude: {description: Latitude, type: number, format: double}
            longitude: {description: Longitude, type: number, format: double}
    vehicleLocation.heading:
        description: 'Heading in degrees'
        example:
            value: 13.370123
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: double
    vehicleLocation.altitude:
        description: 'Altitude in meters above the WGS 84 reference ellipsoid'
        example:
            value: 133.5
            timestamp: '2020-02-26T09:59:40.295Z'
        type: number
        format: double
    vehicleLocation:
        type: object
        properties:
            coordinates: {$ref: '#/definitions/vehicleLocation.coordinates'}
            heading: {$ref: '#/definitions/vehicleLocation.heading'}
            altitude: {$ref: '#/definitions/vehicleLocation.altitude'}
    vehicleStatus.vin:
        description: 'The unique Vehicle Identification Number'
        example:
            value: JF2SHBDC7CH451869
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
    vehicleStatus.powertrain:
        example:
            value: all_electric
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
        enum:
            - unknown
            - all_electric
            - combustion_engine
            - phev
            - hydrogen
            - hydrogen_hybrid
    vehicleStatus.modelName:
        description: 'The car model name'
        example:
            value: 'Type X'
            timestamp: '2020-02-26T09:59:40.295Z'
        type: string
    vehicleStatus.name:
        description: 'The car name (nickname)'
        example:
            value: Speedy
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    vehicleStatus.licensePlate:
        description: 'The license plate number'
        example:
            value: ABC123
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    vehicleStatus.salesDesignation:
        description: 'The sales designation of the model'
        example:
            value: Package+
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    vehicleStatus.modelYear:
        description: 'The car model manufacturing year number'
        example:
            value: 2019
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: integer
    vehicleStatus.colourName:
        description: 'The colour name'
        example:
            value: 'Estoril Blau'
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    vehicleStatus.powerInKW:
        description: 'The power of the car measured in kW'
        example:
            value: 220
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: integer
    vehicleStatus.numberOfDoors:
        description: 'The number of doors'
        example:
            value: 5
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: integer
    vehicleStatus.numberOfSeats:
        description: 'The number of seats'
        example:
            value: 5
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: integer
    vehicleStatus.engineVolume:
        description: 'The engine volume displacement in liters'
        example:
            value: 2.5
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: float
    vehicleStatus.engineMaxTorque:
        description: 'The maximum engine torque in Nm'
        example:
            value: 245
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: integer
    vehicleStatus.gearbox:
        example:
            value: automatic
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - manual
            - automatic
            - semi_automatic
    vehicleStatus.displayUnit:
        example:
            value: km
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - km
            - miles
    vehicleStatus.driverSeatLocation:
        example:
            value: left
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - left
            - right
            - center
    vehicleStatus.equipments:
        description: 'Names of equipment the vehicle is equipped with'
        example:
            - {value: 'Parking sensors', timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: 'Automatic wipers', timestamp: '2020-02-26T09:59:40.296Z'}
        type: array
        items:
            type: string
    vehicleStatus.brand:
        description: 'The car brand'
        example:
            value: Tesla
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    vehicleStatus.states:
        description: 'The bytes of a Capability state'
        example:
            - {value: {doors: {positions: {location: front_left, position: open}, locks_state: unlocked}}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {charging: {charging_rate_kw: 3.5, charge_port_state: open}}, timestamp: '2020-02-26T09:59:40.296Z'}
        type: array
        items:
            type: capability_state
    vehicleStatus:
        type: object
        properties:
            vin: {$ref: '#/definitions/vehicleStatus.vin'}
            powertrain: {$ref: '#/definitions/vehicleStatus.powertrain'}
            modelName: {$ref: '#/definitions/vehicleStatus.modelName'}
            name: {$ref: '#/definitions/vehicleStatus.name'}
            licensePlate: {$ref: '#/definitions/vehicleStatus.licensePlate'}
            salesDesignation: {$ref: '#/definitions/vehicleStatus.salesDesignation'}
            modelYear: {$ref: '#/definitions/vehicleStatus.modelYear'}
            colourName: {$ref: '#/definitions/vehicleStatus.colourName'}
            powerInKW: {$ref: '#/definitions/vehicleStatus.powerInKW'}
            numberOfDoors: {$ref: '#/definitions/vehicleStatus.numberOfDoors'}
            numberOfSeats: {$ref: '#/definitions/vehicleStatus.numberOfSeats'}
            engineVolume: {$ref: '#/definitions/vehicleStatus.engineVolume'}
            engineMaxTorque: {$ref: '#/definitions/vehicleStatus.engineMaxTorque'}
            gearbox: {$ref: '#/definitions/vehicleStatus.gearbox'}
            displayUnit: {$ref: '#/definitions/vehicleStatus.displayUnit'}
            driverSeatLocation: {$ref: '#/definitions/vehicleStatus.driverSeatLocation'}
            equipments: {$ref: '#/definitions/vehicleStatus.equipments'}
            brand: {$ref: '#/definitions/vehicleStatus.brand'}
            states: {$ref: '#/definitions/vehicleStatus.states'}
    vehicleTime.vehicleTime:
        description: 'Vehicle time in a 24h format'
        example:
            value: {hour: 19, minute: 55}
            timestamp: '2020-02-26T09:59:40.296Z'
        type: object
        properties:
            hour: {description: 'Value between 0 and 23', type: number, format: integer}
            minute: {description: 'Value between 0 and 59', type: number, format: integer}
    vehicleTime:
        type: object
        properties:
            vehicleTime: {$ref: '#/definitions/vehicleTime.vehicleTime'}
    videoHandover.url:
        description: 'URL string'
        example:
            value: 'https://bit.ly/2obY7G5'
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    videoHandover.startingSecond:
        example:
            value: 3
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: integer
    videoHandover.screen:
        example:
            value: rear
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - front
            - rear
    wakeUp.status:
        example:
            value: wake_up
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - wake_up
            - sleep
    weatherConditions.rainIntensity:
        description: 'Measured raining intensity percentage, whereas 0% is no rain and 100% is maximum rain'
        example:
            value: 1
            timestamp: '2020-02-26T09:59:40.296Z'
        type: number
        format: double
    weatherConditions:
        type: object
        properties:
            rainIntensity: {$ref: '#/definitions/weatherConditions.rainIntensity'}
    wiFi.status:
        example:
            value: enabled
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - disabled
            - enabled
    wiFi.networkConnected:
        example:
            value: connected
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - disconnected
            - connected
    wiFi.networkSSID:
        description: 'The network SSID'
        example:
            value: HOME
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    wiFi.networkSecurity:
        example:
            value: wpa2_personal
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
        enum:
            - none
            - wep
            - wpa
            - wpa2_personal
    wiFi.password:
        description: 'The network password'
        example:
            value: great_secret12
            timestamp: '2020-02-26T09:59:40.296Z'
        type: string
    wiFi:
        type: object
        properties:
            status: {$ref: '#/definitions/wiFi.status'}
            networkConnected: {$ref: '#/definitions/wiFi.networkConnected'}
            networkSSID: {$ref: '#/definitions/wiFi.networkSSID'}
            networkSecurity: {$ref: '#/definitions/wiFi.networkSecurity'}
    windows.openPercentages:
        example:
            - {value: {location: front_left, open_percentage: 0.2}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: front_right, open_percentage: 0.5}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: rear_right, open_percentage: 0.5}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: rear_left, open_percentage: 0.1}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: hatch, open_percentage: 0.18}, timestamp: '2020-02-26T09:59:40.296Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}
    windows.positions:
        example:
            - {value: {location: front_left, position: open}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: front_right, position: open}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: rear_right, position: closed}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: rear_left, position: open}, timestamp: '2020-02-26T09:59:40.296Z'}
            - {value: {location: hatch, position: open}, timestamp: '2020-02-26T09:59:40.296Z'}
        type: array
        items:
            type: object
            properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, position: {type: string, enum: [closed, open, intermediate]}}
    windows:
        type: object
        properties:
            openPercentages: {$ref: '#/definitions/windows.openPercentages'}
            positions: {$ref: '#/definitions/windows.positions'}
    windscreen.wipersStatus:
        example:
            value: automatic
            timestamp: '2020-02-26T09:59:40.297Z'
        type: string
        enum:
            - inactive
            - active
            - automatic
    windscreen.wipersIntensity:
        example:
            value: level_3
            timestamp: '2020-02-26T09:59:40.297Z'
        type: string
        enum:
            - level_0
            - level_1
            - level_2
            - level_3
    windscreen.windscreenDamage:
        example:
            value: impact_but_no_damage_detected
            timestamp: '2020-02-26T09:59:40.297Z'
        type: string
        enum:
            - no_impact_detected
            - impact_but_no_damage_detected
            - damage_smaller_than_1_inch
            - damage_larger_than_1_inch
    windscreen.windscreenZoneMatrix:
        description: 'Representing the size of the matrix, seen from the inside of the vehicle'
        example:
            value: {horizontal: 4, vertical: 3}
            timestamp: '2020-02-26T09:59:40.297Z'
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenDamageZone:
        description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)'
        example:
            value: {horizontal: 1, vertical: 2}
            timestamp: '2020-02-26T09:59:40.297Z'
        type: object
        properties:
            horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}
            vertical: {description: 'Vertical component of the matrix', type: number, format: integer}
    windscreen.windscreenNeedsReplacement:
        example:
            value: no_replacement_needed
            timestamp: '2020-02-26T09:59:40.297Z'
        type: string
        enum:
            - unknown
            - no_replacement_needed
            - replacement_needed
    windscreen.windscreenDamageConfidence:
        description: 'Confidence of damage detection, 0% if no impact detected'
        example:
            value: 0.95
            timestamp: '2020-02-26T09:59:40.297Z'
        type: number
        format: double
    windscreen.windscreenDamageDetectionTime:
        description: 'Milliseconds since UNIX Epoch time'
        example:
            value: '2017-01-10T16:32:05.000Z'
            timestamp: '2020-02-26T09:59:40.297Z'
        type: string
        format: date-time
    windscreen:
        type: object
        properties:
            wipersStatus: {$ref: '#/definitions/windscreen.wipersStatus'}
            wipersIntensity: {$ref: '#/definitions/windscreen.wipersIntensity'}
            windscreenDamage: {$ref: '#/definitions/windscreen.windscreenDamage'}
            windscreenZoneMatrix: {$ref: '#/definitions/windscreen.windscreenZoneMatrix'}
            windscreenDamageZone: {$ref: '#/definitions/windscreen.windscreenDamageZone'}
            windscreenNeedsReplacement: {$ref: '#/definitions/windscreen.windscreenNeedsReplacement'}
            windscreenDamageConfidence: {$ref: '#/definitions/windscreen.windscreenDamageConfidence'}
            windscreenDamageDetectionTime: {$ref: '#/definitions/windscreen.windscreenDamageDetectionTime'}
    Error400:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 400}
            failureType: {type: string, enum: [unsupported_capability, incorrect_state, invalid_command, other], example: unsupported_capability}
            failureDescription: {type: string, example: 'Capability not supported by this vehicle', description: 'Failure description formatted in UTF-8'}
    Error401:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 401}
            failureType: {type: string, enum: [auth_header_missing, other], example: auth_header_missing}
            failureDescription: {type: string, example: 'Missing authentication header', description: 'Failure description formatted in UTF-8'}
    Error403:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 403}
            failureType: {type: string, enum: [auth_header_invalid, other], example: auth_header_invalid}
            failureDescription: {type: string, example: 'Invalid authentication header', description: 'Failure description formatted in UTF-8'}
    Error408:
        type: object
        properties:
            errorCode: {type: number, format: integer, example: 408}
            failureType: {type: string, enum: [request_timeout, vehicle_asleep, charger_asleep, other], example: vehicle_asleep}
            failureDescription: {type: string, example: 'Vehicle Asleep', description: 'Failure description formatted in UTF-8'}
paths:
    /browser/load_url:
        put:
            tags: [Browser]
            summary: 'Load a URL in the headunit browser. A URL shortener can be used in other cases. Note that for the car emulator the URL has to be for a secure site (HTTPS).'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {url: {description: 'The URL', example: 'https://about.high-mobility.com', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /capabilities:
        get:
            tags: [Capabilities]
            summary: 'Get Capabilities state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Capabilities State', schema: {$ref: '#/definitions/capabilities'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging:
        get:
            tags: [Charging]
            summary: 'Get Charging state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/start_stop_charging:
        put:
            tags: [Charging]
            summary: 'Start or stop charging, which can only be controlled when the car is plugged in.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: charging, type: string, enum: [not_charging, charging, charging_complete, initialising, charging_paused, charging_error]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charge_limit:
        put:
            tags: [Charging]
            summary: 'Set the charge limit, to which point the car will charge itself.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeLimit: {description: 'Charge limit percentage between 0.0-1.0', example: 0.9, type: number, format: double}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/open_close_charging_port:
        put:
            tags: [Charging]
            summary: 'Open or close the charge port of the car.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargePortState: {example: open, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charge_mode:
        put:
            tags: [Charging]
            summary: 'Set the charge mode of the car.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeMode: {example: timer_based, type: string, enum: [immediate, timer_based, inductive]}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_charging_timers:
        put:
            tags: [Charging]
            summary: 'Set the charging timers of the car. The command can include one of the different timer types or all.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {timers: {example: [{timer_type: preferred_start_time, date: '2017-01-10T16:32:05.000Z'}, {timer_type: preferred_end_time, date: '2017-01-10T16:36:05.000Z'}, {timer_type: departure_date, date: '2017-01-10T16:36:05.000Z'}], type: array, items: {type: object, properties: {timerType: {type: string, enum: [preferred_start_time, preferred_end_time, departure_date]}, date: {description: 'Milliseconds since UNIX Epoch time', type: string, format: date-time}}}}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /charging/set_reduction_of_charging_current_times:
        put:
            tags: [Charging]
            summary: 'Set the reduction of charging times of the car. The command can include different values for start and stop.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {reductionTimes: {example: [{start_stop: start, time: {hour: 17, minute: 33}}, {start_stop: stop, time: {hour: 12, minute: 52}}], type: array, items: {type: object, properties: {startStop: {type: string, enum: [start, stop]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}}}}}}]
            responses: {'200': {description: 'Charging State', schema: {$ref: '#/definitions/charging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings:
        get:
            tags: ['Chassis Settings']
            summary: 'Get Chassis Settings state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_driving_mode:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the driving mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {drivingMode: {example: eco, type: string, enum: [regular, eco, sport, sport_plus, ecoPlus, comfort]}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/start_stop_sports_chrono:
        put:
            tags: ['Chassis Settings']
            summary: 'Start/Stop sport chrono.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {sportChrono: {example: active, type: string, enum: [inactive, active, reset]}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_spring_rates:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the spring rates.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {currentSpringRates: {description: 'The current values for the spring rates', example: [{axle: front, spring_rate: 21}, {axle: rear, spring_rate: 23}], type: array, items: {type: object, properties: {axle: {type: string, enum: [front, rear]}, springRate: {description: 'The suspension spring rate in N/mm', type: number, format: integer}}}}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /chassis_settings/set_chassis_position:
        put:
            tags: ['Chassis Settings']
            summary: 'Set the chassis position.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {currentChassisPosition: {description: 'The chassis position in mm calculated from the lowest point', example: 25, type: number, format: integer}}}}]
            responses: {'200': {description: 'Chassis Settings State', schema: {$ref: '#/definitions/chassisSettings'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate:
        get:
            tags: [Climate]
            summary: 'Get Climate state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/change_starting_times:
        put:
            tags: [Climate]
            summary: 'Set the HVAC (Heating, ventilation, and air conditioning) automated starting times.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {hvacWeekdayStartingTimes: {example: [{weekday: monday, time: {hour: 16, minute: 0}}, {weekday: tuesday, time: {hour: 16, minute: 0}}, {weekday: wednesday, time: {hour: 16, minute: 0}}, {weekday: thursday, time: {hour: 16, minute: 0}}, {weekday: friday, time: {hour: 16, minute: 0}}, {weekday: saturday, time: {hour: 18, minute: 30}}, {weekday: sunday, time: {hour: 19, minute: 31}}, {weekday: automatic, time: {hour: 16, minute: 0}}], type: array, items: {type: object, properties: {weekday: {type: string, enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday, automatic]}, time: {type: object, properties: {hour: {description: 'Value between 0 and 23', type: number, format: integer}, minute: {description: 'Value between 0 and 59', type: number, format: integer}}}}}}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_hvac:
        put:
            tags: [Climate]
            summary: 'Start or stop the HVAC system to reach driver and passenger set temperatures. The car will use cooling, defrosting and defogging as appropriate.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {hvacState: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_defogging:
        put:
            tags: [Climate]
            summary: 'Manually start or stop defogging.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {defoggingState: {example: inactive, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_defrosting:
        put:
            tags: [Climate]
            summary: 'Manually start or stop defrosting.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {defrostingState: {example: inactive, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/start_stop_ionising:
        put:
            tags: [Climate]
            summary: 'Manually start or stop ionising.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {ionisingState: {example: inactive, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /climate/set_temperature_settings:
        put:
            tags: [Climate]
            summary: 'Set the preferred temperature settings.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {driverTemperatureSetting: {description: 'The driver temperature setting in celsius', example: 21.5, type: number, format: float}, passengerTemperatureSetting: {description: 'The passenger temperature setting in celsius', example: 21.5, type: number, format: float}, rearTemperatureSetting: {description: 'The rear temperature in celsius', example: 21.5, type: number, format: float}}}}]
            responses: {'200': {description: 'Climate State', schema: {$ref: '#/definitions/climate'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /dashboard_lights:
        get:
            tags: ['Dashboard Lights']
            summary: 'Get Dashboard Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Dashboard Lights State', schema: {$ref: '#/definitions/dashboardLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /diagnostics:
        get:
            tags: [Diagnostics]
            summary: 'Get Diagnostics state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Diagnostics State', schema: {$ref: '#/definitions/diagnostics'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors:
        get:
            tags: [Doors]
            summary: 'Get Doors state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Doors State', schema: {$ref: '#/definitions/doors'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /doors/lock_unlock_doors:
        put:
            tags: [Doors]
            summary: 'Attempt to lock or unlock all doors of the car.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {locksState: {description: 'Locks state for the whole car (combines all specific lock states if available)', example: unlocked, type: string, enum: [unlocked, locked]}}}}]
            responses: {'200': {description: 'Doors State', schema: {$ref: '#/definitions/doors'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine_start_stop:
        get:
            tags: ['Engine Start-Stop']
            summary: 'Get Engine Start-Stop state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Engine Start-Stop State', schema: {$ref: '#/definitions/engineStartStop'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /engine_start_stop/activate_deactivate_start_stop:
        put:
            tags: ['Engine Start-Stop']
            summary: 'Activate or deactivate the Start-Stop system of the engine. When activated, this will automatically shut down and restart the internal combustion engine when the car is stopped.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Engine Start-Stop State', schema: {$ref: '#/definitions/engineStartStop'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /firmware_version:
        get:
            tags: ['Firmware Version']
            summary: 'Get Firmware Version state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Firmware Version State', schema: {$ref: '#/definitions/firmwareVersion'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling:
        get:
            tags: [Fueling]
            summary: 'Get Fueling state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Fueling State', schema: {$ref: '#/definitions/fueling'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /fueling/control_gas_flap:
        put:
            tags: [Fueling]
            summary: 'Control the gas flap of the car.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {gasFlapLock: {example: locked, type: string, enum: [unlocked, locked]}, gasFlapPosition: {example: closed, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Fueling State', schema: {$ref: '#/definitions/fueling'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /graphics/display_image:
        put:
            tags: [Graphics]
            summary: 'Display an image in the headunit by providing the image URL.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {imageURL: {description: 'The image URL', example: 'https://about.high-mobility.com/assets/images/hm-logo.svg', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /historical/request_states:
        put:
            tags: [Historical]
            summary: 'Request historical states.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {capabilityID: {description: 'The identifier of the Capability', example: 96, type: number, format: integer}, startDate: {description: 'Milliseconds since UNIX Epoch time', example: '2019-10-07T13:04:32.000Z', type: string, format: date-time}, endDate: {description: 'Milliseconds since UNIX Epoch time', example: '2019-09-27T08:42:30.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Historical State', schema: {$ref: '#/definitions/historical'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger:
        get:
            tags: ['Home Charger']
            summary: 'Get Home Charger state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/set_charge_current:
        put:
            tags: ['Home Charger']
            summary: 'Set the charge current of the home charger.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {chargeCurrentDC: {description: 'The charge direct current', example: 0.5, type: number, format: float}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/set_price_tariffs:
        put:
            tags: ['Home Charger']
            summary: 'Set the price tariffs of the home charger.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {priceTariffs: {example: [{pricing_type: starting_fee, price: 4.5, currency: EUR}, {pricing_type: per_minute, price: 0.3, currency: EUR}, {pricing_type: per_kwh, price: 0.3, currency: Ripple}], type: array, items: {type: object, properties: {pricingType: {type: string, enum: [starting_fee, per_minute, per_kwh]}, price: {description: 'The price', type: number, format: float}, currency: {description: 'The currency alphabetic code per ISO 4217 or crypto currency symbol', type: string}}}}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/activate_deactivate_solar_charging:
        put:
            tags: ['Home Charger']
            summary: 'Activate or deactivate charging from solar power.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {solarCharging: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/enable_disable_wi_fi_hotspot:
        put:
            tags: ['Home Charger']
            summary: 'Enable or disable the Wi-Fi Hotspot.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {wifiHotspotEnabled: {example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /home_charger/authenticate_expire:
        put:
            tags: ['Home Charger']
            summary: 'Authenticate or expire the charging session. Only if the session is authenticated can the charging be started by the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {authenticationState: {example: authenticated, type: string, enum: [unauthenticated, authenticated]}}}}]
            responses: {'200': {description: 'Home Charger State', schema: {$ref: '#/definitions/homeCharger'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights:
        get:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Get Honk Horn & Flash Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/honk_flash:
        put:
            tags: ['Honk Horn & Flash Lights']
            summary: 'Honk the horn and/or flash the blinker lights. This can be done simultaneously or just one action at the time. It is also possible to pass in how many times the lights should be flashed and how many seconds the horn should be honked.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {honkSeconds: {description: 'Number of seconds to honk the horn', example: 3, type: number, format: integer}, flashTimes: {description: 'Number of times to flash the lights', example: 5, type: number, format: integer}}}}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /honk_horn_flash_lights/activate_deactivate_emergency_flasher:
        put:
            tags: ['Honk Horn & Flash Lights']
            summary: 'This activates or deactivates the emergency flashers of the car, typically the blinkers to alarm other drivers.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {emergencyFlashersState: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Honk Horn & Flash Lights State', schema: {$ref: '#/definitions/honkHornFlashLights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /hood:
        get:
            tags: [Hood]
            summary: 'Get Hood state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Hood State', schema: {$ref: '#/definitions/hood'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition:
        get:
            tags: [Ignition]
            summary: 'Get Ignition state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Ignition State', schema: {$ref: '#/definitions/ignition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /ignition/turn_ignition_on_off:
        put:
            tags: [Ignition]
            summary: 'Attempt to turn the car engine ignition on or off. When the engine ignition is on, it is possible for the driver to turn on the engine and drive the vehicle.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: off, type: string, enum: [off, on]}}}}]
            responses: {'200': {description: 'Ignition State', schema: {$ref: '#/definitions/ignition'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /light_conditions:
        get:
            tags: ['Light Conditions']
            summary: 'Get Light Conditions state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Light Conditions State', schema: {$ref: '#/definitions/lightConditions'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights:
        get:
            tags: [Lights]
            summary: 'Get Lights state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Lights State', schema: {$ref: '#/definitions/lights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /lights/control_lights:
        put:
            tags: [Lights]
            summary: 'Set the lights state.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {frontExteriorLight: {example: active_with_full_beam, type: string, enum: [inactive, active, active_with_full_beam, drl, automatic]}, rearExteriorLight: {example: active, type: string, enum: [inactive, active]}, ambientLightColour: {example: {red: 255, green: 0, blue: 0}, type: object, properties: {red: {description: 'The red component of RGB', type: number, format: integer}, green: {description: 'The green component of RGB', type: number, format: integer}, blue: {description: 'The blue component of RGB', type: number, format: integer}}}, fogLights: {example: [{location: front, state: inactive}, {location: rear, state: active}], type: array, items: {type: object, properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}}}, readingLamps: {example: [{location: front_left, state: active}, {location: front_right, state: active}, {location: rear_right, state: inactive}, {location: rear_left, state: inactive}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left]}, state: {type: string, enum: [inactive, active]}}}}, interiorLights: {example: [{location: front, state: inactive}, {location: rear, state: active}], type: array, items: {type: object, properties: {location: {type: string, enum: [front, rear]}, state: {type: string, enum: [inactive, active]}}}}}}}]
            responses: {'200': {description: 'Lights State', schema: {$ref: '#/definitions/lights'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /maintenance:
        get:
            tags: [Maintenance]
            summary: 'Get Maintenance state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Maintenance State', schema: {$ref: '#/definitions/maintenance'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /messaging/message_received:
        put:
            tags: [Messaging]
            summary: 'Notify the car that a message has been received. Depending on the car system, it will display or read it loud to the driver.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'The text', example: 'Hey mom!', type: string}, handle: {description: 'The optional handle of message', example: Epp, type: string}}}}]
            responses: {'200': {description: 'Messaging State', schema: {$ref: '#/definitions/messaging'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /mobile:
        get:
            tags: [Mobile]
            summary: 'Get Mobile state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Mobile State', schema: {$ref: '#/definitions/mobile'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /multi_command/multi_command:
        put:
            tags: ['Multi Command']
            summary: null
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {multiCommands: {description: 'The outgoing commands', example: [{doors: {inside_locks_state: locked}}, {ignition: {status: off}}], type: array, items: {type: capability_state}}}}}]
            responses: {'200': {description: 'Multi Command State', schema: {$ref: '#/definitions/multiCommand'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination:
        get:
            tags: ['Navi Destination']
            summary: 'Get Navi Destination state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Navi Destination State', schema: {$ref: '#/definitions/naviDestination'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /navi_destination/set_navi_destination:
        put:
            tags: ['Navi Destination']
            summary: 'Set the navigation destination. This will be forwarded to the navigation system of the car.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {coordinates: {example: {latitude: 52.520008, longitude: 13.404954}, type: object, properties: {latitude: {description: Latitude, type: number, format: double}, longitude: {description: Longitude, type: number, format: double}}}, destinationName: {description: 'Destination name', example: Berlin, type: string}}}}]
            responses: {'200': {description: 'Navi Destination State', schema: {$ref: '#/definitions/naviDestination'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/notification:
        put:
            tags: [Notifications]
            summary: 'Send a notification to the car or smart device. The notification can have action items that the user can respond with.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'Text for the notification', example: 'Open Garage', type: string}, actionItems: {example: [{id: 27, name: Open}, {id: 28, name: Cancel}], type: array, items: {type: object, properties: {id: {description: 'Action identifier', type: number, format: integer}, name: {description: 'Name of the action', type: string}}}}}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/action:
        put:
            tags: [Notifications]
            summary: 'Activate/choose a notification action.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {activatedAction: {description: 'Identifier of the activated action', example: 27, type: number, format: integer}}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /notifications/clear_notification:
        put:
            tags: [Notifications]
            summary: 'Clear the Notification in either the car or device that has previously been sent, ignoring driver feedback.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Notifications State', schema: {$ref: '#/definitions/notifications'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /offroad:
        get:
            tags: [Offroad]
            summary: 'Get Offroad state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Offroad State', schema: {$ref: '#/definitions/offroad'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake:
        get:
            tags: ['Parking Brake']
            summary: 'Get Parking Brake state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Parking Brake State', schema: {$ref: '#/definitions/parkingBrake'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_brake/set_parking_brake:
        put:
            tags: ['Parking Brake']
            summary: 'Turn on or off the parking brake.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Parking Brake State', schema: {$ref: '#/definitions/parkingBrake'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket:
        get:
            tags: ['Parking Ticket']
            summary: 'Get Parking Ticket state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/start_parking:
        put:
            tags: ['Parking Ticket']
            summary: 'Start parking. This clears the last parking ticket information and starts a new one. The end time can be left unset depending on the operator.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {operatorTicketID: {description: 'Operator ticket ID', example: '64894233', type: string}, ticketStartTime: {description: 'Milliseconds since UNIX Epoch time', example: '2017-01-10T19:34:22.000Z', type: string, format: date-time}, operatorName: {description: 'Operator name', example: 'Berlin Parking', type: string}, ticketEndTime: {description: 'Milliseconds since UNIX Epoch time', example: '2019-10-08T11:21:45.000Z', type: string, format: date-time}}}}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /parking_ticket/end_parking:
        put:
            tags: ['Parking Ticket']
            summary: 'End parking. This updates the parking ticket information. If no end date was set, the current time is set as the ending time.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: 'Parking Ticket State', schema: {$ref: '#/definitions/parkingTicket'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff:
        get:
            tags: ['Power Take-Off']
            summary: 'Get Power Take-Off state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Power Take-Off State', schema: {$ref: '#/definitions/powerTakeoff'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /power_takeoff/activate_deactivate_power_takeoff:
        put:
            tags: ['Power Take-Off']
            summary: 'Activate or deactivate power take-off.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Power Take-Off State', schema: {$ref: '#/definitions/powerTakeoff'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /race:
        get:
            tags: [Race]
            summary: 'Get Race state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Race State', schema: {$ref: '#/definitions/race'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control:
        get:
            tags: ['Rooftop Control']
            summary: 'Get Rooftop Control state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Rooftop Control State', schema: {$ref: '#/definitions/rooftopControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /rooftop_control/control_rooftop:
        put:
            tags: ['Rooftop Control']
            summary: 'Set the rooftop state.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {dimming: {description: '1.0 (100%) is opaque, 0.0 (0%) is transparent', example: 1, type: number, format: double}, position: {description: '1.0 (100%) is fully open, 0.0 (0%) is closed', example: 0.5, type: number, format: double}, convertibleRoofState: {example: open, type: string, enum: [closed, open, emergency_locked, closed_secured, open_secured, hard_top_mounted, intermediate_position, loading_position, loading_position_immediate]}, sunroofTiltState: {example: half_tilted, type: string, enum: [closed, tilted, half_tilted]}, sunroofState: {example: open, type: string, enum: [closed, open, intermediate]}}}}]
            responses: {'200': {description: 'Rooftop Control State', schema: {$ref: '#/definitions/rooftopControl'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /seats:
        get:
            tags: [Seats]
            summary: 'Get Seats state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Seats State', schema: {$ref: '#/definitions/seats'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /tachograph:
        get:
            tags: [Tachograph]
            summary: 'Get Tachograph state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Tachograph State', schema: {$ref: '#/definitions/tachograph'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /text_input/text_input:
        put:
            tags: ['Text Input']
            summary: 'Send a keystroke or entire sentences as input to the car headunit. This can act as an alternative to the input devices that the car is equipped with.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {text: {description: 'The text', example: 'Rendezvous with Rama', type: string}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm:
        get:
            tags: ['Theft Alarm']
            summary: 'Get Theft Alarm state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Theft Alarm State', schema: {$ref: '#/definitions/theftAlarm'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /theft_alarm/set_theft_alarm:
        put:
            tags: ['Theft Alarm']
            summary: 'Unarm or arm the theft alarm of the car.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: armed, type: string, enum: [unarmed, armed, triggered]}}}}]
            responses: {'200': {description: 'Theft Alarm State', schema: {$ref: '#/definitions/theftAlarm'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk:
        get:
            tags: [Trunk]
            summary: 'Get Trunk state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Trunk State', schema: {$ref: '#/definitions/trunk'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /trunk/control_trunk:
        put:
            tags: [Trunk]
            summary: 'Unlock/Lock and Open/Close the trunk.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {lock: {example: unlocked, type: string, enum: [unlocked, locked]}, position: {example: open, type: string, enum: [closed, open]}}}}]
            responses: {'200': {description: 'Trunk State', schema: {$ref: '#/definitions/trunk'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /usage:
        get:
            tags: [Usage]
            summary: 'Get Usage state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Usage State', schema: {$ref: '#/definitions/usage'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode:
        get:
            tags: ['Valet Mode']
            summary: 'Get Valet Mode state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Valet Mode State', schema: {$ref: '#/definitions/valetMode'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /valet_mode/activate_deactivate_valet_mode:
        put:
            tags: ['Valet Mode']
            summary: 'Activate or deactivate valet mode.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: active, type: string, enum: [inactive, active]}}}}]
            responses: {'200': {description: 'Valet Mode State', schema: {$ref: '#/definitions/valetMode'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_location:
        get:
            tags: ['Vehicle Location']
            summary: 'Get Vehicle Location state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Location State', schema: {$ref: '#/definitions/vehicleLocation'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_status:
        get:
            tags: ['Vehicle Status']
            summary: 'Get Vehicle Status state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Status State', schema: {$ref: '#/definitions/vehicleStatus'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /vehicle_time:
        get:
            tags: ['Vehicle Time']
            summary: 'Get Vehicle Time state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Vehicle Time State', schema: {$ref: '#/definitions/vehicleTime'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /video_handover/video_handover:
        put:
            tags: ['Video Handover']
            summary: 'Hand over a video from smart device to car headunit to be shown in the car display. The emulator supports HTML5 video player formats .mp4 and .webm.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {url: {description: 'URL string', example: 'https://bit.ly/2obY7G5', type: string}, startingSecond: {example: 3, type: number, format: integer}, screen: {example: rear, type: string, enum: [front, rear]}}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wake_up/wake_up:
        put:
            tags: ['Wake Up']
            summary: 'Wake up the car. This is necessary when the car has fallen asleep, in which case the car responds with the Failure Message to all incoming messages. The car is also waken up by the Lock/Unlock Doors message.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {}}}]
            responses: {'200': {description: OK}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /weather_conditions:
        get:
            tags: ['Weather Conditions']
            summary: 'Get Weather Conditions state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Weather Conditions State', schema: {$ref: '#/definitions/weatherConditions'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi:
        get:
            tags: [Wi-Fi]
            summary: 'Get Wi-Fi state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/connect_to_network:
        put:
            tags: [Wi-Fi]
            summary: 'Connect the car to a Wi-Fi network.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {networkSSID: {description: 'The network SSID', example: HOME, type: string}, networkSecurity: {example: wpa2_personal, type: string, enum: [none, wep, wpa, wpa2_personal]}, password: {description: 'The network password', example: great_secret12, type: string}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/forget_network:
        put:
            tags: [Wi-Fi]
            summary: 'Forget a network that the car has previously connected to.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {networkSSID: {description: 'The network SSID', example: HOME, type: string}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /wi_fi/enable_disable_wi_fi:
        put:
            tags: [Wi-Fi]
            summary: 'Enable or disable Wi-Fi completely.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {status: {example: enabled, type: string, enum: [disabled, enabled]}}}}]
            responses: {'200': {description: 'Wi-Fi State', schema: {$ref: '#/definitions/wiFi'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows:
        get:
            tags: [Windows]
            summary: 'Get Windows state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Windows State', schema: {$ref: '#/definitions/windows'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windows/control_windows:
        put:
            tags: [Windows]
            summary: 'Open or close the windows. Either one or all windows can be controlled with the same command.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {openPercentages: {example: [{location: front_left, open_percentage: 0.2}, {location: front_right, open_percentage: 0.5}, {location: rear_right, open_percentage: 0.5}, {location: rear_left, open_percentage: 0.1}, {location: hatch, open_percentage: 0.18}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, openPercentage: {description: 'Percentage value between 0.0 - 1.0 (0% - 100%)', type: number, format: double}}}}, positions: {example: [{location: front_left, position: open}, {location: front_right, position: open}, {location: rear_right, position: closed}, {location: rear_left, position: open}, {location: hatch, position: open}], type: array, items: {type: object, properties: {location: {type: string, enum: [front_left, front_right, rear_right, rear_left, hatch]}, position: {type: string, enum: [closed, open, intermediate]}}}}}}}]
            responses: {'200': {description: 'Windows State', schema: {$ref: '#/definitions/windows'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen:
        get:
            tags: [Windscreen]
            summary: 'Get Windscreen state'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/set_windscreen_damage:
        put:
            tags: [Windscreen]
            summary: 'Set the windscreen damage. This is for instance used to reset the glass damage or correct it. Damage confidence percentage is automatically set to either 0% or 100%.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {windscreenDamage: {example: impact_but_no_damage_detected, type: string, enum: [no_impact_detected, impact_but_no_damage_detected, damage_smaller_than_1_inch, damage_larger_than_1_inch]}, windscreenDamageZone: {description: 'Representing the position in the zone, seen from the inside of the vehicle (1-based index)', example: {horizontal: 1, vertical: 2}, type: object, properties: {horizontal: {description: 'Horizontal component of the matrix', type: number, format: integer}, vertical: {description: 'Vertical component of the matrix', type: number, format: integer}}}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/set_windscreen_replacement_needed:
        put:
            tags: [Windscreen]
            summary: 'Set if the windscreen needs replacement.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {windscreenNeedsReplacement: {example: no_replacement_needed, type: string, enum: [unknown, no_replacement_needed, replacement_needed]}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
    /windscreen/control_wipers:
        put:
            tags: [Windscreen]
            summary: 'Control the wipers.'
            produces: [application/json]
            parameters: [{$ref: '#/parameters/authorizationParam'}, {in: body, name: body, required: true, schema: {type: object, properties: {wipersStatus: {example: automatic, type: string, enum: [inactive, active, automatic]}, wipersIntensity: {example: level_3, type: string, enum: [level_0, level_1, level_2, level_3]}}}}]
            responses: {'200': {description: 'Windscreen State', schema: {$ref: '#/definitions/windscreen'}}, '400': {description: 'Error 400', schema: {$ref: '#/definitions/Error400'}}, '401': {description: 'Error 401', schema: {$ref: '#/definitions/Error401'}}, '403': {description: 'Error 403', schema: {$ref: '#/definitions/Error403'}}, '408': {description: 'Error 404', schema: {$ref: '#/definitions/Error408'}}}
